/*
 * KINOVA (R) KORTEX (TM)
 *
 * Copyright (c) 2018 Kinova inc. All rights reserved.
 *
 * This software may be modified and distributed
 * under the terms of the BSD 3-Clause license.
 *
 * Refer to the LICENSE file for details.
 *
 */

syntax = "proto3";

import public "Common.proto";

package Kinova.Api.ControlConfig;

// Service to configure robot control library
service ControlConfig {//@PROXY_ID=16 @ERROR=Kinova.Api.Error

    // Sets global gravity vector in terms of base reference frame. This needs to be configured to enable control of the robot in wall or ceiling mounting of the robot.
    rpc SetGravityVector (GravityVector) returns (Kinova.Api.Common.Empty);//@RPC_ID=1

    // Retrieves global gravity vector
    rpc GetGravityVector (Kinova.Api.Common.Empty) returns (GravityVector);//@RPC_ID=2

    // Sets payload information. This needs to be configured so that the control library can take into account the presence of the payload mass in computing the dynamics of the robot.
    rpc SetPayloadInformation (PayloadInformation) returns (Kinova.Api.Common.Empty);//@RPC_ID=3

    // Retrieves payload information
    rpc GetPayloadInformation (Kinova.Api.Common.Empty) returns (PayloadInformation);//@RPC_ID=4

    // Sets tool configuration. This needs to be configured for two reasons. 1) so that the control library can take into account the presence of the tool mass in computing the dynamics of the robot. 2) so that the robot is aware of the tool frame center relative position and orientation to correctly compute and report the tool position.
    rpc SetToolConfiguration (ToolConfiguration) returns (Kinova.Api.Common.Empty);//@RPC_ID=5

    // Retrieves tool configuration
    rpc GetToolConfiguration (Kinova.Api.Common.Empty) returns (ToolConfiguration);//@RPC_ID=6

    // Subscribes to control configuration notifications
    rpc ControlConfigurationTopic (Kinova.Api.Common.NotificationOptions) returns (Kinova.Api.Common.NotificationHandle);//@RPC_ID=7 @PUB_SUB=ControlConfigurationNotification

    // Unsubscribes client from receiving specified type of notifications
    rpc Unsubscribe (Kinova.Api.Common.NotificationHandle) returns (Kinova.Api.Common.Empty);//@RPC_ID=8 @UNSUB

    // Defines the reference frame to use with twist and wrench commands
    rpc SetCartesianReferenceFrame (CartesianReferenceFrameInfo) returns (Kinova.Api.Common.Empty);//@RPC_ID=9

    // Retrieves the current reference frame used by the twist and wrench commands
    rpc GetCartesianReferenceFrame (Kinova.Api.Common.Empty) returns (CartesianReferenceFrameInfo);//@RPC_ID=10

    // Retrieves current control mode
    rpc GetControlMode (Kinova.Api.Common.Empty) returns (ControlModeInformation);//@RPC_ID=13

    // Set the software joint speed limits.
    rpc SetJointSpeedSoftLimits (JointSpeedSoftLimits) returns (Kinova.Api.Common.Empty);//@RPC_ID=14

    // Set the software twist linear limit.
    rpc SetTwistLinearSoftLimit (TwistLinearSoftLimit) returns (Kinova.Api.Common.Empty);//@RPC_ID=15

    // Set the software twist angular limit.
    rpc SetTwistAngularSoftLimit (TwistAngularSoftLimit) returns (Kinova.Api.Common.Empty);//@RPC_ID=16

    // Set the software joint acceleration limits.
    rpc SetJointAccelerationSoftLimits (JointAccelerationSoftLimits) returns (Kinova.Api.Common.Empty);//@RPC_ID=17

    // Retrieves angular and twist hard limits.
    rpc GetKinematicHardLimits (Kinova.Api.Common.Empty) returns (KinematicLimits);//@RPC_ID=18

    // Retrieves the software kinematic limits for a specific control mode.
    rpc GetKinematicSoftLimits (ControlModeInformation) returns (KinematicLimits);//@RPC_ID=19

    // Retrieves the software kinematic limits for all control modes.
    rpc GetAllKinematicSoftLimits (Kinova.Api.Common.Empty) returns (KinematicLimitsList);//@RPC_ID=20

    // Set the desired linear twist when using the joystick.
    rpc SetDesiredLinearTwist (LinearTwist) returns (Kinova.Api.Common.Empty);//@RPC_ID=21

    // Set the desired angular twist when using the joystick.
    rpc SetDesiredAngularTwist (AngularTwist) returns (Kinova.Api.Common.Empty);//@RPC_ID=22

    // Set the desired joint speeds when using the joystick in angular mode.
    rpc SetDesiredJointSpeeds (JointSpeeds) returns (Kinova.Api.Common.Empty);//@RPC_ID=23

    // Retrieves the desired joystick speeds
    rpc GetDesiredSpeeds (Kinova.Api.Common.Empty) returns (DesiredSpeeds);//@RPC_ID=24

    // Resets gravity vector to default values
    rpc ResetGravityVector (Kinova.Api.Common.Empty) returns (GravityVector);//@RPC_ID=25

    // Resets payload information to default values
    rpc ResetPayloadInformation (Kinova.Api.Common.Empty) returns (PayloadInformation);//@RPC_ID=26

    // Resets tool configuration to default values
    rpc ResetToolConfiguration (Kinova.Api.Common.Empty) returns (ToolConfiguration);//@RPC_ID=27

    // Resets joint speed soft limits to default values
    rpc ResetJointSpeedSoftLimits (ControlModeInformation) returns (JointSpeedSoftLimits);//@RPC_ID=28

    // Resets twist linear soft limit to default value
    rpc ResetTwistLinearSoftLimit (ControlModeInformation) returns (TwistLinearSoftLimit);//@RPC_ID=29

    // Resets twist angular soft limit to default value
    rpc ResetTwistAngularSoftLimit (ControlModeInformation) returns (TwistAngularSoftLimit);//@RPC_ID=30

    // Resets joint acceleration soft limits to default values
    rpc ResetJointAccelerationSoftLimits (ControlModeInformation) returns (JointAccelerationSoftLimits);//@RPC_ID=31

    // Subscribes to control mode topic for notifications
    rpc ControlModeTopic (Kinova.Api.Common.NotificationOptions) returns (Kinova.Api.Common.NotificationHandle);//@RPC_ID=32 @PUB_SUB=ControlModeNotification
}

// Identifies ControlConfig current version
enum ServiceVersion
{
    RESERVED_0 = 0;       // Reserved
    CURRENT_VERSION = 1;  // Current version
}

// Defines the gravity vector in terms of the robot base frame. If not explicitly configured, it defaults to (0, 0, -9.81), assuming a mounting on a horizontal surface. If the robot is mounted on a wall or ceiling, the gravity vector relative to the base frame will change. The control library needs to be aware of this to accurately compensate for gravity.
message GravityVector
{
    float x = 1;                // x (meters / second^squared)
    float y = 2;                // y (meters / second^squared)
    float z = 3;                // z (meters / second^squared)
}

// A Cartesian position
message Position {
    float x = 1;      // x position (in meters)
    float y = 2;      // y position (in meters)
    float z = 3;      // z position (in meters)
}

// Defines payload information
message PayloadInformation
{
    float payload_mass = 1;             // Tool mass in kg
    Position payload_mass_center = 2;   // Tool mass center position relative to the tool reference frame
}

// Defines a Cartesian transform
message CartesianTransform
{
    float x = 1;       // x (in meters)
    float y = 2;       // y (in meters)
    float z = 3;       // z (in meters)
    float theta_x = 4; // Theta x (in degrees)
    float theta_y = 5; // Theta y (in degrees)
    float theta_z = 6; // Theta z (in degrees)
}

// Defines a tool configuration
message ToolConfiguration {
    CartesianTransform tool_transform = 1;  // Cartesian transform tool
    float tool_mass = 2;                    // Tool mass (in kg)
    Position tool_mass_center = 3;          // Tool mass center position relative to the interface module reference frame
}

// Admissible control configuration events
enum ControlConfigurationEvent {
    UNSPECIFIED_CONTROL_CONFIGURATION_EVENT = 0;            // Unspecified control configuration event
    ANGLE_UNIT_CHANGED = 1;                                 // Angle unit changed event
    GRAVITY_VECTOR_CHANGED = 2;                             // Gravity vector changed event
    JOINT_ADMITTANCE_CONFIGURATION_CHANGED = 4;             // Joint admittance configuration changed event
    NULL_ADMITTANCE_CONFIGURATION_CHANGED = 5;              // Null admittance configuration changed event
    CARTESIAN_ADMITTANCE_CONFIGURATION_CHANGED = 6;         // Cartesian admittance configuration changed event
    JOINT_TORQUE_HYBRID_CONFIGURATION_CHANGED = 7;          // Joint torque hybrid configuraiton changed event
    WRENCH_COMMAND_NORMAL_CONFIGURATION_CHANGED = 8;        // Wrench commmand normal configuration changed event
    WRENCH_COMMAND_RESTRICTED_CONFIGURATION_CHANGED = 9;    // Wrench command restricted configuration changed event
    CONTROL_CONFIGURATION_FACTORY_RESTORED = 10;            // Control configuration factory restored event
    TOOL_CONFIGURATION_CHANGED = 11;                        // Tool configuration event
    PAYLOAD_CONFIGURATION_CHANGED = 12;                     // Payload configuration event
    CARTESIAN_REFERENCE_CHANGED = 13;                       // Cartesian reference event
    CHANGE_CONTROL_MODE_FAILED = 14;                        // Control mode change fail event
    JOINT_SPEED_SOFT_LIMITS_CHANGED = 16;                   // Joint speed software limits changed event
    TWIST_LINEAR_SOFT_LIMIT_CHANGED = 17;                   // Linear speed software limit changed event
    TWIST_ANGULAR_SOFT_LIMIT_CHANGED = 18;                  // Angular speed software limit changed event
    JOINT_ACCELERATION_SOFT_LIMITS_CHANGED = 19;            // Joint acceleration software limits changed event
    DESIRED_TWIST_LINEAR_SPEED_CHANGED = 20;                // Desired joystick twist linear speed changed event
    DESIRED_TWIST_ANGULAR_SPEED_CHANGED = 21;               // Desired joystick twist angular speed changed event
    DESIRED_JOINT_SPEED_CHANGED = 22;                       // Desired joystick joint speed changed event
}

// Notification about a single control configuration event
message ControlConfigurationNotification {
    ControlConfigurationEvent event = 1;
    Kinova.Api.Common.Timestamp timestamp = 2;              // Event timestamp
    Kinova.Api.Common.UserProfileHandle user_handle = 3;    // User that caused the factory event to occur
    Kinova.Api.Common.Connection connection = 4;            // Connection that caused the configuration event
}

// Cartesian reference frame
message CartesianReferenceFrameInfo {
    Kinova.Api.Common.CartesianReferenceFrame reference_frame = 1;    // Reference frame
}

// Software twist linear speed limit
message TwistLinearSoftLimit {
    ControlMode control_mode = 1;                   // Control mode
    float twist_linear_soft_limit = 2;              // Software linear twist limit
}

// Software twist angular speed limit
message TwistAngularSoftLimit {
    ControlMode control_mode = 1;                   // Control mode
    float twist_angular_soft_limit = 2;             // Software angular twist limit
}

// Software joint speed limits
message JointSpeedSoftLimits {
    ControlMode control_mode = 1;                   // Control mode
    repeated float joint_speed_soft_limits = 2;     // Software joint speed limits
}

// Software Joint acceleration limits
message JointAccelerationSoftLimits {
    ControlMode control_mode = 1;                            // Control mode
    repeated float joint_acceleration_soft_limits = 2;       // Software acceleration limits
}

// Kinematic limits
message KinematicLimits {
    ControlMode control_mode = 1;                       // Control mode
    float twist_linear = 2;                             // Linear twist limits
    float twist_angular = 3;                            // Angular twist limits
    repeated float joint_speed_limits = 4;              // Joint speed limits
    repeated float joint_acceleration_limits = 5;       // Joint Acceleration limits
}

// Kinematic limits
message KinematicLimitsList {
    repeated KinematicLimits kinematic_limits_list = 1;     // List of kinematic limits
}

// Desired Joystick speeds.
message DesiredSpeeds {
    float linear = 1;                               // Desired linear speed (meters / second)
    float angular = 2;                              // Desired angular speed (degrees / second)
    repeated float joint_speed = 3;                 // Desired joint speeds (degrees / second)
}

// Desired Joystick linear speed.
message LinearTwist {
    float linear = 1;                               // Desired linear speed (meters / second)
}

// Desired Joystick angular speed.
message AngularTwist {
    float angular = 1;                              // Desired angular speed (degrees / second)
}

// Desired Joystick joint speeds.
message JointSpeeds {
    repeated float joint_speed = 1;                 // Desired joint speeds (degrees / second)
}

// Admissible robot control modes
enum ControlMode {
    UNSPECIFIED_CONTROL_MODE = 0;           // Unspecified control mode
    ANGULAR_JOYSTICK = 1;                   // Angular joystick mode
    CARTESIAN_JOYSTICK = 2;                 // Cartesian joystick mode
    ANGULAR_TRAJECTORY = 4;                 // Angular trajectory mode
    CARTESIAN_TRAJECTORY = 5;               // Cartesian trajectory mode
    CARTESIAN_ADMITTANCE = 6;               // Cartesian admittance mode
    JOINT_ADMITTANCE = 7;                   // Joint admittance mode
    NULL_SPACE_ADMITTANCE = 8;              // Null space mode
    FORCE_CONTROL = 10;                     // Force control mode
    FORCE_CONTROL_MOTION_RESTRICTED = 11;   // Force control motion restricted mode
    CARTESIAN_WAYPOINT_TRAJECTORY = 12;     // Cartesian waypoint trajectory mode
    IDLE = 13;                              // Idle
};

// Control mode information
message ControlModeInformation {
    ControlMode control_mode = 1; // Control mode
}

// Notification about a single control mode event
message ControlModeNotification {
    ControlMode control_mode = 1;                           // New control mode
    Kinova.Api.Common.Timestamp timestamp = 2;              // Event timestamp
    Kinova.Api.Common.UserProfileHandle user_handle = 3;    // User that caused the control mode event
    Kinova.Api.Common.Connection connection = 4;            // Connection that caused the control mode event
}
