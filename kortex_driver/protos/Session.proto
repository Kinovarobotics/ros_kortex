/*
 * KINOVA (R) KORTEX (TM)
 *
 * Copyright (c) 2018 Kinova inc. All rights reserved.
 *
 * This software may be modified and distributed
 * under the terms of the BSD 3-Clause license.
 *
 * Refer to the LICENSE file for details.
 *
 */
 
syntax = "proto3";

import public "Common.proto";

package Kinova.Api.Session;

// Service to manage user sessions
service Session {//@PROXY_ID=1 @ERROR=Kinova.Api.Error

  // Creates a new session on the robot using given values for user name, session timeout value, and password
  rpc CreateSession (CreateSessionInfo) returns (Kinova.Api.Common.Empty);//@RPC_ID=1
  
  // Closes an existing open session
  rpc CloseSession (Kinova.Api.Common.Empty) returns (Kinova.Api.Common.Empty);//@RPC_ID=2
  
  // Sends message to robot to keep current session alive
  rpc KeepAlive (Kinova.Api.Common.Empty) returns (Kinova.Api.Common.Empty);//@RPC_ID=3
  
  // Retrieves the list of connections
  rpc GetConnections (Kinova.Api.Common.Empty) returns (ConnectionList);//@RPC_ID=4
}

// Identifies session service current version
enum ServiceVersion {
  RESERVED_0 = 0;       // Reserved
  CURRENT_VERSION = 1;  // Current version
}

// Parameters needed to create a new session
message CreateSessionInfo{
  string username = 1;                      // User name 
  uint32 session_inactivity_timeout = 2;    // Inactivity period (in milliseconds) allowed before the session times out and closes on its own
  string password = 3;                      // Password for the user
  uint32 connection_inactivity_timeout = 4; // Inactivity period (in milliseconds) allowed before the robot stops any movements initiated from this session
}

// Array of connections
message ConnectionList {
    repeated Kinova.Api.Common.Connection connection = 1; // Connection
}
