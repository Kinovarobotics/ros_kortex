/*
 * KINOVA (R) KORTEX (TM)
 *
 * Copyright (c) 2018 Kinova inc. All rights reserved.
 *
 * This software may be modified and distributed
 * under the terms of the BSD 3-Clause license.
 *
 * Refer to the LICENSE file for details.
 *
 */

syntax = "proto3";
 
import public "Common.proto";

package Kinova.Api.ActuatorCyclic;

// Service to exchange cyclic data with an actuator 
service ActuatorCyclic {//@PROXY_ID=11 @ERROR=Kinova.Api.Error

    // Sends a command to a single actuator and receives feedback on status of that actuator
    rpc Refresh (Command)                   returns (Feedback);                 //@RPC_ID=1

    // Sends a command to a single actuator without feedback
    rpc RefreshCommand (Command)            returns (Kinova.Api.Common.Empty);  //@RPC_ID=2

    // Obtains feedback from a single actuator
    rpc RefreshFeedback (MessageId)         returns (Feedback);                 //@RPC_ID=3

    // Obtains custom data from a single actuator
    rpc RefreshCustomData (MessageId)       returns (CustomData);               //@RPC_ID=4
}

// Identifies ActuatorCyclic service current version
enum ServiceVersion {
    RESERVED_0 = 0;                 // Reserved
    CURRENT_VERSION = 1;            // Current version
}

// Identifies actuator commands
enum CommandFlags {
    NO_COMMAND           = 0;   // 0x0 Default value
    SERVO_ENABLE         = 1;   // 0x1 Servoing mode is enabled
    BRAKE_DISABLE        = 2;   // 0x2 Brake normally applied, 1 disables brake
    CLEAR_MAJOR_FAULT    = 4;   // 0x4 Clear the major fault flag (See StatusFlags)
    CLEAR_MINOR_FAULT    = 8;   // 0x8 Clear the minor fault flag (See StatusFlags)
    PROTECTIVE_STOP      = 16;  // 0x10 Protective stop has been activated
    FORCE_BRAKE_RELEASE  = 32;  // 0x20 Force a brake release
    IGNORE               = 64;  // 0x40 ignore the other CommandFlag bits
    LOW_GAINS            = 128; // 0x80 Use a set of specific gain value used by the joint admittance mode
    LED_0                = 256; // 0x100 Activate LED 0 (interface module buttons 0)
    LED_1                = 512; // 0x200 Activate LED 1 (interface module buttons 1)
}

// Identifies actuator status
enum StatusFlags {
    UNKNOWN_STATUS           = 0;         // 0x0 Unknown status 
    STABILIZED               = 16;        // 0x10 Actuator is in a stable state
    MOTOR_INDEXED            = 32;        // 0x20 Position sensor is indexed
    MOTOR_INDEXING           = 64;        // 0x40 Position sensor is indexing
    JOINT_INDEXED            = 128;       // 0x80 Reserved
    JOINT_INDEXING           = 256;       // 0x100 Reserved
    HIGH_PRECISION           = 512;       // 0x200 Reserved
    BRAKING                  = 1024;      // 0x400 The actuator is braking
    SERVOING                 = 2048;      // 0x800 The actuator is in servoing mode
    MAJOR_FAULT              = 4096;      // 0x1000 A major fault has occurred
    MINOR_FAULT              = 8192;      // 0x2000 A minor fault has occurred
    CALIBRATED_TORQUE        = 16384;     // 0x4000 The torque sensor is calibrated
    CALIBRATED_MAG_SENSOR    = 32768;     // 0x8000 The magnetic sensor is calibrated
    CALIBRATED_ZERO          = 65536;     // 0x10000 The zero position calibration has been performed
    GPIO_0                   = 131072;    // 0x20000 Reserved
    GPIO_1                   = 262144;    // 0x40000 Reserved
    CS_QUASI_STATIC_CONTACT  = 524288;    // 0x80000 Reserved
    CS_TRANSIENT_CONTACT     = 1048576;   // 0x100000 Reserved
    VFD_HALL_SYNC            = 2097152;   // 0x200000 Reserved
    VFD_INDEXED              = 4194304;   // 0x400000 Reserved
    DRIVE_BOARD_READY        = 8388608;   // 0x800000 Reserved
    CALIBRATED_CURRENT       = 16777216;  // 0x1000000 Current sensor is calibrated
    CALIBRATED_MOTOR         = 33554432;  // 0x2000000 Motor is calibrated
    SW0_ACTIVE               = 67108864;  // 0x4000000 Status of interface module buttons 0
    SW1_ACTIVE               = 134217728; // 0x8000000 Status of interface module buttons 1
}

// Provides a message identifier
message MessageId {
    fixed32   identifier        = 1;  // Message ID (first 2 bytes : device ID, last 2 bytes : sequence number). By default, set to zero
}

// Defines an actuator command
message Command {
    MessageId command_id        = 1;  // MessageId
    fixed32   flags             = 2;  // Command flags (see enum CommandFlags)
    float     position          = 3;  // Desired position of the actuator (degrees)
    float     velocity          = 4;  // Desired velocity of the actuator (degrees per second)
    float     torque_joint      = 5;  // Desired torque of the actuator (Newton-meters)
    float     current_motor     = 6;  // Desired current of the motor (Amperes)
}

// Status feedback provided by an actuator
message Feedback {
    MessageId feedback_id       = 1;  // MessageId
    fixed32   status_flags      = 2;  // Status flags (see enum StatusFlags for the rest)
    fixed32   jitter_comm       = 3;  // Jitter from the communication in Î¼s
    float     position          = 4;  // Position of the actuator (degrees)
    float     velocity          = 5;  // Angular velocity of the actuator (degrees per second)
    float     torque            = 6;  // Torque of the actuator (Newton meter)
    float     current_motor     = 7;  // Current of the motor (Amperes)
    float     voltage           = 8;  // Voltage of the main board in (Volt)
    float     temperature_motor = 9;  // Motor temperature (average of the three (3) temperatures (degrees Celsius))
    float     temperature_core  = 10; // Microcontroller temperature in (degrees Celsius)
    fixed32   fault_bank_a      = 11; // Bank A Fault (see ActuatorConfig.SafetyIdentifier)
    fixed32   fault_bank_b      = 12; // Bank B Fault (see ActuatorConfig.SafetyIdentifier)
    fixed32   warning_bank_a    = 13; // Bank A Warning (see ActuatorConfig.SafetyIdentifier)
    fixed32   warning_bank_b    = 14; // Bank B Warning (see ActuatorConfig.SafetyIdentifier)
}

// Custom development data, content varies according to debug needs
message CustomData {
    MessageId custom_data_id    = 1;  // MessageId
    fixed32   custom_data_0     = 2;  // Custom data word 0
    fixed32   custom_data_1     = 3;  // Custom data word 1
    fixed32   custom_data_2     = 4;  // Custom data word 2
    fixed32   custom_data_3     = 5;  // Custom data word 3
    fixed32   custom_data_4     = 6;  // Custom data word 4
    fixed32   custom_data_5     = 7;  // Custom data word 5
    fixed32   custom_data_6     = 8;  // Custom data word 6
    fixed32   custom_data_7     = 9;  // Custom data word 7
    fixed32   custom_data_8     = 10; // Custom data word 8
    fixed32   custom_data_9     = 11; // Custom data word 9
    fixed32   custom_data_10    = 12; // Custom data word 10
    fixed32   custom_data_11    = 13; // Custom data word 11
    fixed32   custom_data_12    = 14; // Custom data word 12
    fixed32   custom_data_13    = 15; // Custom data word 13
    fixed32   custom_data_14    = 16; // Custom data word 14
    fixed32   custom_data_15    = 17; // Custom data word 15
}
