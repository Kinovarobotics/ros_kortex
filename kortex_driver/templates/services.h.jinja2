/*
* KINOVA (R) KORTEX (TM)
*
* Copyright (c) 2019 Kinova inc. All rights reserved.
*
* This software may be modified and distributed under the
* terms of the BSD 3-Clause license.
*
* Refer to the LICENSE file for details.
*
*/

/*
 * This file has been auto-generated and should not be modified.
 */
 
#ifndef _KORTEX_{{package.short_name|upper}}_SERVICES_H_
#define _KORTEX_{{package.short_name|upper}}_SERVICES_H_

#include "ros/ros.h"

#include <string>
#include <iostream>
#include <cstdio>
#include <iostream>
#include <chrono>

#include <{{package.short_name}}.pb.h>
#include <{{package.short_name}}ClientRpc.h>

{%- for method in package.methods %}
#include "kortex_driver/{{method.prepend_rpc_package_name}}{{method.prepend_on_notification}}{{method.name}}.h"
{%- if method.is_notification_rpc %}
#include "kortex_driver/{{method_prepend_rpc_package_name}}{{method.name|replace("Topic", "")}}Notification.h"
{%- endif %}
{%- endfor %}

#include "kortex_driver/KortexError.h"
#include "kortex_driver/SetDeviceID.h"
#include "kortex_driver/SetApiOptions.h"
#include "kortex_driver/ApiOptions.h"

using namespace std;

class {{package.short_name}}Services
{
    public:
        {{package.short_name}}Services(ros::NodeHandle& n, {{package.cpp_namespace}}::{{package.short_name}}Client* {{package.short_name|lower}}, uint32_t device_id, uint32_t timeout_ms);

        bool SetDeviceID(kortex_driver::SetDeviceID::Request  &req, kortex_driver::SetDeviceID::Response &res);
        bool SetApiOptions(kortex_driver::SetApiOptions::Request  &req, kortex_driver::SetApiOptions::Response &res);
{%- for method in package.methods %}
        bool {{method.prepend_rpc_package_name}}{{method.prepend_on_notification}}{{method.name}}(kortex_driver::{{method.prepend_rpc_package_name}}{{method.prepend_on_notification}}{{method.name}}::Request  &req, kortex_driver::{{method.prepend_rpc_package_name}}{{method.prepend_on_notification}}{{method.name}}::Response &res);
{%- if method.is_notification_rpc %}
        void cb_{{method.name}}({{method.notification_message_cpp_namespace}}::{{method.prepend_rpc_package_name}}{{method.name|replace("Topic", "")}}Notification notif);
{%- endif %}
{%- endfor %}

private:
        uint32_t m_current_device_id;
        Kinova::Api::RouterClientSendOptions m_api_options;

        {{package.cpp_namespace}}::{{package.short_name}}Client* m_{{package.short_name|lower}};

        ros::NodeHandle m_n;
        ros::Publisher m_pub_Error;

{%- for method in package.methods %}
{%- if method.is_notification_rpc %}
        ros::Publisher m_pub_{{method.name}};
{%- endif %}
{%- endfor %}

        ros::ServiceServer m_serviceSetDeviceID;
        ros::ServiceServer m_serviceSetApiOptions;
{% for method in package.methods %}
	ros::ServiceServer m_service{{method.prepend_rpc_package_name}}{{method.prepend_on_notification}}{{method.name}};
{%- endfor %}
};
#endif

