/*
* KINOVA (R) KORTEX (TM)
*
* Copyright (c) 2019 Kinova inc. All rights reserved.
*
* This software may be modified and distributed under the
* terms of the BSD 3-Clause license.
*
* Refer to the LICENSE file for details.
*
*/

/*
 * This file has been auto-generated and should not be modified.
 */
 
#include "{{current_header_filename}}"

{% for detailed_message in package.messages -%}
int ToRosData({{detailed_message.cpp_namespace}}::{{detailed_message.name}} input, kortex_driver::{{detailed_message.prepend_message_name}}{{detailed_message.name}} &output)
{
	{% for field in detailed_message.message.field -%}
	{%- if not field.HasField("oneof_index") -%}
	{%- if field.label == 3 -%} {# REPEATED #}
	{%- if field.type == 11 %}
	output.{{field.name}}.clear();
	for(int i = 0; i < input.{{field.name|lower}}_size(); i++)
	{
		decltype(output.{{field.name}})::value_type temp;
		ToRosData(input.{{field.name|lower}}(i), temp);
		output.{{field.name}}.push_back(temp);
	}
	{%- else %}
	output.{{field.name}}.clear();
	for(int i = 0; i < input.{{field.name|lower}}_size(); i++)
	{
		output.{{field.name}}.push_back(input.{{field.name|lower}}(i));
	}	
	{%- endif %}
	{%- else %}
	{%- if field.type == 11 %}
	ToRosData(input.{{field.name}}(), output.{{field.name}});
	{%- elif field.type == 14 %}
	output.{{field.name}} = input.{{field.name}}(); 
	{%- elif field.type == 12 %}
	output.{{field.name}} = std::vector<uint8_t>(input.{{field.name}}().begin(), input.{{field.name}}().end());
	{%- else %}
	output.{{field.name}} = input.{{field.name}}(); 
	{%- endif %}
	{%- endif %}
	{%- endif %}
	{%- endfor %}

	{% for detailed_one_of in detailed_message.one_of_list %}
	auto oneof_type_{{detailed_one_of.name}} = input.{{detailed_one_of.name}}_case();
	switch(oneof_type_{{detailed_one_of.name}})
	{
	{%- for field in detailed_one_of.fields %}
	{%- if "_" in field.name -%} {%- set EnumName = field.name.replace("_", " ").title().replace(" ", "") -%} {# In case the field is in the form of "gripper_command" #}
	{%- else -%} {%- set EnumName = field.name[0]|upper + field.name[1:] -%} {%- endif %} {# In case the field is in the form of "gripperCommand" #}
	
		case {{detailed_message.cpp_namespace}}::{{detailed_message.message.name}}::k{{EnumName}}:
		{
	{%- if field.type == 11 %}
			decltype(output.oneof_{{detailed_one_of.name}}.{{field.name}})::value_type temp;
			ToRosData(input.{{field.name}}(), temp);
			output.oneof_{{detailed_one_of.name}}.{{field.name}}.push_back(temp);
	{%- elif field.type == 14 %}
			output.oneof_{{detailed_one_of.name}}.{{field.name}}.push_back(input.{{field.name}}());
	{% endif %}
			break;
		}
	{%- endfor -%}
	}
	{%- endfor %}
	
	return 0;
}
{% endfor %}
