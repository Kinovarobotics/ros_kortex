/*
* KINOVA (R) KORTEX (TM)
*
* Copyright (c) 2018 Kinova inc. All rights reserved.
*
* This software may be modified and distributed under the
* terms of the BSD 3-Clause license.
*
* Refer to the LICENSE file for details.
*
*/

/*
 * This file has been auto-generated and should not be modified.
 */
 
#include "node.h"
#include "math_util.h"

#include <sensor_msgs/JointState.h>
#include <sstream>

#define JOINT_COUNT 7

int main(int argc, char **argv)
{
    ros::init(argc, argv, "BaseServices");
    
    uint32_t cyclic_data_rate = 100;

    ros::NodeHandle n;
    bool valid_ip = false;

    if(argc > 2)
    {
        ROS_INFO("Connecting to IP = %s - node refresh rate = %s", argv[1], argv[2]);
        
        //Converting the second parameter(the cyclic rate) to an unsigned int variable.
        stringstream tempRate;
        tempRate << argv[2];
        tempRate >> cyclic_data_rate;
        if(tempRate.fail() || tempRate.bad())
        {
            ROS_INFO("ERROR - Bad error rate, shutting down the node...");
            ros::shutdown();
            return 0;
        }
    }
    else
    {
        ROS_INFO("You need to provide an IP adresse as the first parameter and a cycle rate(Hertz) as the second parameter. ex: rosrun package node 192.168.1.1 100");
        ros::shutdown();
        return 0;
    }
    
    BaseServices services_object(argv[1], n);

    ros::ServiceServer serviceSetDeviceID = n.advertiseService("SetDeviceID", &BaseServices::SetDeviceID, &services_object);

    {% for function in list_function -%}
    ros::ServiceServer service{{function}} = n.advertiseService("{{function}}", &BaseServices::{{function}}, &services_object);
    {% endfor %}

    ROS_INFO("Node's services initialized correctly.");

    ros::Publisher pub_base_feedback = n.advertise<kortex_driver::Feedback>("base_feedback", 1000);
    ros::Publisher pub_joint_state = n.advertise<sensor_msgs::JointState>("base_feedback/joint_state", 1000);

    kortex_driver::Feedback base_feedback;
    kortex_driver::RefreshFeedback::Request req;
    kortex_driver::RefreshFeedback::Response res;

    sensor_msgs::JointState joint_state;

    ros::Rate rate(cyclic_data_rate);
    while (!ros::isShuttingDown())
    {
        services_object.RefreshFeedback(req, res);

        base_feedback.frame_id = res.output.frame_id;

        base_feedback.base.arm_voltage = res.output.base.arm_voltage;
        base_feedback.base.arm_current = res.output.base.arm_current;
        base_feedback.base.temperature_cpu = res.output.base.temperature_cpu;
        base_feedback.base.temperature_ambient = res.output.base.temperature_ambient;
        base_feedback.base.imu_acceleration_x = res.output.base.imu_acceleration_x;
        base_feedback.base.imu_acceleration_y = res.output.base.imu_acceleration_y;
        base_feedback.base.imu_acceleration_z = res.output.base.imu_acceleration_z;
        base_feedback.base.imu_angular_velocity_x = res.output.base.imu_angular_velocity_x;
        base_feedback.base.imu_angular_velocity_y = res.output.base.imu_angular_velocity_y;
        base_feedback.base.imu_angular_velocity_z = res.output.base.imu_angular_velocity_z;
        base_feedback.base.tool_pose_x = res.output.base.tool_pose_x;
        base_feedback.base.tool_pose_y = res.output.base.tool_pose_y;
        base_feedback.base.tool_pose_z = res.output.base.tool_pose_z;
        base_feedback.base.tool_pose_theta_x = res.output.base.tool_pose_theta_x;
        base_feedback.base.tool_pose_theta_y = res.output.base.tool_pose_theta_y;
        base_feedback.base.tool_pose_theta_z = res.output.base.tool_pose_theta_z;
        base_feedback.base.tool_external_wrench_force_x = res.output.base.tool_external_wrench_force_x;
        base_feedback.base.tool_external_wrench_force_y = res.output.base.tool_external_wrench_force_y;
        base_feedback.base.tool_external_wrench_force_z = res.output.base.tool_external_wrench_force_z;
        base_feedback.base.tool_external_wrench_torque_x = res.output.base.tool_external_wrench_torque_x;
        base_feedback.base.tool_external_wrench_torque_y = res.output.base.tool_external_wrench_torque_y;
        base_feedback.base.tool_external_wrench_torque_z = res.output.base.tool_external_wrench_torque_z;
        base_feedback.base.fault_bank_a = res.output.base.fault_bank_a;
        base_feedback.base.fault_bank_b = res.output.base.fault_bank_b;
        base_feedback.base.warning_bank_a = res.output.base.warning_bank_a;
        base_feedback.base.warning_bank_b = res.output.base.warning_bank_b;

        base_feedback.actuators.clear();

        joint_state.position.resize(JOINT_COUNT);
        joint_state.velocity.resize(JOINT_COUNT);
        joint_state.effort.resize(JOINT_COUNT);
        joint_state.name.resize(JOINT_COUNT);

        for(int i = 0; i < JOINT_COUNT; i++)
        {
            kortex_driver::ActuatorFeedback temp;
            
            temp.status_flags = res.output.actuators[i].status_flags;
            temp.jitter_comm = res.output.actuators[i].jitter_comm;
            temp.position = res.output.actuators[i].position;
            temp.velocity = res.output.actuators[i].velocity;
            temp.torque = res.output.actuators[i].torque;
            temp.current_motor = res.output.actuators[i].current_motor;
            temp.voltage = res.output.actuators[i].voltage;
            temp.temperature_motor = res.output.actuators[i].temperature_motor;
            temp.temperature_core = res.output.actuators[i].temperature_core;
            temp.fault_bank_a = res.output.actuators[i].fault_bank_a;
            temp.fault_bank_b = res.output.actuators[i].fault_bank_b;
            temp.warning_bank_a = res.output.actuators[i].warning_bank_a;
            temp.warning_bank_b = res.output.actuators[i].warning_bank_b;

            base_feedback.actuators.push_back(temp);

            joint_state.name[i] = "joint_" + std::to_string(i + 1);
            joint_state.position[i] =  TO_RAD(res.output.actuators[i].position);
            joint_state.velocity[i] = TO_RAD(res.output.actuators[i].velocity);
            joint_state.effort[i] = res.output.actuators[i].torque;
        }
        base_feedback.interconnect.position = res.output.interconnect.position;



        joint_state.header.stamp = ros::Time::now();
        joint_state.header.frame_id = std::to_string(res.output.frame_id);

        pub_base_feedback.publish(base_feedback);
        pub_joint_state.publish(joint_state);

        
        ros::spinOnce();
        
        

        rate.sleep();
    }

    return 1;
}
