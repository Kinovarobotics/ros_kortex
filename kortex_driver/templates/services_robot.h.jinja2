/*
* KINOVA (R) KORTEX (TM)
*
* Copyright (c) 2019 Kinova inc. All rights reserved.
*
* This software may be modified and distributed under the
* terms of the BSD 3-Clause license.
*
* Refer to the LICENSE file for details.
*
*/

/*
 * This file has been auto-generated and should not be modified.
 */
 
#ifndef _KORTEX_{{package.short_name|upper}}_ROBOT_SERVICES_H_
#define _KORTEX_{{package.short_name|upper}}_ROBOT_SERVICES_H_

#include "{{current_interface_header_filename}}"

#include <{{package.short_name}}.pb.h>
#include <{{package.short_name}}ClientRpc.h>

using namespace std;

class {{package.short_name}}RobotServices : public I{{package.short_name}}Services
{
    public:
        {{package.short_name}}RobotServices(ros::NodeHandle& node_handle, {{package.cpp_namespace}}::{{package.short_name}}Client* {{package.short_name|lower}}, uint32_t device_id, uint32_t timeout_ms);

        virtual bool SetDeviceID(kortex_driver::SetDeviceID::Request  &req, kortex_driver::SetDeviceID::Response &res) override;
        virtual bool SetApiOptions(kortex_driver::SetApiOptions::Request  &req, kortex_driver::SetApiOptions::Response &res) override;
{%- for method in package.methods %}
        virtual bool {{method.prepend_rpc_package_name}}{{method.prepend_on_notification}}{{method.name}}(kortex_driver::{{method.prepend_rpc_package_name}}{{method.prepend_on_notification}}{{method.name}}::Request  &req, kortex_driver::{{method.prepend_rpc_package_name}}{{method.prepend_on_notification}}{{method.name}}::Response &res) override;
{%- if method.is_notification_rpc %}
        virtual void cb_{{method.name}}({{method.notification_message_cpp_namespace}}::{{method.name|replace("Topic", "")}}Notification notif) override;
{%- endif %}
{%- endfor %}

private:
        uint32_t m_current_device_id;
        Kinova::Api::RouterClientSendOptions m_api_options;

        {{package.cpp_namespace}}::{{package.short_name}}Client* m_{{package.short_name|lower}};
};
#endif

