/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-03-09 16:01:38.348040
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((0.31436)*x1);
x13=((0.0003501)*x4);
x14=((0.0003501)*x6);
x15=((1.0)*x7);
x16=((0.167455)*x6);
x17=((0.167455)*x1);
x18=((0.167455)*x5);
x19=((0.0003501)*x0);
x20=((1.0)*x6);
x21=((1.0)*x0);
x22=((0.167455)*x0);
x23=((1.0)*x4);
x24=(x2*x6);
x25=(x0*x2);
x26=(x3*x4);
x27=(x2*x4);
x28=(x1*x2);
x29=(x10*x5);
x30=(x1*x3);
x31=(x20*x5);
x32=(x15*x6);
x33=(x23*x3);
x34=((1.0)*x30);
x35=(x20*x26);
x36=((((-1.0)*x33))+x28);
x37=(((x2*x23))+x34);
x38=(x36*x5);
x39=(((x0*x30))+((x25*x4)));
x40=((((-1.0)*x21*x26))+((x1*x25)));
x41=(((x30*x6))+((x24*x4)));
x42=(x21*(((((-1.0)*x30))+(((-1.0)*x27)))));
x43=(x20*(((((-1.0)*x30))+(((-1.0)*x27)))));
x44=(x39*x5);
x45=(((x0*x7))+((x41*x5)));
x46=(((x11*x38))+(((-1.0)*x10*x37)));
x47=(((x10*(((((-1.0)*x35))+((x1*x24))))))+((x11*x45)));
x48=(((x11*(((((-1.0)*x44))+(((1.0)*x32))))))+(((-1.0)*x10*x40)));
eerot[0]=(((x9*(((((-1.0)*x15*x42))+x31))))+((x48*x8)));
eerot[1]=(((x8*(((((-1.0)*x31))+((x42*x7))))))+((x48*x9)));
eerot[2]=(((x11*x40))+((x10*(((((-1.0)*x44))+x32)))));
eetrans[0]=(((x11*((((x17*x25))+(((-1.0)*x22*x26))))))+((x14*x5))+(((-0.31436)*x0*x26))+((x10*(((((-1.0)*x18*x39))+((x16*x7))))))+(((0.001)*x6))+((x7*((((x19*x30))+((x13*x25))))))+((x12*x25))+(((0.41)*x25)));
eerot[3]=(((x47*x8))+((x9*((((x0*x5))+((x43*x7)))))));
eerot[4]=(((x47*x9))+((x8*(((((-1.0)*x21*x5))+(((-1.0)*x15*x43)))))));
eerot[5]=(((x10*x45))+((x11*((x35+(((-1.0)*x20*x28)))))));
IkReal x49=((1.0)*x24);
eetrans[1]=(((x7*(((((-1.0)*x14*x30))+(((-1.0)*x13*x49))))))+((x19*x5))+((x11*(((((-1.0)*x16*x28))+((x16*x26))))))+(((-0.41)*x24))+((x10*((((x22*x7))+((x18*x41))))))+(((0.001)*x0))+(((-1.0)*x12*x49))+(((0.31436)*x26*x6)));
eerot[6]=(((x7*x9*(((((-1.0)*x28))+x33))))+((x46*x8)));
eerot[7]=(((x46*x9))+((x36*x7*x8)));
eerot[8]=(((x29*x36))+((x11*x37)));
eetrans[2]=((0.28481)+((x7*((((x13*x3))+(((-0.0003501)*x28))))))+(((0.41)*x3))+(((0.31436)*x27))+((x11*((((x17*x3))+(((0.167455)*x27))))))+((x29*(((((-0.167455)*x26))+((x17*x2))))))+((x12*x3)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=r01;
new_r02=((-1.0)*r02);
new_px=(px+(((-0.167455)*r02)));
new_r10=r10;
new_r11=((-1.0)*r11);
new_r12=r12;
new_py=((((-1.0)*py))+(((0.167455)*r12)));
new_r20=r20;
new_r21=((-1.0)*r21);
new_r22=r22;
new_pz=((0.28481)+(((-1.0)*pz))+(((0.167455)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x50=((1.0)*px);
IkReal x51=((1.0)*pz);
IkReal x52=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x52))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x51)));
rxp0_2=((((-1.0)*r10*x50))+((py*r00)));
rxp1_0=((((-1.0)*r21*x52))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x51)));
rxp1_2=((((-1.0)*r11*x50))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x52)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x51)));
rxp2_2=((((-1.0)*r12*x50))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x53=((0.000574164)*npx);
IkReal x54=((0.41)*pp);
IkReal x55=((0.2577752)*npz);
IkReal x56=((0.000287082)*npy);
IkReal x57=((0.001)*r02);
IkReal x58=((1.0)*rxp2_2);
IkReal x59=((0.0003501)*r20);
IkReal x60=((1.0311008)*npy);
IkReal x61=((0.5155504)*npx);
IkReal x62=((0.0007002)*r22);
IkReal x63=((2.0)*rxp0_2);
IkReal x64=((0.002)*r00);
IkReal x65=((0.002)*r10);
IkReal x66=((0.004)*r01);
IkReal x67=((4.0)*rxp1_2);
IkReal x68=((0.001)*r12);
IkReal x69=((0.0007002)*r21);
IkReal x70=((-0.001)*r12);
IkReal x71=((-0.0007002)*r21);
IkReal x72=((-0.5155504)*npx);
IkReal x73=((-0.004)*r11);
IkReal x74=((-0.002)*r10);
IkReal x75=((-0.0284042538102959)+x54);
IkReal x76=(rxp2_2+x57);
IkReal x77=(x59+x57);
IkReal x78=(x62+x63);
IkReal x79=(x55+x56);
IkReal x80=(x75+x55+(((-1.0)*x56)));
IkReal x81=(x75+x56+(((-1.0)*x55)));
IkReal x82=((((-1.0)*x79))+x75);
IkReal x83=(x75+x79);
op[0]=x83;
op[1]=x83;
op[2]=x53;
op[3]=x53;
op[4]=x80;
op[5]=x80;
op[6]=(x59+(((-1.0)*x58))+(((-1.0)*x57)));
op[7]=x70;
op[8]=x71;
op[9]=0;
op[10]=((((-1.0)*x77))+(((-1.0)*x58)));
op[11]=x70;
op[12]=x70;
op[13]=(x77+(((-1.0)*x58)));
op[14]=0;
op[15]=x71;
op[16]=x70;
op[17]=(x57+(((-1.0)*x58))+(((-1.0)*x59)));
op[18]=0;
op[19]=x83;
op[20]=0;
op[21]=x53;
op[22]=0;
op[23]=x80;
op[24]=x72;
op[25]=x72;
op[26]=x60;
op[27]=x60;
op[28]=x61;
op[29]=x61;
op[30]=(x78+x64);
op[31]=x65;
op[32]=((((-1.0)*x67))+(((-1.0)*x66)));
op[33]=x73;
op[34]=(x62+(((-1.0)*x63))+(((-1.0)*x64)));
op[35]=x74;
op[36]=x65;
op[37]=(x78+(((-1.0)*x64)));
op[38]=x73;
op[39]=(x66+(((-1.0)*x67)));
op[40]=x74;
op[41]=(x62+x64+(((-1.0)*x63)));
op[42]=0;
op[43]=x72;
op[44]=0;
op[45]=x60;
op[46]=0;
op[47]=x61;
op[48]=x81;
op[49]=x81;
op[50]=x53;
op[51]=x53;
op[52]=x82;
op[53]=x82;
op[54]=(x76+(((-1.0)*x59)));
op[55]=x68;
op[56]=x69;
op[57]=0;
op[58]=(x76+x59);
op[59]=x68;
op[60]=x68;
op[61]=((((-1.0)*x77))+rxp2_2);
op[62]=0;
op[63]=x69;
op[64]=x68;
op[65]=(rxp2_2+x59+(((-1.0)*x57)));
op[66]=0;
op[67]=x81;
op[68]=0;
op[69]=x53;
op[70]=0;
op[71]=x82;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x84=htj4*htj4;
CheckValue<IkReal> x85=IKPowWithIntegerCheck(((1.0)+x84),-1);
if(!x85.valid){
continue;
}
cj4array[numsolutions]=((x85.value)*(((1.0)+(((-1.0)*x84)))));
CheckValue<IkReal> x86=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x86.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x86.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x87=htj5*htj5;
CheckValue<IkReal> x88=IKPowWithIntegerCheck(((1.0)+x87),-1);
if(!x88.valid){
continue;
}
cj5array[numsolutions]=((x88.value)*(((1.0)+(((-1.0)*x87)))));
CheckValue<IkReal> x89=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x89.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x89.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x90=htj0*htj0;
CheckValue<IkReal> x91=IKPowWithIntegerCheck(((1.0)+x90),-1);
if(!x91.valid){
continue;
}
cj0array[numsolutions]=((x91.value)*(((1.0)+(((-1.0)*x90)))));
CheckValue<IkReal> x92=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x92.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x92.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x93=((1.0)*cj0);
IkReal x94=((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5)));
j3eval[0]=x94;
j3eval[1]=IKsign(x94);
j3eval[2]=((IKabs(((((-1.0)*cj4*r21*sj5*x93))+((cj0*cj4*cj5*r20))+((cj0*r22*sj4)))))+(IKabs(((((-1.0)*cj5*r21*x93))+(((-1.0)*r20*sj5*x93))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x95=((1.0)*sj5);
IkReal x96=(r20*sj0);
IkReal x97=((1.0)*r21*sj0);
IkReal x98=(((cj5*r10*sj4))+(((-1.0)*r11*sj4*x95))+(((-1.0)*cj4*r12)));
j3eval[0]=x98;
j3eval[1]=((IKabs(((((-1.0)*cj4*r21*sj0*x95))+((cj4*cj5*x96))+((r22*sj0*sj4)))))+(IKabs(((((-1.0)*x95*x96))+(((-1.0)*cj5*x97))))));
j3eval[2]=IKsign(x98);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x99=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)));
j3eval[0]=x99;
j3eval[1]=IKsign(x99);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x100=((1.0)*cj5);
IkReal x101=((1.0)*sj5);
IkReal x102=(((r21*sj4*sj5))+(((-1.0)*r20*sj4*x100))+((cj4*r22)));
j3eval[0]=x102;
j3eval[1]=((IKabs(((((-1.0)*cj4*r01*x101))+((r02*sj4))+((cj4*cj5*r00)))))+(IKabs(((((-1.0)*r01*x100))+(((-1.0)*r00*x101))))));
j3eval[2]=IKsign(x102);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x103=((1.0)*sj5);
IkReal x104=((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*x103)));
j3eval[0]=x104;
j3eval[1]=((IKabs(((((-1.0)*cj4*r21*x103))+((r22*sj4))+((cj4*cj5*r20)))))+(IKabs(((((-1.0)*r20*x103))+(((-1.0)*cj5*r21))))));
j3eval[2]=IKsign(x104);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x105=cj4*cj4;
IkReal x106=cj5*cj5;
IkReal x107=r10*r10;
IkReal x108=r11*r11;
IkReal x109=r12*r12;
IkReal x110=(r11*sj5);
IkReal x111=((1.0)*r10);
IkReal x112=(r12*sj4);
IkReal x113=((1.0)*x107);
IkReal x114=((2.0)*cj5*r10);
IkReal x115=(x106*x108);
IkReal x116=(((x106*x107))+(((-1.0)*x105*x108))+(((2.0)*cj4*x110*x112))+(((-1.0)*x113))+(((-1.0)*x110*x114))+((x105*x110*x114))+((x105*x109))+((x105*x115))+(((-1.0)*cj4*x112*x114))+(((-1.0)*x115))+(((-1.0)*x109))+(((-1.0)*x105*x106*x113)));
j3eval[0]=x116;
j3eval[1]=IKsign(x116);
j3eval[2]=((IKabs(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x111)))))+(IKabs(((((-1.0)*cj4*cj5*x111))+((cj4*x110))+(((-1.0)*x112))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x117=cj4*cj4;
IkReal x118=cj5*cj5;
IkReal x119=r10*r10;
IkReal x120=r11*r11;
IkReal x121=r12*r12;
IkReal x122=(r11*sj5);
IkReal x123=((1.0)*cj5);
IkReal x124=(r12*sj4);
IkReal x125=((1.0)*x119);
IkReal x126=((2.0)*cj5*r10);
IkReal x127=(x118*x120);
CheckValue<IkReal> x128 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r10*x123))+(((-1.0)*x124))+((cj4*x122)))),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x123)))),IKFAST_ATAN2_MAGTHRESH);
if(!x128.valid){
continue;
}
CheckValue<IkReal> x129=IKPowWithIntegerCheck(IKsign((((x117*x127))+((x117*x121))+(((-1.0)*x117*x118*x125))+(((-1.0)*x117*x120))+(((-1.0)*cj4*x124*x126))+(((-1.0)*x125))+((x117*x122*x126))+(((2.0)*cj4*x122*x124))+((x118*x119))+(((-1.0)*x127))+(((-1.0)*x121))+(((-1.0)*x122*x126)))),-1);
if(!x129.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x128.value)+(((1.5707963267949)*(x129.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x130=IKsin(j3);
IkReal x131=IKcos(j3);
IkReal x132=(r10*sj5);
IkReal x133=(cj4*sj5);
IkReal x134=(cj5*r11);
IkReal x135=(cj4*cj5);
IkReal x136=(r12*sj4);
IkReal x137=((1.0)*x131);
IkReal x138=((1.0)*x130);
evalcond[0]=(((r11*x131*x133))+(((-1.0)*x136*x137))+((x130*x134))+((x130*x132))+(((-1.0)*r10*x135*x137)));
evalcond[1]=((((-1.0)*r22*sj4*x138))+((r21*x130*x133))+(((-1.0)*r20*sj5*x137))+(((-1.0)*cj5*r21*x137))+(((-1.0)*r20*x135*x138)));
evalcond[2]=((((-1.0)*r00*sj5*x137))+(((-1.0)*r00*x135*x138))+(((-1.0)*r02*sj4*x138))+(((-1.0)*cj5*r01*x137))+((r01*x130*x133)));
evalcond[3]=((1.0)+(((-1.0)*x134*x137))+((r11*x130*x133))+(((-1.0)*x136*x138))+(((-1.0)*x132*x137))+(((-1.0)*r10*x135*x138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x139=((0.00085390243902439)*cj5);
IkReal x140=((0.00085390243902439)*sj5);
IkReal x141=((0.766731707317073)*cj4);
IkReal x142=((0.766731707317073)*sj4*sj5);
IkReal x143=((0.766731707317073)*cj5*sj4);
if( IKabs((((r01*x142))+((r00*x140))+((r01*x139))+(((-1.0)*r00*x143))+((r02*x141))+(((2.4390243902439)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-1.0)*r21*x139))+((r20*x143))+(((-1.0)*r21*x142))+(((-1.0)*r20*x140))+(((-1.0)*r22*x141)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x142))+((r00*x140))+((r01*x139))+(((-1.0)*r00*x143))+((r02*x141))+(((2.4390243902439)*px))))+IKsqr(((((-2.4390243902439)*pz))+(((-1.0)*r21*x139))+((r20*x143))+(((-1.0)*r21*x142))+(((-1.0)*r20*x140))+(((-1.0)*r22*x141))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x142))+((r00*x140))+((r01*x139))+(((-1.0)*r00*x143))+((r02*x141))+(((2.4390243902439)*px))), ((((-2.4390243902439)*pz))+(((-1.0)*r21*x139))+((r20*x143))+(((-1.0)*r21*x142))+(((-1.0)*r20*x140))+(((-1.0)*r22*x141))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x144=((1.0)*px);
IkReal x145=((0.31436)*cj4);
IkReal x146=(cj5*r21);
IkReal x147=(cj3*sj5);
IkReal x148=(r20*sj5);
IkReal x149=((0.31436)*sj3);
IkReal x150=(r00*sj5);
IkReal x151=(cj5*r00);
IkReal x152=((0.31436)*sj4);
IkReal x153=(cj5*r20);
IkReal x154=(cj5*r01);
IkReal x155=((0.41)*(IKsin(j1)));
IkReal x156=((0.0003501)*x150);
IkReal x157=((0.0003501)*x154);
IkReal x158=((0.41)*(IKcos(j1)));
IkReal x159=((0.0003501)*x146);
IkReal x160=((0.0003501)*x148);
IkReal x161=(cj3*x152);
IkReal x162=(x157+x156+x144);
IkReal x163=(x160+x159+x158);
evalcond[0]=(x163+(((-1.0)*x152*x153))+pz+((r21*sj5*x152))+((r22*x145)));
evalcond[1]=((((-1.0)*x162))+(((-1.0)*r01*sj5*x152))+(((-1.0)*r02*x145))+((x151*x152))+x155);
evalcond[2]=(((r22*x161))+(((-1.0)*x162))+((cj3*x145*x153))+x155+(((-1.0)*x148*x149))+(((-1.0)*r21*x145*x147))+(((-1.0)*x146*x149)));
evalcond[3]=(((x149*x150))+((x149*x154))+(((-1.0)*x163))+(((-1.0)*r02*x161))+((r01*x145*x147))+(((-1.0)*pz))+(((-1.0)*cj3*x145*x151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x164=(cj1*sj4);
IkReal x165=(r21*sj5);
IkReal x166=((1.0)*cj5);
IkReal x167=(r01*sj5);
IkReal x168=(sj1*sj4);
IkReal x169=(cj4*r22);
IkReal x170=(cj4*r02);
if( IKabs((((sj1*x169))+(((-1.0)*r20*x166*x168))+((x164*x167))+(((-1.0)*r00*x164*x166))+((cj1*x170))+((x165*x168)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x170))+(((-1.0)*r20*x164*x166))+((x164*x165))+(((-1.0)*x167*x168))+((cj5*r00*x168))+((cj1*x169)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x169))+(((-1.0)*r20*x166*x168))+((x164*x167))+(((-1.0)*r00*x164*x166))+((cj1*x170))+((x165*x168))))+IKsqr(((((-1.0)*sj1*x170))+(((-1.0)*r20*x164*x166))+((x164*x165))+(((-1.0)*x167*x168))+((cj5*r00*x168))+((cj1*x169))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x169))+(((-1.0)*r20*x166*x168))+((x164*x167))+(((-1.0)*r00*x164*x166))+((cj1*x170))+((x165*x168))), ((((-1.0)*sj1*x170))+(((-1.0)*r20*x164*x166))+((x164*x165))+(((-1.0)*x167*x168))+((cj5*r00*x168))+((cj1*x169))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x171=IKsin(j2);
IkReal x172=IKcos(j2);
IkReal x173=((1.0)*cj3);
IkReal x174=((0.0003501)*cj5);
IkReal x175=(cj5*r00);
IkReal x176=(r00*sj5);
IkReal x177=(cj5*sj3);
IkReal x178=(cj5*r20);
IkReal x179=(r20*sj5);
IkReal x180=((1.0)*cj4);
IkReal x181=(cj1*x172);
IkReal x182=(sj1*x171);
IkReal x183=(sj1*x172);
IkReal x184=(cj3*cj4*sj5);
IkReal x185=((1.0)*sj4*sj5);
IkReal x186=(cj1*x171);
IkReal x187=(x181+x182);
evalcond[0]=((((-1.0)*r22*x180))+((sj4*x178))+x187+(((-1.0)*r21*x185)));
evalcond[1]=((((-1.0)*r01*x185))+(((-1.0)*r02*x180))+(((-1.0)*x183))+((sj4*x175))+x186);
evalcond[2]=((((-0.31436)*x182))+(((-0.31436)*x181))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-1.0)*r21*x174))+(((-0.0003501)*x179)));
evalcond[3]=((((-0.31436)*x186))+(((0.41)*sj1))+(((-1.0)*r01*x174))+(((-1.0)*px))+(((0.31436)*x183))+(((-0.0003501)*x176)));
evalcond[4]=(((r01*x184))+((r01*x177))+(((-1.0)*r02*sj4*x173))+x187+(((-1.0)*cj4*x173*x175))+((sj3*x176)));
evalcond[5]=((((-1.0)*x186))+x183+((r21*x177))+((r21*x184))+(((-1.0)*r22*sj4*x173))+(((-1.0)*cj4*x173*x178))+((sj3*x179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x188=((1.0)*sj5);
CheckValue<IkReal> x189 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x188)))),IkReal(((((-1.0)*cj4*r21*x188))+((r22*sj4))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x189.valid){
continue;
}
CheckValue<IkReal> x190=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*x188)))),-1);
if(!x190.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x189.value)+(((1.5707963267949)*(x190.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x191=IKsin(j3);
IkReal x192=IKcos(j3);
IkReal x193=(r10*sj5);
IkReal x194=(cj4*sj5);
IkReal x195=(cj5*r11);
IkReal x196=(cj4*cj5);
IkReal x197=(r12*sj4);
IkReal x198=((1.0)*x192);
IkReal x199=((1.0)*x191);
evalcond[0]=(((r11*x192*x194))+(((-1.0)*x197*x198))+(((-1.0)*r10*x196*x198))+((x191*x193))+((x191*x195)));
evalcond[1]=((((-1.0)*r22*sj4*x199))+(((-1.0)*cj5*r21*x198))+(((-1.0)*r20*x196*x199))+((r21*x191*x194))+(((-1.0)*r20*sj5*x198)));
evalcond[2]=((((-1.0)*r02*sj4*x199))+((r01*x191*x194))+(((-1.0)*r00*x196*x199))+(((-1.0)*r00*sj5*x198))+(((-1.0)*cj5*r01*x198)));
evalcond[3]=((1.0)+(((-1.0)*x195*x198))+((r11*x191*x194))+(((-1.0)*x197*x199))+(((-1.0)*r10*x196*x199))+(((-1.0)*x193*x198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x200=((0.00085390243902439)*cj5);
IkReal x201=((0.00085390243902439)*sj5);
IkReal x202=((0.766731707317073)*cj4);
IkReal x203=((0.766731707317073)*sj4*sj5);
IkReal x204=((0.766731707317073)*cj5*sj4);
if( IKabs((((r01*x200))+((r01*x203))+((r00*x201))+(((-1.0)*r00*x204))+(((2.4390243902439)*px))+((r02*x202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x202))+(((-2.4390243902439)*pz))+(((-1.0)*r21*x203))+(((-1.0)*r21*x200))+(((-1.0)*r20*x201))+((r20*x204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x200))+((r01*x203))+((r00*x201))+(((-1.0)*r00*x204))+(((2.4390243902439)*px))+((r02*x202))))+IKsqr(((((-1.0)*r22*x202))+(((-2.4390243902439)*pz))+(((-1.0)*r21*x203))+(((-1.0)*r21*x200))+(((-1.0)*r20*x201))+((r20*x204))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x200))+((r01*x203))+((r00*x201))+(((-1.0)*r00*x204))+(((2.4390243902439)*px))+((r02*x202))), ((((-1.0)*r22*x202))+(((-2.4390243902439)*pz))+(((-1.0)*r21*x203))+(((-1.0)*r21*x200))+(((-1.0)*r20*x201))+((r20*x204))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x205=((1.0)*px);
IkReal x206=((0.31436)*cj4);
IkReal x207=(cj5*r21);
IkReal x208=(cj3*sj5);
IkReal x209=(r20*sj5);
IkReal x210=((0.31436)*sj3);
IkReal x211=(r00*sj5);
IkReal x212=(cj5*r00);
IkReal x213=((0.31436)*sj4);
IkReal x214=(cj5*r20);
IkReal x215=(cj5*r01);
IkReal x216=((0.41)*(IKsin(j1)));
IkReal x217=((0.0003501)*x211);
IkReal x218=((0.0003501)*x215);
IkReal x219=((0.41)*(IKcos(j1)));
IkReal x220=((0.0003501)*x207);
IkReal x221=((0.0003501)*x209);
IkReal x222=(cj3*x213);
IkReal x223=(x217+x218+x205);
IkReal x224=(x219+x221+x220);
evalcond[0]=(((r22*x206))+((r21*sj5*x213))+x224+pz+(((-1.0)*x213*x214)));
evalcond[1]=((((-1.0)*r02*x206))+(((-1.0)*r01*sj5*x213))+x216+((x212*x213))+(((-1.0)*x223)));
evalcond[2]=(((cj3*x206*x214))+(((-1.0)*r21*x206*x208))+(((-1.0)*x207*x210))+x216+((r22*x222))+(((-1.0)*x209*x210))+(((-1.0)*x223)));
evalcond[3]=(((x210*x211))+((x210*x215))+(((-1.0)*r02*x222))+(((-1.0)*cj3*x206*x212))+(((-1.0)*pz))+((r01*x206*x208))+(((-1.0)*x224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x225=(cj1*sj4);
IkReal x226=(r21*sj5);
IkReal x227=((1.0)*cj5);
IkReal x228=(r01*sj5);
IkReal x229=(sj1*sj4);
IkReal x230=(cj4*r22);
IkReal x231=(cj4*r02);
if( IKabs((((cj1*x231))+((sj1*x230))+((x225*x228))+(((-1.0)*r00*x225*x227))+(((-1.0)*r20*x227*x229))+((x226*x229)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x230))+((x225*x226))+(((-1.0)*x228*x229))+(((-1.0)*sj1*x231))+((cj5*r00*x229))+(((-1.0)*r20*x225*x227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x231))+((sj1*x230))+((x225*x228))+(((-1.0)*r00*x225*x227))+(((-1.0)*r20*x227*x229))+((x226*x229))))+IKsqr((((cj1*x230))+((x225*x226))+(((-1.0)*x228*x229))+(((-1.0)*sj1*x231))+((cj5*r00*x229))+(((-1.0)*r20*x225*x227))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x231))+((sj1*x230))+((x225*x228))+(((-1.0)*r00*x225*x227))+(((-1.0)*r20*x227*x229))+((x226*x229))), (((cj1*x230))+((x225*x226))+(((-1.0)*x228*x229))+(((-1.0)*sj1*x231))+((cj5*r00*x229))+(((-1.0)*r20*x225*x227))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x232=IKsin(j2);
IkReal x233=IKcos(j2);
IkReal x234=((1.0)*cj3);
IkReal x235=((0.0003501)*cj5);
IkReal x236=(cj5*r00);
IkReal x237=(r00*sj5);
IkReal x238=(cj5*sj3);
IkReal x239=(cj5*r20);
IkReal x240=(r20*sj5);
IkReal x241=((1.0)*cj4);
IkReal x242=(cj1*x233);
IkReal x243=(sj1*x232);
IkReal x244=(sj1*x233);
IkReal x245=(cj3*cj4*sj5);
IkReal x246=((1.0)*sj4*sj5);
IkReal x247=(cj1*x232);
IkReal x248=(x243+x242);
evalcond[0]=(x248+((sj4*x239))+(((-1.0)*r22*x241))+(((-1.0)*r21*x246)));
evalcond[1]=((((-1.0)*x244))+(((-1.0)*r01*x246))+x247+((sj4*x236))+(((-1.0)*r02*x241)));
evalcond[2]=((((-0.0003501)*x240))+(((-1.0)*pz))+(((-1.0)*r21*x235))+(((-0.41)*cj1))+(((-0.31436)*x243))+(((-0.31436)*x242)));
evalcond[3]=((((0.41)*sj1))+(((-1.0)*px))+(((-0.0003501)*x237))+(((0.31436)*x244))+(((-1.0)*r01*x235))+(((-0.31436)*x247)));
evalcond[4]=((((-1.0)*cj4*x234*x236))+x248+((r01*x238))+((r01*x245))+(((-1.0)*r02*sj4*x234))+((sj3*x237)));
evalcond[5]=((((-1.0)*cj4*x234*x239))+(((-1.0)*x247))+((sj3*x240))+x244+((r21*x245))+((r21*x238))+(((-1.0)*r22*sj4*x234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x249=((1.0)*r01);
CheckValue<IkReal> x250=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)))),-1);
if(!x250.valid){
continue;
}
CheckValue<IkReal> x251 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x249))+(((-1.0)*r00*sj5)))),IkReal((((r02*sj4))+(((-1.0)*cj4*sj5*x249))+((cj4*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x251.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x250.value)))+(x251.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x252=IKsin(j3);
IkReal x253=IKcos(j3);
IkReal x254=(r10*sj5);
IkReal x255=(cj4*sj5);
IkReal x256=(cj5*r11);
IkReal x257=(cj4*cj5);
IkReal x258=(r12*sj4);
IkReal x259=((1.0)*x253);
IkReal x260=((1.0)*x252);
evalcond[0]=(((r11*x253*x255))+((x252*x256))+((x252*x254))+(((-1.0)*r10*x257*x259))+(((-1.0)*x258*x259)));
evalcond[1]=((((-1.0)*r22*sj4*x260))+(((-1.0)*r20*sj5*x259))+((r21*x252*x255))+(((-1.0)*cj5*r21*x259))+(((-1.0)*r20*x257*x260)));
evalcond[2]=((((-1.0)*r00*x257*x260))+(((-1.0)*r00*sj5*x259))+(((-1.0)*r02*sj4*x260))+((r01*x252*x255))+(((-1.0)*cj5*r01*x259)));
evalcond[3]=((1.0)+(((-1.0)*r10*x257*x260))+(((-1.0)*x258*x260))+(((-1.0)*x256*x259))+((r11*x252*x255))+(((-1.0)*x254*x259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x261=((0.00085390243902439)*cj5);
IkReal x262=((0.00085390243902439)*sj5);
IkReal x263=((0.766731707317073)*cj4);
IkReal x264=((0.766731707317073)*sj4*sj5);
IkReal x265=((0.766731707317073)*cj5*sj4);
if( IKabs((((r02*x263))+(((-1.0)*r00*x265))+((r00*x262))+((r01*x261))+((r01*x264))+(((2.4390243902439)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-1.0)*r22*x263))+(((-1.0)*r20*x262))+(((-1.0)*r21*x261))+(((-1.0)*r21*x264))+((r20*x265)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x263))+(((-1.0)*r00*x265))+((r00*x262))+((r01*x261))+((r01*x264))+(((2.4390243902439)*px))))+IKsqr(((((-2.4390243902439)*pz))+(((-1.0)*r22*x263))+(((-1.0)*r20*x262))+(((-1.0)*r21*x261))+(((-1.0)*r21*x264))+((r20*x265))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r02*x263))+(((-1.0)*r00*x265))+((r00*x262))+((r01*x261))+((r01*x264))+(((2.4390243902439)*px))), ((((-2.4390243902439)*pz))+(((-1.0)*r22*x263))+(((-1.0)*r20*x262))+(((-1.0)*r21*x261))+(((-1.0)*r21*x264))+((r20*x265))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x266=((1.0)*px);
IkReal x267=((0.31436)*cj4);
IkReal x268=(cj5*r21);
IkReal x269=(cj3*sj5);
IkReal x270=(r20*sj5);
IkReal x271=((0.31436)*sj3);
IkReal x272=(r00*sj5);
IkReal x273=(cj5*r00);
IkReal x274=((0.31436)*sj4);
IkReal x275=(cj5*r20);
IkReal x276=(cj5*r01);
IkReal x277=((0.41)*(IKsin(j1)));
IkReal x278=((0.0003501)*x272);
IkReal x279=((0.0003501)*x276);
IkReal x280=((0.41)*(IKcos(j1)));
IkReal x281=((0.0003501)*x268);
IkReal x282=((0.0003501)*x270);
IkReal x283=(cj3*x274);
IkReal x284=(x266+x278+x279);
IkReal x285=(x282+x281+x280);
evalcond[0]=((((-1.0)*x274*x275))+((r22*x267))+((r21*sj5*x274))+x285+pz);
evalcond[1]=(((x273*x274))+x277+(((-1.0)*r02*x267))+(((-1.0)*r01*sj5*x274))+(((-1.0)*x284)));
evalcond[2]=((((-1.0)*r21*x267*x269))+((r22*x283))+((cj3*x267*x275))+x277+(((-1.0)*x268*x271))+(((-1.0)*x284))+(((-1.0)*x270*x271)));
evalcond[3]=((((-1.0)*r02*x283))+((x271*x276))+((x271*x272))+(((-1.0)*cj3*x267*x273))+((r01*x267*x269))+(((-1.0)*pz))+(((-1.0)*x285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x286=(cj1*sj4);
IkReal x287=(r21*sj5);
IkReal x288=((1.0)*cj5);
IkReal x289=(r01*sj5);
IkReal x290=(sj1*sj4);
IkReal x291=(cj4*r22);
IkReal x292=(cj4*r02);
if( IKabs(((((-1.0)*r20*x288*x290))+((x286*x289))+((cj1*x292))+((sj1*x291))+((x287*x290))+(((-1.0)*r00*x286*x288)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x286*x287))+(((-1.0)*r20*x286*x288))+(((-1.0)*sj1*x292))+(((-1.0)*x289*x290))+((cj1*x291))+((cj5*r00*x290)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x288*x290))+((x286*x289))+((cj1*x292))+((sj1*x291))+((x287*x290))+(((-1.0)*r00*x286*x288))))+IKsqr((((x286*x287))+(((-1.0)*r20*x286*x288))+(((-1.0)*sj1*x292))+(((-1.0)*x289*x290))+((cj1*x291))+((cj5*r00*x290))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x288*x290))+((x286*x289))+((cj1*x292))+((sj1*x291))+((x287*x290))+(((-1.0)*r00*x286*x288))), (((x286*x287))+(((-1.0)*r20*x286*x288))+(((-1.0)*sj1*x292))+(((-1.0)*x289*x290))+((cj1*x291))+((cj5*r00*x290))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x293=IKsin(j2);
IkReal x294=IKcos(j2);
IkReal x295=((1.0)*cj3);
IkReal x296=((0.0003501)*cj5);
IkReal x297=(cj5*r00);
IkReal x298=(r00*sj5);
IkReal x299=(cj5*sj3);
IkReal x300=(cj5*r20);
IkReal x301=(r20*sj5);
IkReal x302=((1.0)*cj4);
IkReal x303=(cj1*x294);
IkReal x304=(sj1*x293);
IkReal x305=(sj1*x294);
IkReal x306=(cj3*cj4*sj5);
IkReal x307=((1.0)*sj4*sj5);
IkReal x308=(cj1*x293);
IkReal x309=(x304+x303);
evalcond[0]=((((-1.0)*r22*x302))+(((-1.0)*r21*x307))+x309+((sj4*x300)));
evalcond[1]=((((-1.0)*r01*x307))+(((-1.0)*x305))+((sj4*x297))+(((-1.0)*r02*x302))+x308);
evalcond[2]=((((-1.0)*pz))+(((-1.0)*r21*x296))+(((-0.41)*cj1))+(((-0.0003501)*x301))+(((-0.31436)*x304))+(((-0.31436)*x303)));
evalcond[3]=((((0.31436)*x305))+(((0.41)*sj1))+(((-1.0)*px))+(((-0.31436)*x308))+(((-0.0003501)*x298))+(((-1.0)*r01*x296)));
evalcond[4]=(x309+(((-1.0)*cj4*x295*x297))+((r01*x299))+(((-1.0)*r02*sj4*x295))+((r01*x306))+((sj3*x298)));
evalcond[5]=((((-1.0)*r22*sj4*x295))+((r21*x306))+((sj3*x301))+(((-1.0)*x308))+x305+(((-1.0)*cj4*x295*x300))+((r21*x299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x310=((1.0)*sj5);
IkReal x311=((1.0)*cj5);
IkReal x312=((((-1.0)*r00*sj4*x311))+((r01*sj4*sj5))+((cj4*r02)));
j3eval[0]=x312;
j3eval[1]=IKsign(x312);
j3eval[2]=((IKabs(((((-1.0)*r21*x311))+(((-1.0)*r20*x310)))))+(IKabs((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x310))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x313=((1.0)*r01);
IkReal x314=((1.0)*sj5);
IkReal x315=(((cj5*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x314)));
j3eval[0]=x315;
j3eval[1]=((IKabs(((((-1.0)*r00*x314))+(((-1.0)*cj5*x313)))))+(IKabs(((((-1.0)*cj4*sj5*x313))+((r02*sj4))+((cj4*cj5*r00))))));
j3eval[2]=IKsign(x315);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x316=cj4*cj4;
IkReal x317=r10*r10;
IkReal x318=cj5*cj5;
IkReal x319=r11*r11;
IkReal x320=r12*r12;
IkReal x321=(r11*sj5);
IkReal x322=((1.0)*r10);
IkReal x323=(r12*sj4);
IkReal x324=((1.0)*x316);
IkReal x325=((2.0)*cj5*r10);
IkReal x326=(x318*x319);
IkReal x327=(x317*x318);
IkReal x328=(((cj4*x323*x325))+(((-1.0)*x327))+(((-2.0)*cj4*x321*x323))+(((-1.0)*x320*x324))+x326+x320+x317+((x316*x327))+(((-1.0)*x324*x326))+((x321*x325))+(((-1.0)*x316*x321*x325))+((x316*x319)));
j3eval[0]=x328;
j3eval[1]=IKsign(x328);
j3eval[2]=((IKabs(((((-1.0)*cj4*cj5*x322))+(((-1.0)*x323))+((cj4*x321)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x322))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x329=cj4*cj4;
IkReal x330=r10*r10;
IkReal x331=cj5*cj5;
IkReal x332=r11*r11;
IkReal x333=r12*r12;
IkReal x334=(r11*sj5);
IkReal x335=((1.0)*cj5);
IkReal x336=(r12*sj4);
IkReal x337=((1.0)*x329);
IkReal x338=((2.0)*cj5*r10);
IkReal x339=(x331*x332);
IkReal x340=(x330*x331);
CheckValue<IkReal> x341=IKPowWithIntegerCheck(IKsign(((((-1.0)*x337*x339))+((x334*x338))+((cj4*x336*x338))+(((-1.0)*x333*x337))+((x329*x340))+(((-2.0)*cj4*x334*x336))+x339+x333+x330+((x329*x332))+(((-1.0)*x329*x334*x338))+(((-1.0)*x340)))),-1);
if(!x341.valid){
continue;
}
CheckValue<IkReal> x342 = IKatan2WithCheck(IkReal(((((-1.0)*x336))+((cj4*x334))+(((-1.0)*cj4*r10*x335)))),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x342.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x341.value)))+(x342.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x343=IKsin(j3);
IkReal x344=IKcos(j3);
IkReal x345=(r10*sj5);
IkReal x346=(cj4*sj5);
IkReal x347=(cj5*r11);
IkReal x348=(cj4*cj5);
IkReal x349=(r12*sj4);
IkReal x350=((1.0)*x344);
IkReal x351=((1.0)*x343);
evalcond[0]=((((-1.0)*r10*x348*x350))+(((-1.0)*x349*x350))+((r11*x344*x346))+((x343*x345))+((x343*x347)));
evalcond[1]=((((-1.0)*cj5*r21*x350))+(((-1.0)*r20*x348*x351))+((r21*x343*x346))+(((-1.0)*r20*sj5*x350))+(((-1.0)*r22*sj4*x351)));
evalcond[2]=(((r01*x343*x346))+(((-1.0)*r02*sj4*x351))+(((-1.0)*r00*x348*x351))+(((-1.0)*r00*sj5*x350))+(((-1.0)*cj5*r01*x350)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x348*x351))+(((-1.0)*x345*x350))+(((-1.0)*x349*x351))+((r11*x343*x346))+(((-1.0)*x347*x350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x352=((0.00085390243902439)*cj5);
IkReal x353=((0.00085390243902439)*sj5);
IkReal x354=((0.766731707317073)*cj4);
IkReal x355=((0.766731707317073)*sj4*sj5);
IkReal x356=((0.766731707317073)*cj5*sj4);
if( IKabs(((((-2.4390243902439)*px))+((r00*x356))+(((-1.0)*r01*x352))+(((-1.0)*r01*x355))+(((-1.0)*r00*x353))+(((-1.0)*r02*x354)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-1.0)*r22*x354))+(((-1.0)*r21*x352))+(((-1.0)*r21*x355))+(((-1.0)*r20*x353))+((r20*x356)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.4390243902439)*px))+((r00*x356))+(((-1.0)*r01*x352))+(((-1.0)*r01*x355))+(((-1.0)*r00*x353))+(((-1.0)*r02*x354))))+IKsqr(((((-2.4390243902439)*pz))+(((-1.0)*r22*x354))+(((-1.0)*r21*x352))+(((-1.0)*r21*x355))+(((-1.0)*r20*x353))+((r20*x356))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.4390243902439)*px))+((r00*x356))+(((-1.0)*r01*x352))+(((-1.0)*r01*x355))+(((-1.0)*r00*x353))+(((-1.0)*r02*x354))), ((((-2.4390243902439)*pz))+(((-1.0)*r22*x354))+(((-1.0)*r21*x352))+(((-1.0)*r21*x355))+(((-1.0)*r20*x353))+((r20*x356))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x357=((0.31436)*cj4);
IkReal x358=(cj5*r21);
IkReal x359=(cj3*sj5);
IkReal x360=(r20*sj5);
IkReal x361=((0.31436)*sj3);
IkReal x362=(r00*sj5);
IkReal x363=(cj5*r00);
IkReal x364=((0.31436)*sj4);
IkReal x365=(cj5*r20);
IkReal x366=(cj5*r01);
IkReal x367=((0.41)*(IKcos(j1)));
IkReal x368=((0.0003501)*x358);
IkReal x369=((0.0003501)*x360);
IkReal x370=((0.41)*(IKsin(j1)));
IkReal x371=((0.0003501)*x362);
IkReal x372=((0.0003501)*x366);
IkReal x373=(cj3*x364);
IkReal x374=(x372+x371+x370);
IkReal x375=(x368+x369+x367+pz);
evalcond[0]=((((-1.0)*x363*x364))+((r01*sj5*x364))+x374+px+((r02*x357)));
evalcond[1]=(x375+((r22*x357))+(((-1.0)*x364*x365))+((r21*sj5*x364)));
evalcond[2]=(((x361*x362))+((x361*x366))+((r01*x357*x359))+(((-1.0)*r02*x373))+x375+(((-1.0)*cj3*x357*x363)));
evalcond[3]=(((x358*x361))+(((-1.0)*x374))+((r21*x357*x359))+(((-1.0)*px))+(((-1.0)*cj3*x357*x365))+((x360*x361))+(((-1.0)*r22*x373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x376=(sj4*sj5);
IkReal x377=(cj4*sj1);
IkReal x378=((1.0)*cj1);
IkReal x379=(cj5*sj4);
IkReal x380=((1.0)*sj1);
if( IKabs((((r21*sj1*x376))+(((-1.0)*cj4*r02*x378))+((cj1*r00*x379))+((r22*x377))+(((-1.0)*r01*x376*x378))+(((-1.0)*r20*x379*x380)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((r02*x377))+(((-1.0)*r00*x379*x380))+((cj1*r21*x376))+(((-1.0)*r20*x378*x379))+((r01*sj1*x376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x376))+(((-1.0)*cj4*r02*x378))+((cj1*r00*x379))+((r22*x377))+(((-1.0)*r01*x376*x378))+(((-1.0)*r20*x379*x380))))+IKsqr((((cj1*cj4*r22))+((r02*x377))+(((-1.0)*r00*x379*x380))+((cj1*r21*x376))+(((-1.0)*r20*x378*x379))+((r01*sj1*x376))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x376))+(((-1.0)*cj4*r02*x378))+((cj1*r00*x379))+((r22*x377))+(((-1.0)*r01*x376*x378))+(((-1.0)*r20*x379*x380))), (((cj1*cj4*r22))+((r02*x377))+(((-1.0)*r00*x379*x380))+((cj1*r21*x376))+(((-1.0)*r20*x378*x379))+((r01*sj1*x376))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x381=IKcos(j2);
IkReal x382=IKsin(j2);
IkReal x383=((0.31436)*sj1);
IkReal x384=((1.0)*cj3);
IkReal x385=((0.0003501)*cj5);
IkReal x386=(cj5*r00);
IkReal x387=(r00*sj5);
IkReal x388=(cj5*sj3);
IkReal x389=(cj5*r20);
IkReal x390=(r20*sj5);
IkReal x391=((1.0)*cj4);
IkReal x392=(sj1*x381);
IkReal x393=(cj1*x381);
IkReal x394=(cj3*cj4*sj5);
IkReal x395=((1.0)*sj4*sj5);
IkReal x396=(cj1*x382);
IkReal x397=(sj1*x382);
IkReal x398=((1.0)*x396);
evalcond[0]=((((-1.0)*r21*x395))+x397+x393+((sj4*x389))+(((-1.0)*r22*x391)));
evalcond[1]=((((-1.0)*x398))+(((-1.0)*r02*x391))+(((-1.0)*r01*x395))+x392+((sj4*x386)));
evalcond[2]=((((-0.31436)*x393))+(((-0.0003501)*x390))+(((-1.0)*pz))+(((-1.0)*r21*x385))+(((-0.41)*cj1))+(((-1.0)*x382*x383)));
evalcond[3]=((((-1.0)*x381*x383))+(((-0.41)*sj1))+(((-1.0)*px))+(((0.31436)*x396))+(((-1.0)*r01*x385))+(((-0.0003501)*x387)));
evalcond[4]=((((-1.0)*r22*sj4*x384))+(((-1.0)*x398))+((r21*x388))+x392+((sj3*x390))+(((-1.0)*cj4*x384*x389))+((r21*x394)));
evalcond[5]=((((-1.0)*x393))+(((-1.0)*x397))+((r01*x394))+(((-1.0)*r02*sj4*x384))+(((-1.0)*cj4*x384*x386))+((sj3*x387))+((r01*x388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x399=((1.0)*r01);
IkReal x400=((1.0)*sj5);
CheckValue<IkReal> x401=IKPowWithIntegerCheck(IKsign((((cj5*r20*sj4))+(((-1.0)*r21*sj4*x400))+(((-1.0)*cj4*r22)))),-1);
if(!x401.valid){
continue;
}
CheckValue<IkReal> x402 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x399))+(((-1.0)*r00*x400)))),IkReal(((((-1.0)*cj4*sj5*x399))+((r02*sj4))+((cj4*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x402.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x401.value)))+(x402.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x403=IKsin(j3);
IkReal x404=IKcos(j3);
IkReal x405=(r10*sj5);
IkReal x406=(cj4*sj5);
IkReal x407=(cj5*r11);
IkReal x408=(cj4*cj5);
IkReal x409=(r12*sj4);
IkReal x410=((1.0)*x404);
IkReal x411=((1.0)*x403);
evalcond[0]=((((-1.0)*r10*x408*x410))+((r11*x404*x406))+((x403*x405))+((x403*x407))+(((-1.0)*x409*x410)));
evalcond[1]=((((-1.0)*cj5*r21*x410))+(((-1.0)*r22*sj4*x411))+((r21*x403*x406))+(((-1.0)*r20*sj5*x410))+(((-1.0)*r20*x408*x411)));
evalcond[2]=((((-1.0)*cj5*r01*x410))+(((-1.0)*r02*sj4*x411))+((r01*x403*x406))+(((-1.0)*r00*x408*x411))+(((-1.0)*r00*sj5*x410)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x408*x411))+((r11*x403*x406))+(((-1.0)*x407*x410))+(((-1.0)*x405*x410))+(((-1.0)*x409*x411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x412=((0.00085390243902439)*cj5);
IkReal x413=((0.00085390243902439)*sj5);
IkReal x414=((0.766731707317073)*cj4);
IkReal x415=((0.766731707317073)*sj4*sj5);
IkReal x416=((0.766731707317073)*cj5*sj4);
if( IKabs(((((-2.4390243902439)*px))+(((-1.0)*r02*x414))+((r00*x416))+(((-1.0)*r01*x412))+(((-1.0)*r01*x415))+(((-1.0)*r00*x413)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-1.0)*r21*x412))+(((-1.0)*r21*x415))+(((-1.0)*r20*x413))+((r20*x416))+(((-1.0)*r22*x414)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.4390243902439)*px))+(((-1.0)*r02*x414))+((r00*x416))+(((-1.0)*r01*x412))+(((-1.0)*r01*x415))+(((-1.0)*r00*x413))))+IKsqr(((((-2.4390243902439)*pz))+(((-1.0)*r21*x412))+(((-1.0)*r21*x415))+(((-1.0)*r20*x413))+((r20*x416))+(((-1.0)*r22*x414))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.4390243902439)*px))+(((-1.0)*r02*x414))+((r00*x416))+(((-1.0)*r01*x412))+(((-1.0)*r01*x415))+(((-1.0)*r00*x413))), ((((-2.4390243902439)*pz))+(((-1.0)*r21*x412))+(((-1.0)*r21*x415))+(((-1.0)*r20*x413))+((r20*x416))+(((-1.0)*r22*x414))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x417=((0.31436)*cj4);
IkReal x418=(cj5*r21);
IkReal x419=(cj3*sj5);
IkReal x420=(r20*sj5);
IkReal x421=((0.31436)*sj3);
IkReal x422=(r00*sj5);
IkReal x423=(cj5*r00);
IkReal x424=((0.31436)*sj4);
IkReal x425=(cj5*r20);
IkReal x426=(cj5*r01);
IkReal x427=((0.41)*(IKcos(j1)));
IkReal x428=((0.0003501)*x418);
IkReal x429=((0.0003501)*x420);
IkReal x430=((0.41)*(IKsin(j1)));
IkReal x431=((0.0003501)*x422);
IkReal x432=((0.0003501)*x426);
IkReal x433=(cj3*x424);
IkReal x434=(x430+x431+x432);
IkReal x435=(x429+x428+x427+pz);
evalcond[0]=(((r01*sj5*x424))+x434+px+(((-1.0)*x423*x424))+((r02*x417)));
evalcond[1]=(((r22*x417))+x435+(((-1.0)*x424*x425))+((r21*sj5*x424)));
evalcond[2]=(((r01*x417*x419))+(((-1.0)*cj3*x417*x423))+x435+(((-1.0)*r02*x433))+((x421*x422))+((x421*x426)));
evalcond[3]=(((x420*x421))+(((-1.0)*x434))+((r21*x417*x419))+(((-1.0)*cj3*x417*x425))+((x418*x421))+(((-1.0)*px))+(((-1.0)*r22*x433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x436=(sj4*sj5);
IkReal x437=(cj4*sj1);
IkReal x438=((1.0)*cj1);
IkReal x439=(cj5*sj4);
IkReal x440=((1.0)*sj1);
if( IKabs(((((-1.0)*r20*x439*x440))+((cj1*r00*x439))+((r21*sj1*x436))+(((-1.0)*r01*x436*x438))+(((-1.0)*cj4*r02*x438))+((r22*x437)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((r02*x437))+((r01*sj1*x436))+((cj1*r21*x436))+(((-1.0)*r00*x439*x440))+(((-1.0)*r20*x438*x439)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x439*x440))+((cj1*r00*x439))+((r21*sj1*x436))+(((-1.0)*r01*x436*x438))+(((-1.0)*cj4*r02*x438))+((r22*x437))))+IKsqr((((cj1*cj4*r22))+((r02*x437))+((r01*sj1*x436))+((cj1*r21*x436))+(((-1.0)*r00*x439*x440))+(((-1.0)*r20*x438*x439))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x439*x440))+((cj1*r00*x439))+((r21*sj1*x436))+(((-1.0)*r01*x436*x438))+(((-1.0)*cj4*r02*x438))+((r22*x437))), (((cj1*cj4*r22))+((r02*x437))+((r01*sj1*x436))+((cj1*r21*x436))+(((-1.0)*r00*x439*x440))+(((-1.0)*r20*x438*x439))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x441=IKcos(j2);
IkReal x442=IKsin(j2);
IkReal x443=((0.31436)*sj1);
IkReal x444=((1.0)*cj3);
IkReal x445=((0.0003501)*cj5);
IkReal x446=(cj5*r00);
IkReal x447=(r00*sj5);
IkReal x448=(cj5*sj3);
IkReal x449=(cj5*r20);
IkReal x450=(r20*sj5);
IkReal x451=((1.0)*cj4);
IkReal x452=(sj1*x441);
IkReal x453=(cj1*x441);
IkReal x454=(cj3*cj4*sj5);
IkReal x455=((1.0)*sj4*sj5);
IkReal x456=(cj1*x442);
IkReal x457=(sj1*x442);
IkReal x458=((1.0)*x456);
evalcond[0]=(((sj4*x449))+x457+x453+(((-1.0)*r22*x451))+(((-1.0)*r21*x455)));
evalcond[1]=(((sj4*x446))+(((-1.0)*r01*x455))+(((-1.0)*x458))+x452+(((-1.0)*r02*x451)));
evalcond[2]=((((-0.31436)*x453))+(((-1.0)*pz))+(((-1.0)*r21*x445))+(((-0.41)*cj1))+(((-0.0003501)*x450))+(((-1.0)*x442*x443)));
evalcond[3]=((((0.31436)*x456))+(((-0.0003501)*x447))+(((-0.41)*sj1))+(((-1.0)*px))+(((-1.0)*r01*x445))+(((-1.0)*x441*x443)));
evalcond[4]=(((sj3*x450))+((r21*x448))+(((-1.0)*cj4*x444*x449))+(((-1.0)*r22*sj4*x444))+(((-1.0)*x458))+x452+((r21*x454)));
evalcond[5]=((((-1.0)*x453))+(((-1.0)*x457))+(((-1.0)*cj4*x444*x446))+((sj3*x447))+((r01*x448))+(((-1.0)*r02*sj4*x444))+((r01*x454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x459=((1.0)*cj5);
IkReal x460=((1.0)*sj5);
CheckValue<IkReal> x461 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x459))+(((-1.0)*r20*x460)))),IkReal(((((-1.0)*cj4*r21*x460))+((r22*sj4))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x461.valid){
continue;
}
CheckValue<IkReal> x462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj4*x459))+((r01*sj4*sj5))+((cj4*r02)))),-1);
if(!x462.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x461.value)+(((1.5707963267949)*(x462.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x463=IKsin(j3);
IkReal x464=IKcos(j3);
IkReal x465=(r10*sj5);
IkReal x466=(cj4*sj5);
IkReal x467=(cj5*r11);
IkReal x468=(cj4*cj5);
IkReal x469=(r12*sj4);
IkReal x470=((1.0)*x464);
IkReal x471=((1.0)*x463);
evalcond[0]=((((-1.0)*r10*x468*x470))+((x463*x467))+((x463*x465))+(((-1.0)*x469*x470))+((r11*x464*x466)));
evalcond[1]=(((r21*x463*x466))+(((-1.0)*cj5*r21*x470))+(((-1.0)*r20*sj5*x470))+(((-1.0)*r20*x468*x471))+(((-1.0)*r22*sj4*x471)));
evalcond[2]=((((-1.0)*r00*sj5*x470))+(((-1.0)*cj5*r01*x470))+(((-1.0)*r00*x468*x471))+(((-1.0)*r02*sj4*x471))+((r01*x463*x466)));
evalcond[3]=((-1.0)+(((-1.0)*x467*x470))+(((-1.0)*r10*x468*x471))+(((-1.0)*x469*x471))+(((-1.0)*x465*x470))+((r11*x463*x466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x472=((0.00085390243902439)*cj5);
IkReal x473=((0.00085390243902439)*sj5);
IkReal x474=((0.766731707317073)*cj4);
IkReal x475=((0.766731707317073)*sj4*sj5);
IkReal x476=((0.766731707317073)*cj5*sj4);
if( IKabs(((((-2.4390243902439)*px))+(((-1.0)*r00*x473))+(((-1.0)*r01*x475))+(((-1.0)*r01*x472))+((r00*x476))+(((-1.0)*r02*x474)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x475))+(((-1.0)*r21*x472))+(((-2.4390243902439)*pz))+((r20*x476))+(((-1.0)*r22*x474))+(((-1.0)*r20*x473)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.4390243902439)*px))+(((-1.0)*r00*x473))+(((-1.0)*r01*x475))+(((-1.0)*r01*x472))+((r00*x476))+(((-1.0)*r02*x474))))+IKsqr(((((-1.0)*r21*x475))+(((-1.0)*r21*x472))+(((-2.4390243902439)*pz))+((r20*x476))+(((-1.0)*r22*x474))+(((-1.0)*r20*x473))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.4390243902439)*px))+(((-1.0)*r00*x473))+(((-1.0)*r01*x475))+(((-1.0)*r01*x472))+((r00*x476))+(((-1.0)*r02*x474))), ((((-1.0)*r21*x475))+(((-1.0)*r21*x472))+(((-2.4390243902439)*pz))+((r20*x476))+(((-1.0)*r22*x474))+(((-1.0)*r20*x473))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x477=((0.31436)*cj4);
IkReal x478=(cj5*r21);
IkReal x479=(cj3*sj5);
IkReal x480=(r20*sj5);
IkReal x481=((0.31436)*sj3);
IkReal x482=(r00*sj5);
IkReal x483=(cj5*r00);
IkReal x484=((0.31436)*sj4);
IkReal x485=(cj5*r20);
IkReal x486=(cj5*r01);
IkReal x487=((0.41)*(IKcos(j1)));
IkReal x488=((0.0003501)*x478);
IkReal x489=((0.0003501)*x480);
IkReal x490=((0.41)*(IKsin(j1)));
IkReal x491=((0.0003501)*x482);
IkReal x492=((0.0003501)*x486);
IkReal x493=(cj3*x484);
IkReal x494=(x492+x490+x491);
IkReal x495=(x489+x488+x487+pz);
evalcond[0]=((((-1.0)*x483*x484))+((r02*x477))+x494+px+((r01*sj5*x484)));
evalcond[1]=((((-1.0)*x484*x485))+x495+((r22*x477))+((r21*sj5*x484)));
evalcond[2]=((((-1.0)*cj3*x477*x483))+(((-1.0)*r02*x493))+((x481*x482))+((x481*x486))+x495+((r01*x477*x479)));
evalcond[3]=((((-1.0)*cj3*x477*x485))+(((-1.0)*x494))+(((-1.0)*px))+((x478*x481))+((x480*x481))+(((-1.0)*r22*x493))+((r21*x477*x479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x496=(sj4*sj5);
IkReal x497=(cj4*sj1);
IkReal x498=((1.0)*cj1);
IkReal x499=(cj5*sj4);
IkReal x500=((1.0)*sj1);
if( IKabs((((r21*sj1*x496))+(((-1.0)*r20*x499*x500))+((r22*x497))+(((-1.0)*cj4*r02*x498))+(((-1.0)*r01*x496*x498))+((cj1*r00*x499)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r20*x498*x499))+((r02*x497))+((r01*sj1*x496))+((cj1*r21*x496))+(((-1.0)*r00*x499*x500)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x496))+(((-1.0)*r20*x499*x500))+((r22*x497))+(((-1.0)*cj4*r02*x498))+(((-1.0)*r01*x496*x498))+((cj1*r00*x499))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r20*x498*x499))+((r02*x497))+((r01*sj1*x496))+((cj1*r21*x496))+(((-1.0)*r00*x499*x500))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x496))+(((-1.0)*r20*x499*x500))+((r22*x497))+(((-1.0)*cj4*r02*x498))+(((-1.0)*r01*x496*x498))+((cj1*r00*x499))), (((cj1*cj4*r22))+(((-1.0)*r20*x498*x499))+((r02*x497))+((r01*sj1*x496))+((cj1*r21*x496))+(((-1.0)*r00*x499*x500))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x501=IKcos(j2);
IkReal x502=IKsin(j2);
IkReal x503=((0.31436)*sj1);
IkReal x504=((1.0)*cj3);
IkReal x505=((0.0003501)*cj5);
IkReal x506=(cj5*r00);
IkReal x507=(r00*sj5);
IkReal x508=(cj5*sj3);
IkReal x509=(cj5*r20);
IkReal x510=(r20*sj5);
IkReal x511=((1.0)*cj4);
IkReal x512=(sj1*x501);
IkReal x513=(cj1*x501);
IkReal x514=(cj3*cj4*sj5);
IkReal x515=((1.0)*sj4*sj5);
IkReal x516=(cj1*x502);
IkReal x517=(sj1*x502);
IkReal x518=((1.0)*x516);
evalcond[0]=((((-1.0)*r22*x511))+x517+x513+(((-1.0)*r21*x515))+((sj4*x509)));
evalcond[1]=((((-1.0)*r01*x515))+x512+(((-1.0)*r02*x511))+((sj4*x506))+(((-1.0)*x518)));
evalcond[2]=((((-0.31436)*x513))+(((-1.0)*x502*x503))+(((-1.0)*pz))+(((-0.0003501)*x510))+(((-0.41)*cj1))+(((-1.0)*r21*x505)));
evalcond[3]=((((-0.0003501)*x507))+(((-1.0)*x501*x503))+(((-0.41)*sj1))+(((-1.0)*px))+(((-1.0)*r01*x505))+(((0.31436)*x516)));
evalcond[4]=(((r21*x508))+(((-1.0)*r22*sj4*x504))+x512+((r21*x514))+((sj3*x510))+(((-1.0)*x518))+(((-1.0)*cj4*x504*x509)));
evalcond[5]=(((r01*x514))+((sj3*x507))+(((-1.0)*x513))+(((-1.0)*x517))+((r01*x508))+(((-1.0)*r02*sj4*x504))+(((-1.0)*cj4*x504*x506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x519=((1.0)*r11);
IkReal x520=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)));
j3eval[0]=x520;
j3eval[1]=IKsign(x520);
j3eval[2]=((IKabs(((((-1.0)*cj4*sj5*x519))+((cj4*cj5*r10))+((r12*sj4)))))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*cj5*x519))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x521=((1.0)*sj5);
IkReal x522=(((cj5*r10*sj4))+(((-1.0)*r11*sj4*x521))+(((-1.0)*cj4*r12)));
j3eval[0]=x522;
j3eval[1]=((IKabs(((((-1.0)*r20*x521))+(((-1.0)*cj5*r21)))))+(IKabs((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x521))))));
j3eval[2]=IKsign(x522);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x523=r00*r00;
IkReal x524=cj5*cj5;
IkReal x525=cj4*cj4;
IkReal x526=r01*r01;
IkReal x527=r02*r02;
IkReal x528=(cj5*r00);
IkReal x529=(r02*sj4);
IkReal x530=((2.0)*r01*sj5);
IkReal x531=((1.0)*x525);
IkReal x532=(x523*x524);
IkReal x533=(x524*x526);
IkReal x534=((((-1.0)*x532))+(((-1.0)*x525*x528*x530))+(((-1.0)*x527*x531))+(((-1.0)*x531*x533))+(((-1.0)*cj4*x529*x530))+((x525*x526))+((x525*x532))+x533+x523+x527+(((2.0)*cj4*x528*x529))+((x528*x530)));
j3eval[0]=x534;
j3eval[1]=((IKabs(((((-1.0)*x529))+((cj4*r01*sj5))+(((-1.0)*cj4*x528)))))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))));
j3eval[2]=IKsign(x534);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x535=r00*r00;
IkReal x536=cj5*cj5;
IkReal x537=cj4*cj4;
IkReal x538=r01*r01;
IkReal x539=r02*r02;
IkReal x540=(cj5*r00);
IkReal x541=(r02*sj4);
IkReal x542=((2.0)*r01*sj5);
IkReal x543=((1.0)*x537);
IkReal x544=(x535*x536);
IkReal x545=(x536*x538);
CheckValue<IkReal> x546=IKPowWithIntegerCheck(IKsign(((((-1.0)*x544))+(((-1.0)*cj4*x541*x542))+(((-1.0)*x539*x543))+(((-1.0)*x537*x540*x542))+((x540*x542))+(((2.0)*cj4*x540*x541))+((x537*x538))+((x537*x544))+x545+x535+x539+(((-1.0)*x543*x545)))),-1);
if(!x546.valid){
continue;
}
CheckValue<IkReal> x547 = IKatan2WithCheck(IkReal(((((-1.0)*x541))+((cj4*r01*sj5))+(((-1.0)*cj4*x540)))),IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x547.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x546.value)))+(x547.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x548=IKsin(j3);
IkReal x549=IKcos(j3);
IkReal x550=(r02*sj4);
IkReal x551=(cj4*cj5);
IkReal x552=(cj4*sj5);
IkReal x553=(cj5*r01);
IkReal x554=(r00*sj5);
IkReal x555=((1.0)*x549);
IkReal x556=((1.0)*x548);
evalcond[0]=(((x548*x553))+((x548*x554))+(((-1.0)*x550*x555))+(((-1.0)*r00*x551*x555))+((r01*x549*x552)));
evalcond[1]=((((-1.0)*r20*x551*x556))+(((-1.0)*r20*sj5*x555))+(((-1.0)*r22*sj4*x556))+(((-1.0)*cj5*r21*x555))+((r21*x548*x552)));
evalcond[2]=((((-1.0)*r10*x551*x556))+(((-1.0)*cj5*r11*x555))+(((-1.0)*r10*sj5*x555))+(((-1.0)*r12*sj4*x556))+((r11*x548*x552)));
evalcond[3]=((-1.0)+((r01*x548*x552))+(((-1.0)*x554*x555))+(((-1.0)*x550*x556))+(((-1.0)*x553*x555))+(((-1.0)*r00*x551*x556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x557=((0.766731707317073)*sj4);
IkReal x558=((0.00085390243902439)*cj5);
IkReal x559=((0.00085390243902439)*sj5);
IkReal x560=((0.766731707317073)*cj4);
if( IKabs((((r11*sj5*x557))+((r10*x559))+((r11*x558))+((r12*x560))+(((-1.0)*cj5*r10*x557))+(((2.4390243902439)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-1.0)*r21*sj5*x557))+(((-1.0)*r21*x558))+(((-1.0)*r20*x559))+((cj5*r20*x557))+(((-1.0)*r22*x560)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj5*x557))+((r10*x559))+((r11*x558))+((r12*x560))+(((-1.0)*cj5*r10*x557))+(((2.4390243902439)*py))))+IKsqr(((((-2.4390243902439)*pz))+(((-1.0)*r21*sj5*x557))+(((-1.0)*r21*x558))+(((-1.0)*r20*x559))+((cj5*r20*x557))+(((-1.0)*r22*x560))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*sj5*x557))+((r10*x559))+((r11*x558))+((r12*x560))+(((-1.0)*cj5*r10*x557))+(((2.4390243902439)*py))), ((((-2.4390243902439)*pz))+(((-1.0)*r21*sj5*x557))+(((-1.0)*r21*x558))+(((-1.0)*r20*x559))+((cj5*r20*x557))+(((-1.0)*r22*x560))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x561=((1.0)*py);
IkReal x562=((0.31436)*cj4);
IkReal x563=((0.0003501)*cj5);
IkReal x564=((0.31436)*sj4);
IkReal x565=(cj5*r10);
IkReal x566=(r20*sj5);
IkReal x567=((0.31436)*sj3);
IkReal x568=(r10*sj5);
IkReal x569=(r21*sj5);
IkReal x570=(cj5*r20);
IkReal x571=(r11*sj5);
IkReal x572=((0.41)*(IKsin(j1)));
IkReal x573=((0.0003501)*x568);
IkReal x574=(r11*x563);
IkReal x575=((0.41)*(IKcos(j1)));
IkReal x576=(r21*x563);
IkReal x577=((0.0003501)*x566);
IkReal x578=(x574+x573+x561);
IkReal x579=(x575+x577+x576);
evalcond[0]=(((x564*x569))+((r22*x562))+(((-1.0)*x564*x570))+pz+x579);
evalcond[1]=(((x564*x565))+(((-1.0)*x564*x571))+(((-1.0)*x578))+x572+(((-1.0)*r12*x562)));
evalcond[2]=((((-1.0)*x566*x567))+(((-1.0)*cj5*r21*x567))+(((-1.0)*cj3*x562*x569))+((cj3*x562*x570))+(((-1.0)*x578))+x572+((cj3*r22*x564)));
evalcond[3]=(((cj5*r11*x567))+(((-1.0)*cj3*x562*x565))+((cj3*x562*x571))+(((-1.0)*pz))+((x567*x568))+(((-1.0)*cj3*r12*x564))+(((-1.0)*x579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x580=((1.0)*sj1);
IkReal x581=(cj4*r12);
IkReal x582=(cj5*sj4);
IkReal x583=((1.0)*cj1);
IkReal x584=(cj4*r22);
IkReal x585=(r21*sj4*sj5);
IkReal x586=(r11*sj4*sj5);
if( IKabs((((sj1*x585))+((sj1*x584))+(((-1.0)*r10*x582*x583))+(((-1.0)*r20*x580*x582))+((cj1*x581))+((cj1*x586)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x580*x581))+(((-1.0)*x580*x586))+(((-1.0)*r20*x582*x583))+((r10*sj1*x582))+((cj1*x585))+((cj1*x584)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x585))+((sj1*x584))+(((-1.0)*r10*x582*x583))+(((-1.0)*r20*x580*x582))+((cj1*x581))+((cj1*x586))))+IKsqr(((((-1.0)*x580*x581))+(((-1.0)*x580*x586))+(((-1.0)*r20*x582*x583))+((r10*sj1*x582))+((cj1*x585))+((cj1*x584))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x585))+((sj1*x584))+(((-1.0)*r10*x582*x583))+(((-1.0)*r20*x580*x582))+((cj1*x581))+((cj1*x586))), ((((-1.0)*x580*x581))+(((-1.0)*x580*x586))+(((-1.0)*r20*x582*x583))+((r10*sj1*x582))+((cj1*x585))+((cj1*x584))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x587=IKsin(j2);
IkReal x588=IKcos(j2);
IkReal x589=((0.0003501)*cj5);
IkReal x590=(cj3*cj4);
IkReal x591=(r21*sj5);
IkReal x592=((1.0)*sj4);
IkReal x593=((1.0)*cj5);
IkReal x594=(cj5*sj3);
IkReal x595=((0.0003501)*sj5);
IkReal x596=(cj5*sj4);
IkReal x597=((1.0)*cj4);
IkReal x598=(sj3*sj5);
IkReal x599=(r11*sj5);
IkReal x600=(cj1*x588);
IkReal x601=(sj1*x587);
IkReal x602=(sj1*x588);
IkReal x603=(cj1*x587);
IkReal x604=(x601+x600);
evalcond[0]=((((-1.0)*r22*x597))+x604+((r20*x596))+(((-1.0)*x591*x592)));
evalcond[1]=((((-1.0)*r12*x597))+(((-1.0)*x602))+(((-1.0)*x592*x599))+x603+((r10*x596)));
evalcond[2]=((((-1.0)*r20*x595))+(((-0.31436)*x600))+(((-0.31436)*x601))+(((-1.0)*pz))+(((-1.0)*r21*x589))+(((-0.41)*cj1)));
evalcond[3]=((((0.31436)*x602))+(((0.41)*sj1))+(((-0.31436)*x603))+(((-1.0)*py))+(((-1.0)*r11*x589))+(((-1.0)*r10*x595)));
evalcond[4]=((((-1.0)*r10*x590*x593))+((r11*x594))+x604+((x590*x599))+(((-1.0)*cj3*r12*x592))+((r10*x598)));
evalcond[5]=((((-1.0)*cj3*r22*x592))+(((-1.0)*x603))+((r21*x594))+x602+((r20*x598))+((x590*x591))+(((-1.0)*r20*x590*x593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x605=((1.0)*sj5);
CheckValue<IkReal> x606 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x605))+(((-1.0)*cj5*r21)))),IkReal((((r22*sj4))+(((-1.0)*cj4*r21*x605))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x606.valid){
continue;
}
CheckValue<IkReal> x607=IKPowWithIntegerCheck(IKsign((((cj5*r10*sj4))+(((-1.0)*r11*sj4*x605))+(((-1.0)*cj4*r12)))),-1);
if(!x607.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x606.value)+(((1.5707963267949)*(x607.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x608=IKsin(j3);
IkReal x609=IKcos(j3);
IkReal x610=(r02*sj4);
IkReal x611=(cj4*cj5);
IkReal x612=(cj4*sj5);
IkReal x613=(cj5*r01);
IkReal x614=(r00*sj5);
IkReal x615=((1.0)*x609);
IkReal x616=((1.0)*x608);
evalcond[0]=((((-1.0)*x610*x615))+((x608*x613))+((x608*x614))+((r01*x609*x612))+(((-1.0)*r00*x611*x615)));
evalcond[1]=(((r21*x608*x612))+(((-1.0)*r20*x611*x616))+(((-1.0)*r20*sj5*x615))+(((-1.0)*r22*sj4*x616))+(((-1.0)*cj5*r21*x615)));
evalcond[2]=((((-1.0)*r12*sj4*x616))+((r11*x608*x612))+(((-1.0)*r10*x611*x616))+(((-1.0)*cj5*r11*x615))+(((-1.0)*r10*sj5*x615)));
evalcond[3]=((-1.0)+(((-1.0)*x614*x615))+(((-1.0)*x610*x616))+((r01*x608*x612))+(((-1.0)*x613*x615))+(((-1.0)*r00*x611*x616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x617=((0.766731707317073)*sj4);
IkReal x618=((0.00085390243902439)*cj5);
IkReal x619=((0.00085390243902439)*sj5);
IkReal x620=((0.766731707317073)*cj4);
if( IKabs((((r11*sj5*x617))+((r11*x618))+((r12*x620))+((r10*x619))+(((-1.0)*cj5*r10*x617))+(((2.4390243902439)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-1.0)*r20*x619))+((cj5*r20*x617))+(((-1.0)*r21*x618))+(((-1.0)*r21*sj5*x617))+(((-1.0)*r22*x620)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj5*x617))+((r11*x618))+((r12*x620))+((r10*x619))+(((-1.0)*cj5*r10*x617))+(((2.4390243902439)*py))))+IKsqr(((((-2.4390243902439)*pz))+(((-1.0)*r20*x619))+((cj5*r20*x617))+(((-1.0)*r21*x618))+(((-1.0)*r21*sj5*x617))+(((-1.0)*r22*x620))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*sj5*x617))+((r11*x618))+((r12*x620))+((r10*x619))+(((-1.0)*cj5*r10*x617))+(((2.4390243902439)*py))), ((((-2.4390243902439)*pz))+(((-1.0)*r20*x619))+((cj5*r20*x617))+(((-1.0)*r21*x618))+(((-1.0)*r21*sj5*x617))+(((-1.0)*r22*x620))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x621=((1.0)*py);
IkReal x622=((0.31436)*cj4);
IkReal x623=((0.0003501)*cj5);
IkReal x624=((0.31436)*sj4);
IkReal x625=(cj5*r10);
IkReal x626=(r20*sj5);
IkReal x627=((0.31436)*sj3);
IkReal x628=(r10*sj5);
IkReal x629=(r21*sj5);
IkReal x630=(cj5*r20);
IkReal x631=(r11*sj5);
IkReal x632=((0.41)*(IKsin(j1)));
IkReal x633=((0.0003501)*x628);
IkReal x634=(r11*x623);
IkReal x635=((0.41)*(IKcos(j1)));
IkReal x636=(r21*x623);
IkReal x637=((0.0003501)*x626);
IkReal x638=(x621+x634+x633);
IkReal x639=(x636+x637+x635);
evalcond[0]=(((r22*x622))+(((-1.0)*x624*x630))+pz+x639+((x624*x629)));
evalcond[1]=((((-1.0)*r12*x622))+(((-1.0)*x638))+(((-1.0)*x624*x631))+x632+((x624*x625)));
evalcond[2]=((((-1.0)*cj5*r21*x627))+(((-1.0)*cj3*x622*x629))+(((-1.0)*x638))+x632+((cj3*x622*x630))+(((-1.0)*x626*x627))+((cj3*r22*x624)));
evalcond[3]=((((-1.0)*cj3*x622*x625))+((cj5*r11*x627))+(((-1.0)*x639))+(((-1.0)*pz))+((cj3*x622*x631))+(((-1.0)*cj3*r12*x624))+((x627*x628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x640=((1.0)*sj1);
IkReal x641=(cj4*r12);
IkReal x642=(cj5*sj4);
IkReal x643=((1.0)*cj1);
IkReal x644=(cj4*r22);
IkReal x645=(r21*sj4*sj5);
IkReal x646=(r11*sj4*sj5);
if( IKabs((((sj1*x644))+((sj1*x645))+((cj1*x646))+((cj1*x641))+(((-1.0)*r20*x640*x642))+(((-1.0)*r10*x642*x643)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj1*x642))+(((-1.0)*r20*x642*x643))+(((-1.0)*x640*x646))+(((-1.0)*x640*x641))+((cj1*x645))+((cj1*x644)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x644))+((sj1*x645))+((cj1*x646))+((cj1*x641))+(((-1.0)*r20*x640*x642))+(((-1.0)*r10*x642*x643))))+IKsqr((((r10*sj1*x642))+(((-1.0)*r20*x642*x643))+(((-1.0)*x640*x646))+(((-1.0)*x640*x641))+((cj1*x645))+((cj1*x644))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x644))+((sj1*x645))+((cj1*x646))+((cj1*x641))+(((-1.0)*r20*x640*x642))+(((-1.0)*r10*x642*x643))), (((r10*sj1*x642))+(((-1.0)*r20*x642*x643))+(((-1.0)*x640*x646))+(((-1.0)*x640*x641))+((cj1*x645))+((cj1*x644))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x647=IKsin(j2);
IkReal x648=IKcos(j2);
IkReal x649=((0.0003501)*cj5);
IkReal x650=(cj3*cj4);
IkReal x651=(r21*sj5);
IkReal x652=((1.0)*sj4);
IkReal x653=((1.0)*cj5);
IkReal x654=(cj5*sj3);
IkReal x655=((0.0003501)*sj5);
IkReal x656=(cj5*sj4);
IkReal x657=((1.0)*cj4);
IkReal x658=(sj3*sj5);
IkReal x659=(r11*sj5);
IkReal x660=(cj1*x648);
IkReal x661=(sj1*x647);
IkReal x662=(sj1*x648);
IkReal x663=(cj1*x647);
IkReal x664=(x661+x660);
evalcond[0]=((((-1.0)*x651*x652))+(((-1.0)*r22*x657))+x664+((r20*x656)));
evalcond[1]=((((-1.0)*r12*x657))+(((-1.0)*x662))+x663+((r10*x656))+(((-1.0)*x652*x659)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*r21*x649))+(((-0.31436)*x660))+(((-0.31436)*x661))+(((-0.41)*cj1))+(((-1.0)*r20*x655)));
evalcond[3]=((((0.31436)*x662))+(((-1.0)*r11*x649))+(((0.41)*sj1))+(((-1.0)*py))+(((-1.0)*r10*x655))+(((-0.31436)*x663)));
evalcond[4]=((((-1.0)*cj3*r12*x652))+(((-1.0)*r10*x650*x653))+((r11*x654))+x664+((r10*x658))+((x650*x659)));
evalcond[5]=((((-1.0)*cj3*r22*x652))+(((-1.0)*r20*x650*x653))+(((-1.0)*x663))+x662+((r21*x654))+((x650*x651))+((r20*x658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x665=((1.0)*r11);
CheckValue<IkReal> x666=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)))),-1);
if(!x666.valid){
continue;
}
CheckValue<IkReal> x667 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5))+(((-1.0)*cj5*x665)))),IkReal((((cj4*cj5*r10))+((r12*sj4))+(((-1.0)*cj4*sj5*x665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x667.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x666.value)))+(x667.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x668=IKsin(j3);
IkReal x669=IKcos(j3);
IkReal x670=(r02*sj4);
IkReal x671=(cj4*cj5);
IkReal x672=(cj4*sj5);
IkReal x673=(cj5*r01);
IkReal x674=(r00*sj5);
IkReal x675=((1.0)*x669);
IkReal x676=((1.0)*x668);
evalcond[0]=(((r01*x669*x672))+(((-1.0)*r00*x671*x675))+(((-1.0)*x670*x675))+((x668*x673))+((x668*x674)));
evalcond[1]=((((-1.0)*r22*sj4*x676))+(((-1.0)*r20*sj5*x675))+(((-1.0)*cj5*r21*x675))+((r21*x668*x672))+(((-1.0)*r20*x671*x676)));
evalcond[2]=((((-1.0)*r10*sj5*x675))+(((-1.0)*r12*sj4*x676))+((r11*x668*x672))+(((-1.0)*cj5*r11*x675))+(((-1.0)*r10*x671*x676)));
evalcond[3]=((-1.0)+((r01*x668*x672))+(((-1.0)*r00*x671*x676))+(((-1.0)*x670*x676))+(((-1.0)*x674*x675))+(((-1.0)*x673*x675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x677=((0.766731707317073)*sj4);
IkReal x678=((0.00085390243902439)*cj5);
IkReal x679=((0.00085390243902439)*sj5);
IkReal x680=((0.766731707317073)*cj4);
if( IKabs((((r10*x679))+((r11*x678))+((r11*sj5*x677))+(((-1.0)*cj5*r10*x677))+(((2.4390243902439)*py))+((r12*x680)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-1.0)*r21*x678))+(((-1.0)*r21*sj5*x677))+(((-1.0)*r20*x679))+((cj5*r20*x677))+(((-1.0)*r22*x680)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x679))+((r11*x678))+((r11*sj5*x677))+(((-1.0)*cj5*r10*x677))+(((2.4390243902439)*py))+((r12*x680))))+IKsqr(((((-2.4390243902439)*pz))+(((-1.0)*r21*x678))+(((-1.0)*r21*sj5*x677))+(((-1.0)*r20*x679))+((cj5*r20*x677))+(((-1.0)*r22*x680))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x679))+((r11*x678))+((r11*sj5*x677))+(((-1.0)*cj5*r10*x677))+(((2.4390243902439)*py))+((r12*x680))), ((((-2.4390243902439)*pz))+(((-1.0)*r21*x678))+(((-1.0)*r21*sj5*x677))+(((-1.0)*r20*x679))+((cj5*r20*x677))+(((-1.0)*r22*x680))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x681=((1.0)*py);
IkReal x682=((0.31436)*cj4);
IkReal x683=((0.0003501)*cj5);
IkReal x684=((0.31436)*sj4);
IkReal x685=(cj5*r10);
IkReal x686=(r20*sj5);
IkReal x687=((0.31436)*sj3);
IkReal x688=(r10*sj5);
IkReal x689=(r21*sj5);
IkReal x690=(cj5*r20);
IkReal x691=(r11*sj5);
IkReal x692=((0.41)*(IKsin(j1)));
IkReal x693=((0.0003501)*x688);
IkReal x694=(r11*x683);
IkReal x695=((0.41)*(IKcos(j1)));
IkReal x696=(r21*x683);
IkReal x697=((0.0003501)*x686);
IkReal x698=(x681+x694+x693);
IkReal x699=(x695+x696+x697);
evalcond[0]=((((-1.0)*x684*x690))+((r22*x682))+pz+x699+((x684*x689)));
evalcond[1]=((((-1.0)*r12*x682))+(((-1.0)*x684*x691))+x692+(((-1.0)*x698))+((x684*x685)));
evalcond[2]=((((-1.0)*cj5*r21*x687))+(((-1.0)*x686*x687))+x692+(((-1.0)*x698))+(((-1.0)*cj3*x682*x689))+((cj3*r22*x684))+((cj3*x682*x690)));
evalcond[3]=(((x687*x688))+((cj5*r11*x687))+(((-1.0)*pz))+(((-1.0)*x699))+(((-1.0)*cj3*x682*x685))+((cj3*x682*x691))+(((-1.0)*cj3*r12*x684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x700=((1.0)*sj1);
IkReal x701=(cj4*r12);
IkReal x702=(cj5*sj4);
IkReal x703=((1.0)*cj1);
IkReal x704=(cj4*r22);
IkReal x705=(r21*sj4*sj5);
IkReal x706=(r11*sj4*sj5);
if( IKabs(((((-1.0)*r10*x702*x703))+(((-1.0)*r20*x700*x702))+((sj1*x705))+((sj1*x704))+((cj1*x701))+((cj1*x706)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj1*x702))+(((-1.0)*r20*x702*x703))+((cj1*x704))+((cj1*x705))+(((-1.0)*x700*x706))+(((-1.0)*x700*x701)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x702*x703))+(((-1.0)*r20*x700*x702))+((sj1*x705))+((sj1*x704))+((cj1*x701))+((cj1*x706))))+IKsqr((((r10*sj1*x702))+(((-1.0)*r20*x702*x703))+((cj1*x704))+((cj1*x705))+(((-1.0)*x700*x706))+(((-1.0)*x700*x701))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x702*x703))+(((-1.0)*r20*x700*x702))+((sj1*x705))+((sj1*x704))+((cj1*x701))+((cj1*x706))), (((r10*sj1*x702))+(((-1.0)*r20*x702*x703))+((cj1*x704))+((cj1*x705))+(((-1.0)*x700*x706))+(((-1.0)*x700*x701))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x707=IKsin(j2);
IkReal x708=IKcos(j2);
IkReal x709=((0.0003501)*cj5);
IkReal x710=(cj3*cj4);
IkReal x711=(r21*sj5);
IkReal x712=((1.0)*sj4);
IkReal x713=((1.0)*cj5);
IkReal x714=(cj5*sj3);
IkReal x715=((0.0003501)*sj5);
IkReal x716=(cj5*sj4);
IkReal x717=((1.0)*cj4);
IkReal x718=(sj3*sj5);
IkReal x719=(r11*sj5);
IkReal x720=(cj1*x708);
IkReal x721=(sj1*x707);
IkReal x722=(sj1*x708);
IkReal x723=(cj1*x707);
IkReal x724=(x720+x721);
evalcond[0]=((((-1.0)*r22*x717))+(((-1.0)*x711*x712))+((r20*x716))+x724);
evalcond[1]=((((-1.0)*r12*x717))+(((-1.0)*x722))+(((-1.0)*x712*x719))+x723+((r10*x716)));
evalcond[2]=((((-1.0)*pz))+(((-0.31436)*x720))+(((-0.31436)*x721))+(((-1.0)*r21*x709))+(((-1.0)*r20*x715))+(((-0.41)*cj1)));
evalcond[3]=((((-1.0)*r11*x709))+(((0.41)*sj1))+(((-1.0)*py))+(((-0.31436)*x723))+(((-1.0)*r10*x715))+(((0.31436)*x722)));
evalcond[4]=(((r11*x714))+(((-1.0)*r10*x710*x713))+((x710*x719))+(((-1.0)*cj3*r12*x712))+x724+((r10*x718)));
evalcond[5]=((((-1.0)*cj3*r22*x712))+(((-1.0)*r20*x710*x713))+((x710*x711))+(((-1.0)*x723))+((r20*x718))+((r21*x714))+x722);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x725=((1.0)*cj5);
IkReal x726=((1.0)*sj5);
IkReal x727=((((-1.0)*r10*sj4*x725))+((r11*sj4*sj5))+((cj4*r12)));
j3eval[0]=x727;
j3eval[1]=((IKabs((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x726)))))+(IKabs(((((-1.0)*r21*x725))+(((-1.0)*r20*x726))))));
j3eval[2]=IKsign(x727);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x728=((1.0)*r11);
IkReal x729=((1.0)*sj5);
IkReal x730=(((cj5*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x729)));
j3eval[0]=x730;
j3eval[1]=((IKabs(((((-1.0)*r10*x729))+(((-1.0)*cj5*x728)))))+(IKabs(((((-1.0)*cj4*sj5*x728))+((cj4*cj5*r10))+((r12*sj4))))));
j3eval[2]=IKsign(x730);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x731=cj4*cj4;
IkReal x732=cj5*cj5;
IkReal x733=r01*r01;
IkReal x734=r02*r02;
IkReal x735=r00*r00;
IkReal x736=(cj5*r00);
IkReal x737=(r01*sj5);
IkReal x738=(r02*sj4);
IkReal x739=((2.0)*cj4);
IkReal x740=((1.0)*x731);
IkReal x741=(x732*x735);
IkReal x742=(x732*x733);
IkReal x743=(((x737*x738*x739))+((x731*x734))+((x731*x742))+(((-1.0)*x735))+(((-1.0)*x734))+(((-2.0)*x736*x737))+(((-1.0)*x740*x741))+(((2.0)*x731*x736*x737))+(((-1.0)*x742))+(((-1.0)*x733*x740))+x741+(((-1.0)*x736*x738*x739)));
j3eval[0]=x743;
j3eval[1]=IKsign(x743);
j3eval[2]=((IKabs((((cj4*x737))+(((-1.0)*x738))+(((-1.0)*cj4*x736)))))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x744=cj4*cj4;
IkReal x745=cj5*cj5;
IkReal x746=r01*r01;
IkReal x747=r02*r02;
IkReal x748=r00*r00;
IkReal x749=((1.0)*cj5);
IkReal x750=(cj4*r00);
IkReal x751=(r02*sj4);
IkReal x752=((2.0)*cj5);
IkReal x753=(r00*sj5);
IkReal x754=((1.0)*x745);
IkReal x755=(cj4*r01*sj5);
IkReal x756=(x744*x746);
CheckValue<IkReal> x757 = IKatan2WithCheck(IkReal(((((-1.0)*x751))+x755+(((-1.0)*x749*x750)))),IkReal(((((-1.0)*x753))+(((-1.0)*r01*x749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x757.valid){
continue;
}
CheckValue<IkReal> x758=IKPowWithIntegerCheck(IKsign((((x745*x756))+((x745*x748))+(((-1.0)*r01*x752*x753))+((x744*x747))+(((-1.0)*x746*x754))+(((-1.0)*x744*x748*x754))+(((-1.0)*x756))+((r01*x744*x752*x753))+(((-1.0)*x750*x751*x752))+(((-1.0)*x747))+(((-1.0)*x748))+(((2.0)*x751*x755)))),-1);
if(!x758.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x757.value)+(((1.5707963267949)*(x758.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x759=IKsin(j3);
IkReal x760=IKcos(j3);
IkReal x761=(r02*sj4);
IkReal x762=(cj4*cj5);
IkReal x763=(cj4*sj5);
IkReal x764=(cj5*r01);
IkReal x765=(r00*sj5);
IkReal x766=((1.0)*x760);
IkReal x767=((1.0)*x759);
evalcond[0]=((((-1.0)*r00*x762*x766))+((x759*x764))+((x759*x765))+(((-1.0)*x761*x766))+((r01*x760*x763)));
evalcond[1]=((((-1.0)*r20*sj5*x766))+(((-1.0)*r22*sj4*x767))+(((-1.0)*r20*x762*x767))+(((-1.0)*cj5*r21*x766))+((r21*x759*x763)));
evalcond[2]=((((-1.0)*r12*sj4*x767))+((r11*x759*x763))+(((-1.0)*cj5*r11*x766))+(((-1.0)*r10*x762*x767))+(((-1.0)*r10*sj5*x766)));
evalcond[3]=((1.0)+(((-1.0)*x765*x766))+(((-1.0)*r00*x762*x767))+(((-1.0)*x764*x766))+((r01*x759*x763))+(((-1.0)*x761*x767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x768=((0.766731707317073)*sj4);
IkReal x769=((0.00085390243902439)*cj5);
IkReal x770=((0.00085390243902439)*sj5);
IkReal x771=((0.766731707317073)*cj4);
if( IKabs(((((-2.4390243902439)*py))+(((-1.0)*r11*sj5*x768))+(((-1.0)*r12*x771))+((cj5*r10*x768))+(((-1.0)*r10*x770))+(((-1.0)*r11*x769)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-1.0)*r20*x770))+((cj5*r20*x768))+(((-1.0)*r21*x769))+(((-1.0)*r22*x771))+(((-1.0)*r21*sj5*x768)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.4390243902439)*py))+(((-1.0)*r11*sj5*x768))+(((-1.0)*r12*x771))+((cj5*r10*x768))+(((-1.0)*r10*x770))+(((-1.0)*r11*x769))))+IKsqr(((((-2.4390243902439)*pz))+(((-1.0)*r20*x770))+((cj5*r20*x768))+(((-1.0)*r21*x769))+(((-1.0)*r22*x771))+(((-1.0)*r21*sj5*x768))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.4390243902439)*py))+(((-1.0)*r11*sj5*x768))+(((-1.0)*r12*x771))+((cj5*r10*x768))+(((-1.0)*r10*x770))+(((-1.0)*r11*x769))), ((((-2.4390243902439)*pz))+(((-1.0)*r20*x770))+((cj5*r20*x768))+(((-1.0)*r21*x769))+(((-1.0)*r22*x771))+(((-1.0)*r21*sj5*x768))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x772=((0.31436)*cj4);
IkReal x773=((0.0003501)*cj5);
IkReal x774=((0.31436)*sj4);
IkReal x775=(cj5*r10);
IkReal x776=(r20*sj5);
IkReal x777=((0.31436)*sj3);
IkReal x778=(r10*sj5);
IkReal x779=(r21*sj5);
IkReal x780=(cj5*r20);
IkReal x781=(r11*sj5);
IkReal x782=((0.41)*(IKcos(j1)));
IkReal x783=(r21*x773);
IkReal x784=((0.0003501)*x776);
IkReal x785=((0.41)*(IKsin(j1)));
IkReal x786=((0.0003501)*x778);
IkReal x787=(r11*x773);
IkReal x788=(x786+x787+x785);
IkReal x789=(pz+x782+x783+x784);
evalcond[0]=((((-1.0)*x774*x775))+((x774*x781))+py+((r12*x772))+x788);
evalcond[1]=(((x774*x779))+((r22*x772))+x789+(((-1.0)*x774*x780)));
evalcond[2]=((((-1.0)*cj3*x772*x775))+((x777*x778))+(((-1.0)*cj3*r12*x774))+x789+((cj3*x772*x781))+((cj5*r11*x777)));
evalcond[3]=(((x776*x777))+((cj3*x772*x779))+(((-1.0)*x788))+(((-1.0)*py))+(((-1.0)*cj3*r22*x774))+((cj5*r21*x777))+(((-1.0)*cj3*x772*x780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x790=(cj4*r12);
IkReal x791=((1.0)*sj4);
IkReal x792=(cj5*sj1);
IkReal x793=(cj4*r22);
IkReal x794=(r11*sj5);
IkReal x795=(cj1*cj5);
IkReal x796=(r21*sj4*sj5);
if( IKabs((((sj1*x796))+((sj1*x793))+(((-1.0)*cj1*x791*x794))+(((-1.0)*r20*x791*x792))+((r10*sj4*x795))+(((-1.0)*cj1*x790)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x793))+((cj1*x796))+((sj1*x790))+(((-1.0)*r20*x791*x795))+((sj1*sj4*x794))+(((-1.0)*r10*x791*x792)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x796))+((sj1*x793))+(((-1.0)*cj1*x791*x794))+(((-1.0)*r20*x791*x792))+((r10*sj4*x795))+(((-1.0)*cj1*x790))))+IKsqr((((cj1*x793))+((cj1*x796))+((sj1*x790))+(((-1.0)*r20*x791*x795))+((sj1*sj4*x794))+(((-1.0)*r10*x791*x792))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x796))+((sj1*x793))+(((-1.0)*cj1*x791*x794))+(((-1.0)*r20*x791*x792))+((r10*sj4*x795))+(((-1.0)*cj1*x790))), (((cj1*x793))+((cj1*x796))+((sj1*x790))+(((-1.0)*r20*x791*x795))+((sj1*sj4*x794))+(((-1.0)*r10*x791*x792))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x797=IKcos(j2);
IkReal x798=IKsin(j2);
IkReal x799=((0.31436)*sj1);
IkReal x800=((0.0003501)*cj5);
IkReal x801=(cj3*cj4);
IkReal x802=(r21*sj5);
IkReal x803=((1.0)*sj4);
IkReal x804=((1.0)*cj5);
IkReal x805=(cj5*sj3);
IkReal x806=((0.0003501)*sj5);
IkReal x807=(cj5*sj4);
IkReal x808=((1.0)*cj4);
IkReal x809=(r11*sj5);
IkReal x810=(sj3*sj5);
IkReal x811=(sj1*x797);
IkReal x812=(cj1*x797);
IkReal x813=(cj1*x798);
IkReal x814=(sj1*x798);
IkReal x815=((1.0)*x813);
evalcond[0]=((((-1.0)*r22*x808))+((r20*x807))+x814+x812+(((-1.0)*x802*x803)));
evalcond[1]=((((-1.0)*r12*x808))+(((-1.0)*x815))+(((-1.0)*x803*x809))+x811+((r10*x807)));
evalcond[2]=((((-1.0)*x798*x799))+(((-1.0)*r21*x800))+(((-1.0)*pz))+(((-1.0)*r20*x806))+(((-0.41)*cj1))+(((-0.31436)*x812)));
evalcond[3]=((((-1.0)*r11*x800))+(((0.31436)*x813))+(((-0.41)*sj1))+(((-1.0)*x797*x799))+(((-1.0)*py))+(((-1.0)*r10*x806)));
evalcond[4]=((((-1.0)*cj3*r22*x803))+((r20*x810))+((r21*x805))+(((-1.0)*x815))+(((-1.0)*r20*x801*x804))+((x801*x802))+x811);
evalcond[5]=((((-1.0)*cj3*r12*x803))+((r10*x810))+(((-1.0)*r10*x801*x804))+(((-1.0)*x814))+(((-1.0)*x812))+((r11*x805))+((x801*x809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x816=((1.0)*r11);
IkReal x817=((1.0)*sj5);
CheckValue<IkReal> x818 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x817))+(((-1.0)*cj5*x816)))),IkReal((((cj4*cj5*r10))+((r12*sj4))+(((-1.0)*cj4*sj5*x816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x818.valid){
continue;
}
CheckValue<IkReal> x819=IKPowWithIntegerCheck(IKsign((((cj5*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x817)))),-1);
if(!x819.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x818.value)+(((1.5707963267949)*(x819.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x820=IKsin(j3);
IkReal x821=IKcos(j3);
IkReal x822=(r02*sj4);
IkReal x823=(cj4*cj5);
IkReal x824=(cj4*sj5);
IkReal x825=(cj5*r01);
IkReal x826=(r00*sj5);
IkReal x827=((1.0)*x821);
IkReal x828=((1.0)*x820);
evalcond[0]=(((r01*x821*x824))+(((-1.0)*x822*x827))+((x820*x825))+((x820*x826))+(((-1.0)*r00*x823*x827)));
evalcond[1]=((((-1.0)*r22*sj4*x828))+(((-1.0)*r20*x823*x828))+((r21*x820*x824))+(((-1.0)*cj5*r21*x827))+(((-1.0)*r20*sj5*x827)));
evalcond[2]=(((r11*x820*x824))+(((-1.0)*r10*x823*x828))+(((-1.0)*r12*sj4*x828))+(((-1.0)*r10*sj5*x827))+(((-1.0)*cj5*r11*x827)));
evalcond[3]=((1.0)+((r01*x820*x824))+(((-1.0)*x822*x828))+(((-1.0)*r00*x823*x828))+(((-1.0)*x826*x827))+(((-1.0)*x825*x827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x829=((0.766731707317073)*sj4);
IkReal x830=((0.00085390243902439)*cj5);
IkReal x831=((0.00085390243902439)*sj5);
IkReal x832=((0.766731707317073)*cj4);
if( IKabs(((((-2.4390243902439)*py))+(((-1.0)*r10*x831))+(((-1.0)*r11*sj5*x829))+(((-1.0)*r12*x832))+(((-1.0)*r11*x830))+((cj5*r10*x829)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-1.0)*r20*x831))+(((-1.0)*r21*x830))+((cj5*r20*x829))+(((-1.0)*r22*x832))+(((-1.0)*r21*sj5*x829)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.4390243902439)*py))+(((-1.0)*r10*x831))+(((-1.0)*r11*sj5*x829))+(((-1.0)*r12*x832))+(((-1.0)*r11*x830))+((cj5*r10*x829))))+IKsqr(((((-2.4390243902439)*pz))+(((-1.0)*r20*x831))+(((-1.0)*r21*x830))+((cj5*r20*x829))+(((-1.0)*r22*x832))+(((-1.0)*r21*sj5*x829))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.4390243902439)*py))+(((-1.0)*r10*x831))+(((-1.0)*r11*sj5*x829))+(((-1.0)*r12*x832))+(((-1.0)*r11*x830))+((cj5*r10*x829))), ((((-2.4390243902439)*pz))+(((-1.0)*r20*x831))+(((-1.0)*r21*x830))+((cj5*r20*x829))+(((-1.0)*r22*x832))+(((-1.0)*r21*sj5*x829))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x833=((0.31436)*cj4);
IkReal x834=((0.0003501)*cj5);
IkReal x835=((0.31436)*sj4);
IkReal x836=(cj5*r10);
IkReal x837=(r20*sj5);
IkReal x838=((0.31436)*sj3);
IkReal x839=(r10*sj5);
IkReal x840=(r21*sj5);
IkReal x841=(cj5*r20);
IkReal x842=(r11*sj5);
IkReal x843=((0.41)*(IKcos(j1)));
IkReal x844=(r21*x834);
IkReal x845=((0.0003501)*x837);
IkReal x846=((0.41)*(IKsin(j1)));
IkReal x847=((0.0003501)*x839);
IkReal x848=(r11*x834);
IkReal x849=(x847+x846+x848);
IkReal x850=(pz+x843+x845+x844);
evalcond[0]=((((-1.0)*x835*x836))+((x835*x842))+py+((r12*x833))+x849);
evalcond[1]=(((r22*x833))+(((-1.0)*x835*x841))+((x835*x840))+x850);
evalcond[2]=(((x838*x839))+(((-1.0)*cj3*x833*x836))+(((-1.0)*cj3*r12*x835))+((cj5*r11*x838))+((cj3*x833*x842))+x850);
evalcond[3]=((((-1.0)*cj3*x833*x841))+(((-1.0)*cj3*r22*x835))+((cj3*x833*x840))+(((-1.0)*py))+((x837*x838))+(((-1.0)*x849))+((cj5*r21*x838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x851=(cj4*r12);
IkReal x852=((1.0)*sj4);
IkReal x853=(cj5*sj1);
IkReal x854=(cj4*r22);
IkReal x855=(r11*sj5);
IkReal x856=(cj1*cj5);
IkReal x857=(r21*sj4*sj5);
if( IKabs((((r10*sj4*x856))+(((-1.0)*cj1*x852*x855))+((sj1*x854))+((sj1*x857))+(((-1.0)*r20*x852*x853))+(((-1.0)*cj1*x851)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*sj4*x855))+(((-1.0)*r10*x852*x853))+((sj1*x851))+((cj1*x857))+((cj1*x854))+(((-1.0)*r20*x852*x856)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj4*x856))+(((-1.0)*cj1*x852*x855))+((sj1*x854))+((sj1*x857))+(((-1.0)*r20*x852*x853))+(((-1.0)*cj1*x851))))+IKsqr((((sj1*sj4*x855))+(((-1.0)*r10*x852*x853))+((sj1*x851))+((cj1*x857))+((cj1*x854))+(((-1.0)*r20*x852*x856))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*sj4*x856))+(((-1.0)*cj1*x852*x855))+((sj1*x854))+((sj1*x857))+(((-1.0)*r20*x852*x853))+(((-1.0)*cj1*x851))), (((sj1*sj4*x855))+(((-1.0)*r10*x852*x853))+((sj1*x851))+((cj1*x857))+((cj1*x854))+(((-1.0)*r20*x852*x856))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x858=IKcos(j2);
IkReal x859=IKsin(j2);
IkReal x860=((0.31436)*sj1);
IkReal x861=((0.0003501)*cj5);
IkReal x862=(cj3*cj4);
IkReal x863=(r21*sj5);
IkReal x864=((1.0)*sj4);
IkReal x865=((1.0)*cj5);
IkReal x866=(cj5*sj3);
IkReal x867=((0.0003501)*sj5);
IkReal x868=(cj5*sj4);
IkReal x869=((1.0)*cj4);
IkReal x870=(r11*sj5);
IkReal x871=(sj3*sj5);
IkReal x872=(sj1*x858);
IkReal x873=(cj1*x858);
IkReal x874=(cj1*x859);
IkReal x875=(sj1*x859);
IkReal x876=((1.0)*x874);
evalcond[0]=(x873+x875+((r20*x868))+(((-1.0)*r22*x869))+(((-1.0)*x863*x864)));
evalcond[1]=(((r10*x868))+(((-1.0)*x864*x870))+x872+(((-1.0)*r12*x869))+(((-1.0)*x876)));
evalcond[2]=((((-1.0)*pz))+(((-0.31436)*x873))+(((-0.41)*cj1))+(((-1.0)*x859*x860))+(((-1.0)*r20*x867))+(((-1.0)*r21*x861)));
evalcond[3]=((((-1.0)*r10*x867))+(((-0.41)*sj1))+(((-1.0)*py))+(((-1.0)*x858*x860))+(((0.31436)*x874))+(((-1.0)*r11*x861)));
evalcond[4]=(((r21*x866))+(((-1.0)*cj3*r22*x864))+((x862*x863))+x872+((r20*x871))+(((-1.0)*r20*x862*x865))+(((-1.0)*x876)));
evalcond[5]=((((-1.0)*cj3*r12*x864))+((r11*x866))+((r10*x871))+(((-1.0)*r10*x862*x865))+(((-1.0)*x873))+(((-1.0)*x875))+((x862*x870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x877=((1.0)*r21);
CheckValue<IkReal> x878=IKPowWithIntegerCheck(IKsign((((r11*sj4*sj5))+((cj4*r12))+(((-1.0)*cj5*r10*sj4)))),-1);
if(!x878.valid){
continue;
}
CheckValue<IkReal> x879 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x877))+(((-1.0)*r20*sj5)))),IkReal((((r22*sj4))+(((-1.0)*cj4*sj5*x877))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x879.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x878.value)))+(x879.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x880=IKsin(j3);
IkReal x881=IKcos(j3);
IkReal x882=(r02*sj4);
IkReal x883=(cj4*cj5);
IkReal x884=(cj4*sj5);
IkReal x885=(cj5*r01);
IkReal x886=(r00*sj5);
IkReal x887=((1.0)*x881);
IkReal x888=((1.0)*x880);
evalcond[0]=((((-1.0)*x882*x887))+((x880*x886))+((x880*x885))+((r01*x881*x884))+(((-1.0)*r00*x883*x887)));
evalcond[1]=((((-1.0)*cj5*r21*x887))+(((-1.0)*r20*sj5*x887))+(((-1.0)*r20*x883*x888))+((r21*x880*x884))+(((-1.0)*r22*sj4*x888)));
evalcond[2]=(((r11*x880*x884))+(((-1.0)*r12*sj4*x888))+(((-1.0)*r10*sj5*x887))+(((-1.0)*r10*x883*x888))+(((-1.0)*cj5*r11*x887)));
evalcond[3]=((1.0)+(((-1.0)*x886*x887))+(((-1.0)*x882*x888))+(((-1.0)*r00*x883*x888))+((r01*x880*x884))+(((-1.0)*x885*x887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x889=((0.766731707317073)*sj4);
IkReal x890=((0.00085390243902439)*cj5);
IkReal x891=((0.00085390243902439)*sj5);
IkReal x892=((0.766731707317073)*cj4);
if( IKabs(((((-2.4390243902439)*py))+((cj5*r10*x889))+(((-1.0)*r11*x890))+(((-1.0)*r12*x892))+(((-1.0)*r10*x891))+(((-1.0)*r11*sj5*x889)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-1.0)*r21*sj5*x889))+((cj5*r20*x889))+(((-1.0)*r22*x892))+(((-1.0)*r21*x890))+(((-1.0)*r20*x891)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.4390243902439)*py))+((cj5*r10*x889))+(((-1.0)*r11*x890))+(((-1.0)*r12*x892))+(((-1.0)*r10*x891))+(((-1.0)*r11*sj5*x889))))+IKsqr(((((-2.4390243902439)*pz))+(((-1.0)*r21*sj5*x889))+((cj5*r20*x889))+(((-1.0)*r22*x892))+(((-1.0)*r21*x890))+(((-1.0)*r20*x891))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.4390243902439)*py))+((cj5*r10*x889))+(((-1.0)*r11*x890))+(((-1.0)*r12*x892))+(((-1.0)*r10*x891))+(((-1.0)*r11*sj5*x889))), ((((-2.4390243902439)*pz))+(((-1.0)*r21*sj5*x889))+((cj5*r20*x889))+(((-1.0)*r22*x892))+(((-1.0)*r21*x890))+(((-1.0)*r20*x891))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x893=((0.31436)*cj4);
IkReal x894=((0.0003501)*cj5);
IkReal x895=((0.31436)*sj4);
IkReal x896=(cj5*r10);
IkReal x897=(r20*sj5);
IkReal x898=((0.31436)*sj3);
IkReal x899=(r10*sj5);
IkReal x900=(r21*sj5);
IkReal x901=(cj5*r20);
IkReal x902=(r11*sj5);
IkReal x903=((0.41)*(IKcos(j1)));
IkReal x904=(r21*x894);
IkReal x905=((0.0003501)*x897);
IkReal x906=((0.41)*(IKsin(j1)));
IkReal x907=((0.0003501)*x899);
IkReal x908=(r11*x894);
IkReal x909=(x906+x907+x908);
IkReal x910=(pz+x904+x905+x903);
evalcond[0]=(((x895*x902))+(((-1.0)*x895*x896))+py+x909+((r12*x893)));
evalcond[1]=(((x895*x900))+(((-1.0)*x895*x901))+x910+((r22*x893)));
evalcond[2]=(((x898*x899))+((cj5*r11*x898))+((cj3*x893*x902))+(((-1.0)*cj3*x893*x896))+(((-1.0)*cj3*r12*x895))+x910);
evalcond[3]=((((-1.0)*x909))+(((-1.0)*cj3*r22*x895))+((cj3*x893*x900))+((x897*x898))+(((-1.0)*py))+((cj5*r21*x898))+(((-1.0)*cj3*x893*x901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x911=(cj4*r12);
IkReal x912=((1.0)*sj4);
IkReal x913=(cj5*sj1);
IkReal x914=(cj4*r22);
IkReal x915=(r11*sj5);
IkReal x916=(cj1*cj5);
IkReal x917=(r21*sj4*sj5);
if( IKabs(((((-1.0)*cj1*x911))+((r10*sj4*x916))+(((-1.0)*r20*x912*x913))+((sj1*x914))+((sj1*x917))+(((-1.0)*cj1*x912*x915)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x912*x913))+(((-1.0)*r20*x912*x916))+((sj1*sj4*x915))+((sj1*x911))+((cj1*x917))+((cj1*x914)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x911))+((r10*sj4*x916))+(((-1.0)*r20*x912*x913))+((sj1*x914))+((sj1*x917))+(((-1.0)*cj1*x912*x915))))+IKsqr(((((-1.0)*r10*x912*x913))+(((-1.0)*r20*x912*x916))+((sj1*sj4*x915))+((sj1*x911))+((cj1*x917))+((cj1*x914))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x911))+((r10*sj4*x916))+(((-1.0)*r20*x912*x913))+((sj1*x914))+((sj1*x917))+(((-1.0)*cj1*x912*x915))), ((((-1.0)*r10*x912*x913))+(((-1.0)*r20*x912*x916))+((sj1*sj4*x915))+((sj1*x911))+((cj1*x917))+((cj1*x914))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x918=IKcos(j2);
IkReal x919=IKsin(j2);
IkReal x920=((0.31436)*sj1);
IkReal x921=((0.0003501)*cj5);
IkReal x922=(cj3*cj4);
IkReal x923=(r21*sj5);
IkReal x924=((1.0)*sj4);
IkReal x925=((1.0)*cj5);
IkReal x926=(cj5*sj3);
IkReal x927=((0.0003501)*sj5);
IkReal x928=(cj5*sj4);
IkReal x929=((1.0)*cj4);
IkReal x930=(r11*sj5);
IkReal x931=(sj3*sj5);
IkReal x932=(sj1*x918);
IkReal x933=(cj1*x918);
IkReal x934=(cj1*x919);
IkReal x935=(sj1*x919);
IkReal x936=((1.0)*x934);
evalcond[0]=((((-1.0)*r22*x929))+((r20*x928))+x935+x933+(((-1.0)*x923*x924)));
evalcond[1]=((((-1.0)*r12*x929))+(((-1.0)*x924*x930))+((r10*x928))+x932+(((-1.0)*x936)));
evalcond[2]=((((-1.0)*r21*x921))+(((-1.0)*r20*x927))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-1.0)*x919*x920))+(((-0.31436)*x933)));
evalcond[3]=((((-1.0)*r11*x921))+(((-1.0)*r10*x927))+(((0.31436)*x934))+(((-0.41)*sj1))+(((-1.0)*py))+(((-1.0)*x918*x920)));
evalcond[4]=(((r21*x926))+(((-1.0)*cj3*r22*x924))+((x922*x923))+((r20*x931))+x932+(((-1.0)*r20*x922*x925))+(((-1.0)*x936)));
evalcond[5]=((((-1.0)*cj3*r12*x924))+((r10*x931))+(((-1.0)*x933))+(((-1.0)*x935))+((r11*x926))+((x922*x930))+(((-1.0)*r10*x922*x925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x937=((1.0)*sj0);
IkReal x938=(cj4*cj5);
IkReal x939=(cj0*r00);
IkReal x940=((1.0)*cj5);
IkReal x941=(cj4*sj5);
IkReal x942=(cj0*r01);
CheckValue<IkReal> x943 = IKatan2WithCheck(IkReal(((((-1.0)*sj5*x939))+(((-1.0)*r10*sj5*x937))+(((-1.0)*cj5*r11*x937))+(((-1.0)*x940*x942)))),IkReal((((r10*sj0*x938))+(((-1.0)*x941*x942))+((r12*sj0*sj4))+(((-1.0)*r11*x937*x941))+((x938*x939))+((cj0*r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x943.valid){
continue;
}
CheckValue<IkReal> x944=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x940)))),-1);
if(!x944.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x943.value)+(((1.5707963267949)*(x944.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x945=IKsin(j3);
IkReal x946=IKcos(j3);
IkReal x947=((1.0)*cj5);
IkReal x948=(cj4*x945);
IkReal x949=((1.0)*sj5*x946);
IkReal x950=((1.0)*sj4*x945);
evalcond[0]=((((-1.0)*r21*x946*x947))+(((-1.0)*r20*x949))+((r21*sj5*x948))+(((-1.0)*r22*x950))+(((-1.0)*r20*x947*x948)));
evalcond[1]=(((r11*sj5*x948))+(((-1.0)*r11*x946*x947))+cj0+(((-1.0)*r10*x947*x948))+(((-1.0)*r10*x949))+(((-1.0)*r12*x950)));
evalcond[2]=(((r01*sj5*x948))+(((-1.0)*r00*x949))+(((-1.0)*sj0))+(((-1.0)*r00*x947*x948))+(((-1.0)*r01*x946*x947))+(((-1.0)*r02*x950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x951=((0.766731707317073)*sj4);
IkReal x952=((0.00085390243902439)*cj5);
IkReal x953=((0.00085390243902439)*sj5);
IkReal x954=((0.766731707317073)*cj4);
if( IKabs(((((-1.0)*cj5*r10*x951))+((r11*sj5*x951))+((r11*x952))+((r12*x954))+(((2.4390243902439)*py))+((r10*x953)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-1.0)*r21*x952))+(((-1.0)*r20*x953))+((cj5*r20*x951))+(((-1.0)*r22*x954))+(((-1.0)*r21*sj5*x951)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r10*x951))+((r11*sj5*x951))+((r11*x952))+((r12*x954))+(((2.4390243902439)*py))+((r10*x953))))+IKsqr(((((-2.4390243902439)*pz))+(((-1.0)*r21*x952))+(((-1.0)*r20*x953))+((cj5*r20*x951))+(((-1.0)*r22*x954))+(((-1.0)*r21*sj5*x951))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj5*r10*x951))+((r11*sj5*x951))+((r11*x952))+((r12*x954))+(((2.4390243902439)*py))+((r10*x953))), ((((-2.4390243902439)*pz))+(((-1.0)*r21*x952))+(((-1.0)*r20*x953))+((cj5*r20*x951))+(((-1.0)*r22*x954))+(((-1.0)*r21*sj5*x951))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x955=((1.0)*py);
IkReal x956=((0.31436)*cj4);
IkReal x957=((0.0003501)*cj5);
IkReal x958=((0.31436)*sj4);
IkReal x959=(cj5*r10);
IkReal x960=(r20*sj5);
IkReal x961=((0.31436)*sj3);
IkReal x962=(r10*sj5);
IkReal x963=(r21*sj5);
IkReal x964=(cj5*r20);
IkReal x965=(r11*sj5);
IkReal x966=((0.41)*(IKsin(j1)));
IkReal x967=((0.0003501)*x962);
IkReal x968=(r11*x957);
IkReal x969=((0.41)*(IKcos(j1)));
IkReal x970=(r21*x957);
IkReal x971=((0.0003501)*x960);
IkReal x972=(x967+x968+x955);
IkReal x973=(x971+x970+x969);
evalcond[0]=(((r22*x956))+(((-1.0)*x958*x964))+pz+((x958*x963))+x973);
evalcond[1]=((((-1.0)*x958*x965))+((x958*x959))+(((-1.0)*r12*x956))+x966+(((-1.0)*x972)));
evalcond[2]=((((-1.0)*cj3*x956*x963))+(((-1.0)*x960*x961))+((cj3*x956*x964))+((cj3*r22*x958))+(((-1.0)*cj5*r21*x961))+x966+(((-1.0)*x972)));
evalcond[3]=(((x961*x962))+((cj5*r11*x961))+(((-1.0)*pz))+((cj3*x956*x965))+(((-1.0)*cj3*x956*x959))+(((-1.0)*x973))+(((-1.0)*cj3*r12*x958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x974=((1.0)*sj1);
IkReal x975=(cj4*r12);
IkReal x976=(cj5*sj4);
IkReal x977=((1.0)*cj1);
IkReal x978=(cj4*r22);
IkReal x979=(r21*sj4*sj5);
IkReal x980=(r11*sj4*sj5);
if( IKabs((((cj1*x980))+((cj1*x975))+((sj1*x978))+((sj1*x979))+(((-1.0)*r10*x976*x977))+(((-1.0)*r20*x974*x976)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x979))+((cj1*x978))+(((-1.0)*r20*x976*x977))+(((-1.0)*x974*x980))+((r10*sj1*x976))+(((-1.0)*x974*x975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x980))+((cj1*x975))+((sj1*x978))+((sj1*x979))+(((-1.0)*r10*x976*x977))+(((-1.0)*r20*x974*x976))))+IKsqr((((cj1*x979))+((cj1*x978))+(((-1.0)*r20*x976*x977))+(((-1.0)*x974*x980))+((r10*sj1*x976))+(((-1.0)*x974*x975))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x980))+((cj1*x975))+((sj1*x978))+((sj1*x979))+(((-1.0)*r10*x976*x977))+(((-1.0)*r20*x974*x976))), (((cj1*x979))+((cj1*x978))+(((-1.0)*r20*x976*x977))+(((-1.0)*x974*x980))+((r10*sj1*x976))+(((-1.0)*x974*x975))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x981=IKsin(j2);
IkReal x982=IKcos(j2);
IkReal x983=((0.0003501)*cj5);
IkReal x984=(cj3*cj4);
IkReal x985=(r21*sj5);
IkReal x986=((1.0)*sj4);
IkReal x987=((1.0)*cj5);
IkReal x988=(cj5*sj3);
IkReal x989=((0.0003501)*sj5);
IkReal x990=(cj5*sj4);
IkReal x991=((1.0)*cj4);
IkReal x992=(sj3*sj5);
IkReal x993=(r11*sj5);
IkReal x994=(cj1*x982);
IkReal x995=(sj1*x981);
IkReal x996=(sj1*x982);
IkReal x997=(cj1*x981);
IkReal x998=(x995+x994);
evalcond[0]=((((-1.0)*r22*x991))+((r20*x990))+x998+(((-1.0)*x985*x986)));
evalcond[1]=((((-1.0)*x996))+(((-1.0)*r12*x991))+((r10*x990))+x997+(((-1.0)*x986*x993)));
evalcond[2]=((((-1.0)*r20*x989))+(((-1.0)*r21*x983))+(((-0.31436)*x995))+(((-0.31436)*x994))+(((-1.0)*pz))+(((-0.41)*cj1)));
evalcond[3]=((((-1.0)*r10*x989))+(((0.31436)*x996))+(((0.41)*sj1))+(((-0.31436)*x997))+(((-1.0)*py))+(((-1.0)*r11*x983)));
evalcond[4]=(((r10*x992))+(((-1.0)*cj3*r12*x986))+((r11*x988))+x998+(((-1.0)*r10*x984*x987))+((x984*x993)));
evalcond[5]=((((-1.0)*x997))+(((-1.0)*cj3*r22*x986))+((r20*x992))+(((-1.0)*r20*x984*x987))+((r21*x988))+((x984*x985))+x996);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x999=((0.766731707317073)*sj4);
IkReal x1000=((0.00085390243902439)*cj5);
IkReal x1001=((0.00085390243902439)*sj5);
IkReal x1002=((0.766731707317073)*cj4);
if( IKabs(((((-2.4390243902439)*py))+(((-1.0)*r10*x1001))+(((-1.0)*r11*sj5*x999))+((cj5*r10*x999))+(((-1.0)*r12*x1002))+(((-1.0)*r11*x1000)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-1.0)*r20*x1001))+(((-1.0)*r21*x1000))+(((-1.0)*r21*sj5*x999))+(((-1.0)*r22*x1002))+((cj5*r20*x999)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.4390243902439)*py))+(((-1.0)*r10*x1001))+(((-1.0)*r11*sj5*x999))+((cj5*r10*x999))+(((-1.0)*r12*x1002))+(((-1.0)*r11*x1000))))+IKsqr(((((-2.4390243902439)*pz))+(((-1.0)*r20*x1001))+(((-1.0)*r21*x1000))+(((-1.0)*r21*sj5*x999))+(((-1.0)*r22*x1002))+((cj5*r20*x999))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.4390243902439)*py))+(((-1.0)*r10*x1001))+(((-1.0)*r11*sj5*x999))+((cj5*r10*x999))+(((-1.0)*r12*x1002))+(((-1.0)*r11*x1000))), ((((-2.4390243902439)*pz))+(((-1.0)*r20*x1001))+(((-1.0)*r21*x1000))+(((-1.0)*r21*sj5*x999))+(((-1.0)*r22*x1002))+((cj5*r20*x999))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1003=((0.31436)*cj4);
IkReal x1004=((0.0003501)*cj5);
IkReal x1005=((0.31436)*sj4);
IkReal x1006=(cj5*r10);
IkReal x1007=(r20*sj5);
IkReal x1008=((0.31436)*sj3);
IkReal x1009=(r10*sj5);
IkReal x1010=(r21*sj5);
IkReal x1011=(cj5*r20);
IkReal x1012=(r11*sj5);
IkReal x1013=((0.41)*(IKcos(j1)));
IkReal x1014=(r21*x1004);
IkReal x1015=((0.0003501)*x1007);
IkReal x1016=((0.41)*(IKsin(j1)));
IkReal x1017=((0.0003501)*x1009);
IkReal x1018=(r11*x1004);
IkReal x1019=(x1018+x1016+x1017);
IkReal x1020=(x1014+x1015+x1013+pz);
evalcond[0]=(x1019+(((-1.0)*x1005*x1006))+((x1005*x1012))+py+((r12*x1003)));
evalcond[1]=(x1020+(((-1.0)*x1005*x1011))+((x1005*x1010))+((r22*x1003)));
evalcond[2]=(((x1008*x1009))+(((-1.0)*cj3*r12*x1005))+x1020+((cj3*x1003*x1012))+(((-1.0)*cj3*x1003*x1006))+((cj5*r11*x1008)));
evalcond[3]=((((-1.0)*cj3*r22*x1005))+(((-1.0)*cj3*x1003*x1011))+((cj3*x1003*x1010))+(((-1.0)*x1019))+(((-1.0)*py))+((cj5*r21*x1008))+((x1007*x1008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1021=(cj4*r12);
IkReal x1022=((1.0)*sj4);
IkReal x1023=(cj5*sj1);
IkReal x1024=(cj4*r22);
IkReal x1025=(r11*sj5);
IkReal x1026=(cj1*cj5);
IkReal x1027=(r21*sj4*sj5);
if( IKabs((((sj1*x1027))+((sj1*x1024))+(((-1.0)*cj1*x1021))+(((-1.0)*r20*x1022*x1023))+(((-1.0)*cj1*x1022*x1025))+((r10*sj4*x1026)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1021))+(((-1.0)*r20*x1022*x1026))+((sj1*sj4*x1025))+((cj1*x1024))+((cj1*x1027))+(((-1.0)*r10*x1022*x1023)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1027))+((sj1*x1024))+(((-1.0)*cj1*x1021))+(((-1.0)*r20*x1022*x1023))+(((-1.0)*cj1*x1022*x1025))+((r10*sj4*x1026))))+IKsqr((((sj1*x1021))+(((-1.0)*r20*x1022*x1026))+((sj1*sj4*x1025))+((cj1*x1024))+((cj1*x1027))+(((-1.0)*r10*x1022*x1023))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1027))+((sj1*x1024))+(((-1.0)*cj1*x1021))+(((-1.0)*r20*x1022*x1023))+(((-1.0)*cj1*x1022*x1025))+((r10*sj4*x1026))), (((sj1*x1021))+(((-1.0)*r20*x1022*x1026))+((sj1*sj4*x1025))+((cj1*x1024))+((cj1*x1027))+(((-1.0)*r10*x1022*x1023))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1028=IKcos(j2);
IkReal x1029=IKsin(j2);
IkReal x1030=((0.31436)*sj1);
IkReal x1031=((0.0003501)*cj5);
IkReal x1032=(cj3*cj4);
IkReal x1033=(r21*sj5);
IkReal x1034=((1.0)*sj4);
IkReal x1035=((1.0)*cj5);
IkReal x1036=(cj5*sj3);
IkReal x1037=((0.0003501)*sj5);
IkReal x1038=(cj5*sj4);
IkReal x1039=((1.0)*cj4);
IkReal x1040=(r11*sj5);
IkReal x1041=(sj3*sj5);
IkReal x1042=(sj1*x1028);
IkReal x1043=(cj1*x1028);
IkReal x1044=(cj1*x1029);
IkReal x1045=(sj1*x1029);
IkReal x1046=((1.0)*x1044);
evalcond[0]=((((-1.0)*x1033*x1034))+x1043+x1045+((r20*x1038))+(((-1.0)*r22*x1039)));
evalcond[1]=(((r10*x1038))+x1042+(((-1.0)*r12*x1039))+(((-1.0)*x1034*x1040))+(((-1.0)*x1046)));
evalcond[2]=((((-1.0)*x1029*x1030))+(((-1.0)*r21*x1031))+(((-1.0)*r20*x1037))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-0.31436)*x1043)));
evalcond[3]=((((-1.0)*r10*x1037))+(((-1.0)*x1028*x1030))+(((0.31436)*x1044))+(((-0.41)*sj1))+(((-1.0)*py))+(((-1.0)*r11*x1031)));
evalcond[4]=((((-1.0)*r20*x1032*x1035))+x1042+(((-1.0)*cj3*r22*x1034))+((r20*x1041))+((r21*x1036))+((x1032*x1033))+(((-1.0)*x1046)));
evalcond[5]=((((-1.0)*cj3*r12*x1034))+((r10*x1041))+(((-1.0)*r10*x1032*x1035))+(((-1.0)*x1045))+(((-1.0)*x1043))+((r11*x1036))+((x1032*x1040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1047=((0.00085390243902439)*cj5);
IkReal x1048=((0.00085390243902439)*sj5);
IkReal x1049=((0.766731707317073)*cj4);
IkReal x1050=((0.766731707317073)*sj4*sj5);
IkReal x1051=((0.766731707317073)*cj5*sj4);
if( IKabs(((((-1.0)*r00*x1051))+((r02*x1049))+((r01*x1047))+((r00*x1048))+((r01*x1050))+(((2.4390243902439)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-1.0)*r22*x1049))+((r20*x1051))+(((-1.0)*r21*x1047))+(((-1.0)*r21*x1050))+(((-1.0)*r20*x1048)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1051))+((r02*x1049))+((r01*x1047))+((r00*x1048))+((r01*x1050))+(((2.4390243902439)*px))))+IKsqr(((((-2.4390243902439)*pz))+(((-1.0)*r22*x1049))+((r20*x1051))+(((-1.0)*r21*x1047))+(((-1.0)*r21*x1050))+(((-1.0)*r20*x1048))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x1051))+((r02*x1049))+((r01*x1047))+((r00*x1048))+((r01*x1050))+(((2.4390243902439)*px))), ((((-2.4390243902439)*pz))+(((-1.0)*r22*x1049))+((r20*x1051))+(((-1.0)*r21*x1047))+(((-1.0)*r21*x1050))+(((-1.0)*r20*x1048))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1052=((1.0)*px);
IkReal x1053=((0.31436)*cj4);
IkReal x1054=(cj5*r21);
IkReal x1055=(cj3*sj5);
IkReal x1056=(r20*sj5);
IkReal x1057=((0.31436)*sj3);
IkReal x1058=(r00*sj5);
IkReal x1059=(cj5*r00);
IkReal x1060=((0.31436)*sj4);
IkReal x1061=(cj5*r20);
IkReal x1062=(cj5*r01);
IkReal x1063=((0.41)*(IKsin(j1)));
IkReal x1064=((0.0003501)*x1058);
IkReal x1065=((0.0003501)*x1062);
IkReal x1066=((0.41)*(IKcos(j1)));
IkReal x1067=((0.0003501)*x1054);
IkReal x1068=((0.0003501)*x1056);
IkReal x1069=(cj3*x1060);
IkReal x1070=(x1052+x1065+x1064);
IkReal x1071=(x1068+x1067+x1066);
evalcond[0]=((((-1.0)*x1060*x1061))+x1071+pz+((r21*sj5*x1060))+((r22*x1053)));
evalcond[1]=((((-1.0)*r02*x1053))+x1063+(((-1.0)*r01*sj5*x1060))+((x1059*x1060))+(((-1.0)*x1070)));
evalcond[2]=(x1063+(((-1.0)*x1054*x1057))+((cj3*x1053*x1061))+(((-1.0)*x1056*x1057))+((r22*x1069))+(((-1.0)*x1070))+(((-1.0)*r21*x1053*x1055)));
evalcond[3]=((((-1.0)*r02*x1069))+((x1057*x1058))+(((-1.0)*cj3*x1053*x1059))+(((-1.0)*pz))+((x1057*x1062))+((r01*x1053*x1055))+(((-1.0)*x1071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1072=(cj1*sj4);
IkReal x1073=(r21*sj5);
IkReal x1074=((1.0)*cj5);
IkReal x1075=(r01*sj5);
IkReal x1076=(sj1*sj4);
IkReal x1077=(cj4*r22);
IkReal x1078=(cj4*r02);
if( IKabs((((cj1*x1078))+((x1073*x1076))+((sj1*x1077))+(((-1.0)*r00*x1072*x1074))+((x1072*x1075))+(((-1.0)*r20*x1074*x1076)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1072*x1074))+((cj1*x1077))+((cj5*r00*x1076))+((x1072*x1073))+(((-1.0)*x1075*x1076))+(((-1.0)*sj1*x1078)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1078))+((x1073*x1076))+((sj1*x1077))+(((-1.0)*r00*x1072*x1074))+((x1072*x1075))+(((-1.0)*r20*x1074*x1076))))+IKsqr(((((-1.0)*r20*x1072*x1074))+((cj1*x1077))+((cj5*r00*x1076))+((x1072*x1073))+(((-1.0)*x1075*x1076))+(((-1.0)*sj1*x1078))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1078))+((x1073*x1076))+((sj1*x1077))+(((-1.0)*r00*x1072*x1074))+((x1072*x1075))+(((-1.0)*r20*x1074*x1076))), ((((-1.0)*r20*x1072*x1074))+((cj1*x1077))+((cj5*r00*x1076))+((x1072*x1073))+(((-1.0)*x1075*x1076))+(((-1.0)*sj1*x1078))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1079=IKsin(j2);
IkReal x1080=IKcos(j2);
IkReal x1081=((1.0)*cj3);
IkReal x1082=((0.0003501)*cj5);
IkReal x1083=(cj5*r00);
IkReal x1084=(r00*sj5);
IkReal x1085=(cj5*sj3);
IkReal x1086=(cj5*r20);
IkReal x1087=(r20*sj5);
IkReal x1088=((1.0)*cj4);
IkReal x1089=(cj1*x1080);
IkReal x1090=(sj1*x1079);
IkReal x1091=(sj1*x1080);
IkReal x1092=(cj3*cj4*sj5);
IkReal x1093=((1.0)*sj4*sj5);
IkReal x1094=(cj1*x1079);
IkReal x1095=(x1090+x1089);
evalcond[0]=(x1095+((sj4*x1086))+(((-1.0)*r21*x1093))+(((-1.0)*r22*x1088)));
evalcond[1]=(x1094+(((-1.0)*x1091))+(((-1.0)*r02*x1088))+((sj4*x1083))+(((-1.0)*r01*x1093)));
evalcond[2]=((((-1.0)*r21*x1082))+(((-0.0003501)*x1087))+(((-1.0)*pz))+(((-0.31436)*x1090))+(((-0.41)*cj1))+(((-0.31436)*x1089)));
evalcond[3]=((((-0.0003501)*x1084))+(((0.41)*sj1))+(((-1.0)*px))+(((-1.0)*r01*x1082))+(((-0.31436)*x1094))+(((0.31436)*x1091)));
evalcond[4]=(x1095+((r01*x1092))+((sj3*x1084))+((r01*x1085))+(((-1.0)*r02*sj4*x1081))+(((-1.0)*cj4*x1081*x1083)));
evalcond[5]=(x1091+((sj3*x1087))+((r21*x1092))+(((-1.0)*x1094))+(((-1.0)*r22*sj4*x1081))+(((-1.0)*cj4*x1081*x1086))+((r21*x1085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1096=((0.00085390243902439)*cj5);
IkReal x1097=((0.00085390243902439)*sj5);
IkReal x1098=((0.766731707317073)*cj4);
IkReal x1099=((0.766731707317073)*sj4*sj5);
IkReal x1100=((0.766731707317073)*cj5*sj4);
if( IKabs(((((-2.4390243902439)*px))+(((-1.0)*r02*x1098))+((r00*x1100))+(((-1.0)*r01*x1099))+(((-1.0)*r01*x1096))+(((-1.0)*r00*x1097)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+((r20*x1100))+(((-1.0)*r21*x1099))+(((-1.0)*r21*x1096))+(((-1.0)*r20*x1097))+(((-1.0)*r22*x1098)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.4390243902439)*px))+(((-1.0)*r02*x1098))+((r00*x1100))+(((-1.0)*r01*x1099))+(((-1.0)*r01*x1096))+(((-1.0)*r00*x1097))))+IKsqr(((((-2.4390243902439)*pz))+((r20*x1100))+(((-1.0)*r21*x1099))+(((-1.0)*r21*x1096))+(((-1.0)*r20*x1097))+(((-1.0)*r22*x1098))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.4390243902439)*px))+(((-1.0)*r02*x1098))+((r00*x1100))+(((-1.0)*r01*x1099))+(((-1.0)*r01*x1096))+(((-1.0)*r00*x1097))), ((((-2.4390243902439)*pz))+((r20*x1100))+(((-1.0)*r21*x1099))+(((-1.0)*r21*x1096))+(((-1.0)*r20*x1097))+(((-1.0)*r22*x1098))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1101=((0.31436)*cj4);
IkReal x1102=(cj5*r21);
IkReal x1103=(cj3*sj5);
IkReal x1104=(r20*sj5);
IkReal x1105=((0.31436)*sj3);
IkReal x1106=(r00*sj5);
IkReal x1107=(cj5*r00);
IkReal x1108=((0.31436)*sj4);
IkReal x1109=(cj5*r20);
IkReal x1110=(cj5*r01);
IkReal x1111=((0.41)*(IKcos(j1)));
IkReal x1112=((0.0003501)*x1102);
IkReal x1113=((0.0003501)*x1104);
IkReal x1114=((0.41)*(IKsin(j1)));
IkReal x1115=((0.0003501)*x1106);
IkReal x1116=((0.0003501)*x1110);
IkReal x1117=(cj3*x1108);
IkReal x1118=(x1115+x1114+x1116);
IkReal x1119=(x1111+x1113+x1112+pz);
evalcond[0]=(((r02*x1101))+x1118+((r01*sj5*x1108))+(((-1.0)*x1107*x1108))+px);
evalcond[1]=(x1119+((r21*sj5*x1108))+(((-1.0)*x1108*x1109))+((r22*x1101)));
evalcond[2]=(x1119+((x1105*x1106))+((x1105*x1110))+((r01*x1101*x1103))+(((-1.0)*cj3*x1101*x1107))+(((-1.0)*r02*x1117)));
evalcond[3]=(((x1102*x1105))+(((-1.0)*r22*x1117))+((r21*x1101*x1103))+(((-1.0)*px))+((x1104*x1105))+(((-1.0)*cj3*x1101*x1109))+(((-1.0)*x1118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1120=(sj4*sj5);
IkReal x1121=(cj4*sj1);
IkReal x1122=((1.0)*cj1);
IkReal x1123=(cj5*sj4);
IkReal x1124=((1.0)*sj1);
if( IKabs((((r21*sj1*x1120))+(((-1.0)*r20*x1123*x1124))+((r22*x1121))+(((-1.0)*r01*x1120*x1122))+(((-1.0)*cj4*r02*x1122))+((cj1*r00*x1123)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1122*x1123))+((cj1*cj4*r22))+(((-1.0)*r00*x1123*x1124))+((r01*sj1*x1120))+((cj1*r21*x1120))+((r02*x1121)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x1120))+(((-1.0)*r20*x1123*x1124))+((r22*x1121))+(((-1.0)*r01*x1120*x1122))+(((-1.0)*cj4*r02*x1122))+((cj1*r00*x1123))))+IKsqr(((((-1.0)*r20*x1122*x1123))+((cj1*cj4*r22))+(((-1.0)*r00*x1123*x1124))+((r01*sj1*x1120))+((cj1*r21*x1120))+((r02*x1121))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x1120))+(((-1.0)*r20*x1123*x1124))+((r22*x1121))+(((-1.0)*r01*x1120*x1122))+(((-1.0)*cj4*r02*x1122))+((cj1*r00*x1123))), ((((-1.0)*r20*x1122*x1123))+((cj1*cj4*r22))+(((-1.0)*r00*x1123*x1124))+((r01*sj1*x1120))+((cj1*r21*x1120))+((r02*x1121))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1125=IKcos(j2);
IkReal x1126=IKsin(j2);
IkReal x1127=((0.31436)*sj1);
IkReal x1128=((1.0)*cj3);
IkReal x1129=((0.0003501)*cj5);
IkReal x1130=(cj5*r00);
IkReal x1131=(r00*sj5);
IkReal x1132=(cj5*sj3);
IkReal x1133=(cj5*r20);
IkReal x1134=(r20*sj5);
IkReal x1135=((1.0)*cj4);
IkReal x1136=(sj1*x1125);
IkReal x1137=(cj1*x1125);
IkReal x1138=(cj3*cj4*sj5);
IkReal x1139=((1.0)*sj4*sj5);
IkReal x1140=(cj1*x1126);
IkReal x1141=(sj1*x1126);
IkReal x1142=((1.0)*x1140);
evalcond[0]=(x1141+x1137+((sj4*x1133))+(((-1.0)*r22*x1135))+(((-1.0)*r21*x1139)));
evalcond[1]=(x1136+((sj4*x1130))+(((-1.0)*x1142))+(((-1.0)*r02*x1135))+(((-1.0)*r01*x1139)));
evalcond[2]=((((-1.0)*x1126*x1127))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-1.0)*r21*x1129))+(((-0.31436)*x1137))+(((-0.0003501)*x1134)));
evalcond[3]=((((-0.41)*sj1))+(((-1.0)*px))+(((0.31436)*x1140))+(((-1.0)*x1125*x1127))+(((-1.0)*r01*x1129))+(((-0.0003501)*x1131)));
evalcond[4]=(x1136+(((-1.0)*r22*sj4*x1128))+(((-1.0)*x1142))+(((-1.0)*cj4*x1128*x1133))+((r21*x1132))+((r21*x1138))+((sj3*x1134)));
evalcond[5]=(((r01*x1132))+((r01*x1138))+(((-1.0)*cj4*x1128*x1130))+(((-1.0)*x1141))+(((-1.0)*x1137))+((sj3*x1131))+(((-1.0)*r02*sj4*x1128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1143=(sj4*sj5);
IkReal x1144=(cj0*r01);
IkReal x1145=(cj0*r00);
IkReal x1146=(cj5*sj4);
CheckValue<IkReal> x1147=IKPowWithIntegerCheck(cj0,-2);
if(!x1147.valid){
continue;
}
if( IKabs(((-2.4390243902439)*(x1147.value)*(((((-0.0003501)*cj5*x1144))+(((-0.31436)*cj0*cj4*r02))+(((0.31436)*x1145*x1146))+(((-0.0003501)*sj5*x1145))+(((-0.31436)*x1143*x1144))+(((0.001)*cj0*sj0))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((0.766731707317073)*r20*x1146))+(((-0.00085390243902439)*cj5*r21))+(((-0.766731707317073)*cj4*r22))+(((-0.766731707317073)*r21*x1143))+(((-0.00085390243902439)*r20*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.4390243902439)*(x1147.value)*(((((-0.0003501)*cj5*x1144))+(((-0.31436)*cj0*cj4*r02))+(((0.31436)*x1145*x1146))+(((-0.0003501)*sj5*x1145))+(((-0.31436)*x1143*x1144))+(((0.001)*cj0*sj0))+(((-1.0)*cj0*px))))))+IKsqr(((((-2.4390243902439)*pz))+(((0.766731707317073)*r20*x1146))+(((-0.00085390243902439)*cj5*r21))+(((-0.766731707317073)*cj4*r22))+(((-0.766731707317073)*r21*x1143))+(((-0.00085390243902439)*r20*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.4390243902439)*(x1147.value)*(((((-0.0003501)*cj5*x1144))+(((-0.31436)*cj0*cj4*r02))+(((0.31436)*x1145*x1146))+(((-0.0003501)*sj5*x1145))+(((-0.31436)*x1143*x1144))+(((0.001)*cj0*sj0))+(((-1.0)*cj0*px))))), ((((-2.4390243902439)*pz))+(((0.766731707317073)*r20*x1146))+(((-0.00085390243902439)*cj5*r21))+(((-0.766731707317073)*cj4*r22))+(((-0.766731707317073)*r21*x1143))+(((-0.00085390243902439)*r20*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1148=IKsin(j1);
IkReal x1149=IKcos(j1);
IkReal x1150=sj0*sj0;
IkReal x1151=cj0*cj0;
IkReal x1152=((0.31436)*cj4);
IkReal x1153=(r01*sj5);
IkReal x1154=((0.31436)*sj4);
IkReal x1155=(cj5*r10);
IkReal x1156=((1.0)*py);
IkReal x1157=(cj0*r20);
IkReal x1158=(cj3*cj5);
IkReal x1159=((0.31436)*sj3);
IkReal x1160=(cj5*sj0);
IkReal x1161=((1.0)*px);
IkReal x1162=((0.0003501)*sj5);
IkReal x1163=((0.0003501)*r11);
IkReal x1164=(r20*sj0);
IkReal x1165=(cj0*cj3);
IkReal x1166=(cj0*sj0);
IkReal x1167=(cj5*r01);
IkReal x1168=(cj0*r00);
IkReal x1169=(cj0*cj5);
IkReal x1170=(r11*sj5);
IkReal x1171=(r21*sj5);
IkReal x1172=(cj3*sj0);
IkReal x1173=((1.0)*pz);
IkReal x1174=((0.001)*x1166);
IkReal x1175=((0.0003501)*cj5*r21);
IkReal x1176=((0.41)*x1149);
IkReal x1177=(sj0*x1162);
IkReal x1178=((0.41)*x1148);
IkReal x1179=(x1166*x1178);
evalcond[0]=(x1176+x1175+((r22*x1152))+((r20*x1162))+((x1154*x1171))+pz+(((-1.0)*cj5*r20*x1154)));
evalcond[1]=((((-1.0)*sj0*x1156))+(((-1.0)*sj0*x1154*x1170))+(((-1.0)*x1174))+(((-1.0)*x1160*x1163))+((x1150*x1178))+((sj0*x1154*x1155))+(((-1.0)*r12*sj0*x1152))+(((-1.0)*r10*x1177)));
evalcond[2]=(x1174+(((-1.0)*cj0*x1161))+(((-1.0)*x1162*x1168))+(((-1.0)*cj0*x1153*x1154))+(((-0.0003501)*cj0*x1167))+((cj5*x1154*x1168))+(((-1.0)*cj0*r02*x1152))+((x1151*x1178)));
evalcond[3]=(((r10*sj5*x1159))+((cj5*r11*x1159))+(((-0.0003501)*r21*x1160))+(((-1.0)*cj3*r12*x1154))+(((-1.0)*cj3*x1152*x1155))+(((-1.0)*x1162*x1164))+(((-1.0)*sj0*x1176))+(((-1.0)*sj0*x1173))+((cj3*x1152*x1170)));
evalcond[4]=(((cj3*x1152*x1153))+((x1159*x1167))+(((-1.0)*cj0*x1176))+(((-1.0)*cj0*x1173))+(((-0.0003501)*r21*x1169))+(((-1.0)*cj3*r02*x1154))+((r00*sj5*x1159))+(((-1.0)*r00*x1152*x1158))+(((-1.0)*x1157*x1162)));
evalcond[5]=((((-1.0)*r10*x1162))+((sj0*x1178))+(((-1.0)*x1156))+(((-0.001)*cj0))+(((-1.0)*x1152*x1171*x1172))+(((-1.0)*r21*x1159*x1160))+(((-1.0)*sj5*x1159*x1164))+((x1152*x1158*x1164))+((r22*x1154*x1172))+(((-1.0)*cj5*x1163)));
evalcond[6]=(((cj0*x1178))+(((-1.0)*x1152*x1165*x1171))+(((0.001)*sj0))+(((-0.0003501)*x1167))+(((-1.0)*r21*x1159*x1169))+(((-1.0)*r00*x1162))+(((-1.0)*sj5*x1157*x1159))+(((-1.0)*x1161))+((r22*x1154*x1165))+((x1152*x1157*x1158)));
evalcond[7]=((((-0.0003501)*r01*x1160))+x1179+(((-1.0)*cj0*x1154*x1170))+(((-1.0)*sj0*x1161))+(((0.001)*x1150))+(((-1.0)*cj0*r12*x1152))+((cj0*x1154*x1155))+(((-1.0)*r00*x1177)));
evalcond[8]=((((-1.0)*sj0*x1153*x1154))+x1179+(((-1.0)*r02*sj0*x1152))+(((-0.001)*x1151))+(((-1.0)*x1163*x1169))+((r00*x1154*x1160))+(((-1.0)*cj0*x1156))+(((-1.0)*cj0*r10*x1162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1180=(cj1*sj4);
IkReal x1181=(r21*sj5);
IkReal x1182=((1.0)*cj5);
IkReal x1183=(r01*sj5);
IkReal x1184=(sj1*sj4);
IkReal x1185=(cj4*r22);
IkReal x1186=(cj4*r02);
if( IKabs(((((-1.0)*r00*x1180*x1182))+((x1180*x1183))+((sj1*x1185))+((x1181*x1184))+(((-1.0)*r20*x1182*x1184))+((cj1*x1186)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1180*x1181))+(((-1.0)*x1183*x1184))+(((-1.0)*r20*x1180*x1182))+((cj5*r00*x1184))+((cj1*x1185))+(((-1.0)*sj1*x1186)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1180*x1182))+((x1180*x1183))+((sj1*x1185))+((x1181*x1184))+(((-1.0)*r20*x1182*x1184))+((cj1*x1186))))+IKsqr((((x1180*x1181))+(((-1.0)*x1183*x1184))+(((-1.0)*r20*x1180*x1182))+((cj5*r00*x1184))+((cj1*x1185))+(((-1.0)*sj1*x1186))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x1180*x1182))+((x1180*x1183))+((sj1*x1185))+((x1181*x1184))+(((-1.0)*r20*x1182*x1184))+((cj1*x1186))), (((x1180*x1181))+(((-1.0)*x1183*x1184))+(((-1.0)*r20*x1180*x1182))+((cj5*r00*x1184))+((cj1*x1185))+(((-1.0)*sj1*x1186))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1187=IKsin(j2);
IkReal x1188=IKcos(j2);
IkReal x1189=((1.0)*cj3);
IkReal x1190=((0.0003501)*cj5);
IkReal x1191=(cj5*r00);
IkReal x1192=(r00*sj5);
IkReal x1193=(cj5*sj3);
IkReal x1194=(cj5*r20);
IkReal x1195=(r20*sj5);
IkReal x1196=((1.0)*cj4);
IkReal x1197=(cj1*x1188);
IkReal x1198=(sj1*x1187);
IkReal x1199=(sj1*x1188);
IkReal x1200=(cj3*cj4*sj5);
IkReal x1201=((1.0)*sj4*sj5);
IkReal x1202=(cj1*x1187);
IkReal x1203=(x1198+x1197);
evalcond[0]=(x1203+((sj4*x1194))+(((-1.0)*r22*x1196))+(((-1.0)*r21*x1201)));
evalcond[1]=(x1202+((sj4*x1191))+(((-1.0)*r01*x1201))+(((-1.0)*x1199))+(((-1.0)*r02*x1196)));
evalcond[2]=((((-0.31436)*x1198))+(((-0.31436)*x1197))+(((-0.0003501)*x1195))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-1.0)*r21*x1190)));
evalcond[3]=((((-0.0003501)*x1192))+(((-0.31436)*x1202))+(((0.41)*sj1))+(((-1.0)*px))+(((0.31436)*x1199))+(((-1.0)*r01*x1190)));
evalcond[4]=(x1203+((r01*x1193))+(((-1.0)*cj4*x1189*x1191))+((sj3*x1192))+((r01*x1200))+(((-1.0)*r02*sj4*x1189)));
evalcond[5]=(x1199+(((-1.0)*cj4*x1189*x1194))+(((-1.0)*r22*sj4*x1189))+((r21*x1200))+((r21*x1193))+(((-1.0)*x1202))+((sj3*x1195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1204=(sj4*sj5);
IkReal x1205=(cj4*sj1);
IkReal x1206=((1.0)*cj1);
IkReal x1207=(cj5*sj4);
IkReal x1208=((1.0)*sj1);
if( IKabs(((((-1.0)*r01*x1204*x1206))+(((-1.0)*cj4*r02*x1206))+((r21*sj1*x1204))+((cj1*r00*x1207))+(((-1.0)*r20*x1207*x1208))+((r22*x1205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((r01*sj1*x1204))+(((-1.0)*r00*x1207*x1208))+((cj1*r21*x1204))+(((-1.0)*r20*x1206*x1207))+((r02*x1205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1204*x1206))+(((-1.0)*cj4*r02*x1206))+((r21*sj1*x1204))+((cj1*r00*x1207))+(((-1.0)*r20*x1207*x1208))+((r22*x1205))))+IKsqr((((cj1*cj4*r22))+((r01*sj1*x1204))+(((-1.0)*r00*x1207*x1208))+((cj1*r21*x1204))+(((-1.0)*r20*x1206*x1207))+((r02*x1205))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x1204*x1206))+(((-1.0)*cj4*r02*x1206))+((r21*sj1*x1204))+((cj1*r00*x1207))+(((-1.0)*r20*x1207*x1208))+((r22*x1205))), (((cj1*cj4*r22))+((r01*sj1*x1204))+(((-1.0)*r00*x1207*x1208))+((cj1*r21*x1204))+(((-1.0)*r20*x1206*x1207))+((r02*x1205))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1209=IKcos(j2);
IkReal x1210=IKsin(j2);
IkReal x1211=((0.31436)*sj1);
IkReal x1212=((1.0)*cj3);
IkReal x1213=((0.0003501)*cj5);
IkReal x1214=(cj5*r00);
IkReal x1215=(r00*sj5);
IkReal x1216=(cj5*sj3);
IkReal x1217=(cj5*r20);
IkReal x1218=(r20*sj5);
IkReal x1219=((1.0)*cj4);
IkReal x1220=(sj1*x1209);
IkReal x1221=(cj1*x1209);
IkReal x1222=(cj3*cj4*sj5);
IkReal x1223=((1.0)*sj4*sj5);
IkReal x1224=(cj1*x1210);
IkReal x1225=(sj1*x1210);
IkReal x1226=((1.0)*x1224);
evalcond[0]=(x1225+x1221+((sj4*x1217))+(((-1.0)*r22*x1219))+(((-1.0)*r21*x1223)));
evalcond[1]=((((-1.0)*r01*x1223))+x1220+(((-1.0)*r02*x1219))+((sj4*x1214))+(((-1.0)*x1226)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x1210*x1211))+(((-0.31436)*x1221))+(((-0.0003501)*x1218))+(((-0.41)*cj1))+(((-1.0)*r21*x1213)));
evalcond[3]=((((-1.0)*x1209*x1211))+(((0.31436)*x1224))+(((-0.41)*sj1))+(((-1.0)*r01*x1213))+(((-1.0)*px))+(((-0.0003501)*x1215)));
evalcond[4]=(x1220+(((-1.0)*cj4*x1212*x1217))+(((-1.0)*x1226))+(((-1.0)*r22*sj4*x1212))+((sj3*x1218))+((r21*x1216))+((r21*x1222)));
evalcond[5]=((((-1.0)*cj4*x1212*x1214))+(((-1.0)*x1221))+(((-1.0)*x1225))+((r01*x1222))+(((-1.0)*r02*sj4*x1212))+((r01*x1216))+((sj3*x1215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1227=((1.0)*sj1);
IkReal x1228=(cj4*r12);
IkReal x1229=(cj5*sj4);
IkReal x1230=((1.0)*cj1);
IkReal x1231=(cj4*r22);
IkReal x1232=(r21*sj4*sj5);
IkReal x1233=(r11*sj4*sj5);
if( IKabs((((sj1*x1232))+((sj1*x1231))+(((-1.0)*r10*x1229*x1230))+((cj1*x1233))+(((-1.0)*r20*x1227*x1229))+((cj1*x1228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1227*x1228))+(((-1.0)*r20*x1229*x1230))+(((-1.0)*x1227*x1233))+((r10*sj1*x1229))+((cj1*x1231))+((cj1*x1232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1232))+((sj1*x1231))+(((-1.0)*r10*x1229*x1230))+((cj1*x1233))+(((-1.0)*r20*x1227*x1229))+((cj1*x1228))))+IKsqr(((((-1.0)*x1227*x1228))+(((-1.0)*r20*x1229*x1230))+(((-1.0)*x1227*x1233))+((r10*sj1*x1229))+((cj1*x1231))+((cj1*x1232))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1232))+((sj1*x1231))+(((-1.0)*r10*x1229*x1230))+((cj1*x1233))+(((-1.0)*r20*x1227*x1229))+((cj1*x1228))), ((((-1.0)*x1227*x1228))+(((-1.0)*r20*x1229*x1230))+(((-1.0)*x1227*x1233))+((r10*sj1*x1229))+((cj1*x1231))+((cj1*x1232))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1234=IKsin(j2);
IkReal x1235=IKcos(j2);
IkReal x1236=((0.0003501)*cj5);
IkReal x1237=(cj3*cj4);
IkReal x1238=(r21*sj5);
IkReal x1239=((1.0)*sj4);
IkReal x1240=((1.0)*cj5);
IkReal x1241=(cj5*sj3);
IkReal x1242=((0.0003501)*sj5);
IkReal x1243=(cj5*sj4);
IkReal x1244=((1.0)*cj4);
IkReal x1245=(sj3*sj5);
IkReal x1246=(r11*sj5);
IkReal x1247=(cj1*x1235);
IkReal x1248=(sj1*x1234);
IkReal x1249=(sj1*x1235);
IkReal x1250=(cj1*x1234);
IkReal x1251=(x1247+x1248);
evalcond[0]=(x1251+(((-1.0)*x1238*x1239))+((r20*x1243))+(((-1.0)*r22*x1244)));
evalcond[1]=((((-1.0)*x1239*x1246))+x1250+(((-1.0)*x1249))+(((-1.0)*r12*x1244))+((r10*x1243)));
evalcond[2]=((((-1.0)*r21*x1236))+(((-1.0)*r20*x1242))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-0.31436)*x1247))+(((-0.31436)*x1248)));
evalcond[3]=((((0.41)*sj1))+(((-0.31436)*x1250))+(((-1.0)*r11*x1236))+(((0.31436)*x1249))+(((-1.0)*py))+(((-1.0)*r10*x1242)));
evalcond[4]=(x1251+(((-1.0)*cj3*r12*x1239))+(((-1.0)*r10*x1237*x1240))+((r11*x1241))+((r10*x1245))+((x1237*x1246)));
evalcond[5]=(x1249+(((-1.0)*cj3*r22*x1239))+((r20*x1245))+((r21*x1241))+((x1237*x1238))+(((-1.0)*x1250))+(((-1.0)*r20*x1237*x1240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1252=(cj4*r12);
IkReal x1253=((1.0)*sj4);
IkReal x1254=(cj5*sj1);
IkReal x1255=(cj4*r22);
IkReal x1256=(r11*sj5);
IkReal x1257=(cj1*cj5);
IkReal x1258=(r21*sj4*sj5);
if( IKabs((((sj1*x1255))+((sj1*x1258))+((r10*sj4*x1257))+(((-1.0)*cj1*x1252))+(((-1.0)*cj1*x1253*x1256))+(((-1.0)*r20*x1253*x1254)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*sj4*x1256))+((sj1*x1252))+(((-1.0)*r10*x1253*x1254))+((cj1*x1258))+((cj1*x1255))+(((-1.0)*r20*x1253*x1257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1255))+((sj1*x1258))+((r10*sj4*x1257))+(((-1.0)*cj1*x1252))+(((-1.0)*cj1*x1253*x1256))+(((-1.0)*r20*x1253*x1254))))+IKsqr((((sj1*sj4*x1256))+((sj1*x1252))+(((-1.0)*r10*x1253*x1254))+((cj1*x1258))+((cj1*x1255))+(((-1.0)*r20*x1253*x1257))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1255))+((sj1*x1258))+((r10*sj4*x1257))+(((-1.0)*cj1*x1252))+(((-1.0)*cj1*x1253*x1256))+(((-1.0)*r20*x1253*x1254))), (((sj1*sj4*x1256))+((sj1*x1252))+(((-1.0)*r10*x1253*x1254))+((cj1*x1258))+((cj1*x1255))+(((-1.0)*r20*x1253*x1257))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1259=IKcos(j2);
IkReal x1260=IKsin(j2);
IkReal x1261=((0.31436)*sj1);
IkReal x1262=((0.0003501)*cj5);
IkReal x1263=(cj3*cj4);
IkReal x1264=(r21*sj5);
IkReal x1265=((1.0)*sj4);
IkReal x1266=((1.0)*cj5);
IkReal x1267=(cj5*sj3);
IkReal x1268=((0.0003501)*sj5);
IkReal x1269=(cj5*sj4);
IkReal x1270=((1.0)*cj4);
IkReal x1271=(r11*sj5);
IkReal x1272=(sj3*sj5);
IkReal x1273=(sj1*x1259);
IkReal x1274=(cj1*x1259);
IkReal x1275=(cj1*x1260);
IkReal x1276=(sj1*x1260);
IkReal x1277=((1.0)*x1275);
evalcond[0]=((((-1.0)*x1264*x1265))+x1274+x1276+(((-1.0)*r22*x1270))+((r20*x1269)));
evalcond[1]=(x1273+(((-1.0)*x1277))+(((-1.0)*r12*x1270))+((r10*x1269))+(((-1.0)*x1265*x1271)));
evalcond[2]=((((-1.0)*r21*x1262))+(((-1.0)*x1260*x1261))+(((-0.31436)*x1274))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-1.0)*r20*x1268)));
evalcond[3]=((((-1.0)*r10*x1268))+(((-1.0)*r11*x1262))+(((0.31436)*x1275))+(((-0.41)*sj1))+(((-1.0)*py))+(((-1.0)*x1259*x1261)));
evalcond[4]=(x1273+(((-1.0)*r20*x1263*x1266))+(((-1.0)*x1277))+((r21*x1267))+(((-1.0)*cj3*r22*x1265))+((x1263*x1264))+((r20*x1272)));
evalcond[5]=(((r11*x1267))+((r10*x1272))+((x1263*x1271))+(((-1.0)*cj3*r12*x1265))+(((-1.0)*x1276))+(((-1.0)*x1274))+(((-1.0)*r10*x1263*x1266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1278=(r21*sj0);
IkReal x1279=((1.0)*sj1);
IkReal x1280=(cj4*r12);
IkReal x1281=((1.0)*cj1);
IkReal x1282=(sj4*sj5);
IkReal x1283=(cj1*x1282);
IkReal x1284=(cj5*r10*sj4);
IkReal x1285=(cj4*r22*sj0);
IkReal x1286=(cj5*r20*sj0*sj4);
CheckValue<IkReal> x1287=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1287.valid){
continue;
}
CheckValue<IkReal> x1288 = IKatan2WithCheck(IkReal((((r11*x1283))+((sj1*x1278*x1282))+((sj1*x1285))+(((-1.0)*x1279*x1286))+((cj1*x1280))+(((-1.0)*x1281*x1284)))),IkReal((((x1278*x1283))+(((-1.0)*r11*x1279*x1282))+((sj1*x1284))+(((-1.0)*x1279*x1280))+((cj1*x1285))+(((-1.0)*x1281*x1286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1288.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1287.value)))+(x1288.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1289=IKcos(j2);
IkReal x1290=IKsin(j2);
IkReal x1291=((1.0)*sj4);
IkReal x1292=((0.0003501)*cj5);
IkReal x1293=(cj5*sj4);
IkReal x1294=((0.31436)*cj1);
IkReal x1295=(cj5*sj3);
IkReal x1296=((0.0003501)*sj5);
IkReal x1297=(sj3*sj5);
IkReal x1298=((1.0)*cj4);
IkReal x1299=(cj0*sj1);
IkReal x1300=(cj1*x1289);
IkReal x1301=(cj3*cj4*sj5);
IkReal x1302=(sj0*x1290);
IkReal x1303=(sj1*x1290);
IkReal x1304=(cj0*x1290);
IkReal x1305=(sj1*x1289);
IkReal x1306=(cj3*cj5*x1298);
IkReal x1307=((1.0)*x1305);
evalcond[0]=(x1300+x1303+((r20*x1293))+(((-1.0)*r21*sj5*x1291))+(((-1.0)*r22*x1298)));
evalcond[1]=((((-0.31436)*x1303))+(((-1.0)*r21*x1292))+(((-1.0)*x1289*x1294))+(((-1.0)*r20*x1296))+(((-1.0)*pz))+(((-0.41)*cj1)));
evalcond[2]=((((-1.0)*r01*sj5*x1291))+(((-1.0)*x1289*x1299))+((cj1*x1304))+(((-1.0)*r02*x1298))+((r00*x1293)));
evalcond[3]=((((-1.0)*sj0*x1307))+(((-1.0)*r12*x1298))+((cj1*x1302))+((r10*x1293))+(((-1.0)*r11*sj5*x1291)));
evalcond[4]=((((-1.0)*r01*x1292))+(((-1.0)*r00*x1296))+(((0.41)*x1299))+(((0.31436)*x1289*x1299))+(((0.001)*sj0))+(((-1.0)*px))+(((-1.0)*x1294*x1304)));
evalcond[5]=((((0.41)*sj0*sj1))+(((-0.001)*cj0))+(((-1.0)*r11*x1292))+(((-1.0)*py))+(((-1.0)*x1294*x1302))+(((0.31436)*sj0*x1305))+(((-1.0)*r10*x1296)));
evalcond[6]=(x1305+((r20*x1297))+(((-1.0)*cj3*r22*x1291))+((r21*x1295))+((r21*x1301))+(((-1.0)*r20*x1306))+(((-1.0)*cj1*x1290)));
evalcond[7]=((((-1.0)*cj3*r02*x1291))+(((-1.0)*r00*x1306))+((x1290*x1299))+((cj0*x1300))+((r01*x1295))+((r00*x1297))+((r01*x1301)));
evalcond[8]=((((-1.0)*r10*x1306))+((r11*x1301))+((r11*x1295))+((sj0*x1300))+(((-1.0)*cj3*r12*x1291))+((r10*x1297))+((sj1*x1302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1308=(cj1*sj4);
IkReal x1309=(cj5*r00);
IkReal x1310=(r01*sj5);
IkReal x1311=(sj1*sj4);
IkReal x1312=(cj4*r02);
IkReal x1313=(cj0*r21*sj5);
IkReal x1314=(cj0*cj4*r22);
IkReal x1315=((1.0)*cj0*cj5*r20);
CheckValue<IkReal> x1316 = IKatan2WithCheck(IkReal(((((-1.0)*x1311*x1315))+((x1311*x1313))+((x1308*x1310))+((cj1*x1312))+(((-1.0)*x1308*x1309))+((sj1*x1314)))),IkReal(((((-1.0)*x1308*x1315))+((x1308*x1313))+(((-1.0)*sj1*x1312))+((x1309*x1311))+((cj1*x1314))+(((-1.0)*x1310*x1311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1316.valid){
continue;
}
CheckValue<IkReal> x1317=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1317.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1316.value)+(((1.5707963267949)*(x1317.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1318=IKcos(j2);
IkReal x1319=IKsin(j2);
IkReal x1320=((1.0)*sj4);
IkReal x1321=((0.0003501)*cj5);
IkReal x1322=(cj5*sj4);
IkReal x1323=((0.31436)*cj1);
IkReal x1324=(cj5*sj3);
IkReal x1325=((0.0003501)*sj5);
IkReal x1326=(sj3*sj5);
IkReal x1327=((1.0)*cj4);
IkReal x1328=(cj0*sj1);
IkReal x1329=(cj1*x1318);
IkReal x1330=(cj3*cj4*sj5);
IkReal x1331=(sj0*x1319);
IkReal x1332=(sj1*x1319);
IkReal x1333=(cj0*x1319);
IkReal x1334=(sj1*x1318);
IkReal x1335=(cj3*cj5*x1327);
IkReal x1336=((1.0)*x1334);
evalcond[0]=(x1329+x1332+(((-1.0)*r22*x1327))+(((-1.0)*r21*sj5*x1320))+((r20*x1322)));
evalcond[1]=((((-0.31436)*x1332))+(((-1.0)*pz))+(((-1.0)*r21*x1321))+(((-1.0)*r20*x1325))+(((-0.41)*cj1))+(((-1.0)*x1318*x1323)));
evalcond[2]=(((r00*x1322))+(((-1.0)*x1318*x1328))+(((-1.0)*r01*sj5*x1320))+(((-1.0)*r02*x1327))+((cj1*x1333)));
evalcond[3]=(((r10*x1322))+(((-1.0)*r12*x1327))+((cj1*x1331))+(((-1.0)*r11*sj5*x1320))+(((-1.0)*sj0*x1336)));
evalcond[4]=((((-1.0)*r01*x1321))+(((-1.0)*x1323*x1333))+(((-1.0)*r00*x1325))+(((0.31436)*x1318*x1328))+(((0.001)*sj0))+(((-1.0)*px))+(((0.41)*x1328)));
evalcond[5]=((((0.41)*sj0*sj1))+(((-0.001)*cj0))+(((-1.0)*x1323*x1331))+(((0.31436)*sj0*x1334))+(((-1.0)*r11*x1321))+(((-1.0)*py))+(((-1.0)*r10*x1325)));
evalcond[6]=(x1334+(((-1.0)*cj3*r22*x1320))+((r21*x1330))+((r21*x1324))+(((-1.0)*r20*x1335))+((r20*x1326))+(((-1.0)*cj1*x1319)));
evalcond[7]=(((r01*x1324))+((r00*x1326))+((r01*x1330))+((x1319*x1328))+(((-1.0)*r00*x1335))+((cj0*x1329))+(((-1.0)*cj3*r02*x1320)));
evalcond[8]=(((r11*x1330))+((r11*x1324))+((r10*x1326))+((sj1*x1331))+(((-1.0)*r10*x1335))+(((-1.0)*cj3*r12*x1320))+((sj0*x1329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1337=(sj4*sj5);
IkReal x1338=(r11*sj0);
IkReal x1339=((0.31436)*sj0);
IkReal x1340=(cj5*sj4);
CheckValue<IkReal> x1341=IKPowWithIntegerCheck(sj0,-2);
if(!x1341.valid){
continue;
}
if( IKabs(((-2.4390243902439)*(x1341.value)*(((((-0.0003501)*r10*sj0*sj5))+(((-1.0)*cj4*r12*x1339))+((r10*x1339*x1340))+(((-0.001)*cj0*sj0))+(((-1.0)*py*sj0))+(((-0.0003501)*cj5*x1338))+(((-0.31436)*x1337*x1338)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-0.00085390243902439)*cj5*r21))+(((-0.766731707317073)*cj4*r22))+(((-0.766731707317073)*r21*x1337))+(((-0.00085390243902439)*r20*sj5))+(((0.766731707317073)*r20*x1340)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.4390243902439)*(x1341.value)*(((((-0.0003501)*r10*sj0*sj5))+(((-1.0)*cj4*r12*x1339))+((r10*x1339*x1340))+(((-0.001)*cj0*sj0))+(((-1.0)*py*sj0))+(((-0.0003501)*cj5*x1338))+(((-0.31436)*x1337*x1338))))))+IKsqr(((((-2.4390243902439)*pz))+(((-0.00085390243902439)*cj5*r21))+(((-0.766731707317073)*cj4*r22))+(((-0.766731707317073)*r21*x1337))+(((-0.00085390243902439)*r20*sj5))+(((0.766731707317073)*r20*x1340))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.4390243902439)*(x1341.value)*(((((-0.0003501)*r10*sj0*sj5))+(((-1.0)*cj4*r12*x1339))+((r10*x1339*x1340))+(((-0.001)*cj0*sj0))+(((-1.0)*py*sj0))+(((-0.0003501)*cj5*x1338))+(((-0.31436)*x1337*x1338))))), ((((-2.4390243902439)*pz))+(((-0.00085390243902439)*cj5*r21))+(((-0.766731707317073)*cj4*r22))+(((-0.766731707317073)*r21*x1337))+(((-0.00085390243902439)*r20*sj5))+(((0.766731707317073)*r20*x1340))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1342=IKsin(j1);
IkReal x1343=IKcos(j1);
IkReal x1344=sj0*sj0;
IkReal x1345=cj0*cj0;
IkReal x1346=((0.31436)*cj4);
IkReal x1347=(r01*sj5);
IkReal x1348=((0.31436)*sj4);
IkReal x1349=(cj5*r10);
IkReal x1350=((1.0)*py);
IkReal x1351=(cj0*r20);
IkReal x1352=(cj3*cj5);
IkReal x1353=((0.31436)*sj3);
IkReal x1354=(cj5*sj0);
IkReal x1355=((1.0)*px);
IkReal x1356=((0.0003501)*sj5);
IkReal x1357=((0.0003501)*r11);
IkReal x1358=(r20*sj0);
IkReal x1359=(cj0*cj3);
IkReal x1360=(cj0*sj0);
IkReal x1361=(cj5*r01);
IkReal x1362=(cj0*r00);
IkReal x1363=(cj0*cj5);
IkReal x1364=(r11*sj5);
IkReal x1365=(r21*sj5);
IkReal x1366=(cj3*sj0);
IkReal x1367=((1.0)*pz);
IkReal x1368=((0.001)*x1360);
IkReal x1369=((0.0003501)*cj5*r21);
IkReal x1370=((0.41)*x1343);
IkReal x1371=(sj0*x1356);
IkReal x1372=((0.41)*x1342);
IkReal x1373=(x1360*x1372);
evalcond[0]=(x1369+x1370+((r22*x1346))+((r20*x1356))+((x1348*x1365))+pz+(((-1.0)*cj5*r20*x1348)));
evalcond[1]=((((-1.0)*x1354*x1357))+(((-1.0)*r12*sj0*x1346))+((x1344*x1372))+((sj0*x1348*x1349))+(((-1.0)*r10*x1371))+(((-1.0)*sj0*x1350))+(((-1.0)*sj0*x1348*x1364))+(((-1.0)*x1368)));
evalcond[2]=((((-0.0003501)*cj0*x1361))+x1368+(((-1.0)*cj0*x1355))+((cj5*x1348*x1362))+(((-1.0)*cj0*x1347*x1348))+(((-1.0)*cj0*r02*x1346))+((x1345*x1372))+(((-1.0)*x1356*x1362)));
evalcond[3]=(((cj5*r11*x1353))+((cj3*x1346*x1364))+((r10*sj5*x1353))+(((-1.0)*sj0*x1370))+(((-1.0)*x1356*x1358))+(((-1.0)*sj0*x1367))+(((-0.0003501)*r21*x1354))+(((-1.0)*cj3*x1346*x1349))+(((-1.0)*cj3*r12*x1348)));
evalcond[4]=((((-1.0)*cj0*x1367))+((cj3*x1346*x1347))+(((-1.0)*cj0*x1370))+(((-0.0003501)*r21*x1363))+(((-1.0)*cj3*r02*x1348))+(((-1.0)*x1351*x1356))+((r00*sj5*x1353))+((x1353*x1361))+(((-1.0)*r00*x1346*x1352)));
evalcond[5]=((((-1.0)*r10*x1356))+(((-1.0)*x1350))+(((-1.0)*x1346*x1365*x1366))+((r22*x1348*x1366))+(((-0.001)*cj0))+(((-1.0)*sj5*x1353*x1358))+((x1346*x1352*x1358))+(((-1.0)*cj5*x1357))+((sj0*x1372))+(((-1.0)*r21*x1353*x1354)));
evalcond[6]=((((-1.0)*x1346*x1359*x1365))+((r22*x1348*x1359))+(((-1.0)*x1355))+(((0.001)*sj0))+(((-0.0003501)*x1361))+(((-1.0)*r00*x1356))+((x1346*x1351*x1352))+(((-1.0)*sj5*x1351*x1353))+((cj0*x1372))+(((-1.0)*r21*x1353*x1363)));
evalcond[7]=(x1373+(((-1.0)*r00*x1371))+((cj0*x1348*x1349))+(((0.001)*x1344))+(((-0.0003501)*r01*x1354))+(((-1.0)*sj0*x1355))+(((-1.0)*cj0*x1348*x1364))+(((-1.0)*cj0*r12*x1346)));
evalcond[8]=(x1373+(((-1.0)*cj0*x1350))+(((-0.001)*x1345))+(((-1.0)*sj0*x1347*x1348))+((r00*x1348*x1354))+(((-1.0)*x1357*x1363))+(((-1.0)*cj0*r10*x1356))+(((-1.0)*r02*sj0*x1346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1374=(cj1*sj4);
IkReal x1375=(r21*sj5);
IkReal x1376=((1.0)*cj5);
IkReal x1377=(r01*sj5);
IkReal x1378=(sj1*sj4);
IkReal x1379=(cj4*r22);
IkReal x1380=(cj4*r02);
if( IKabs((((x1375*x1378))+(((-1.0)*r00*x1374*x1376))+((x1374*x1377))+(((-1.0)*r20*x1376*x1378))+((sj1*x1379))+((cj1*x1380)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1374*x1376))+((x1374*x1375))+((cj1*x1379))+(((-1.0)*sj1*x1380))+((cj5*r00*x1378))+(((-1.0)*x1377*x1378)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1375*x1378))+(((-1.0)*r00*x1374*x1376))+((x1374*x1377))+(((-1.0)*r20*x1376*x1378))+((sj1*x1379))+((cj1*x1380))))+IKsqr(((((-1.0)*r20*x1374*x1376))+((x1374*x1375))+((cj1*x1379))+(((-1.0)*sj1*x1380))+((cj5*r00*x1378))+(((-1.0)*x1377*x1378))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1375*x1378))+(((-1.0)*r00*x1374*x1376))+((x1374*x1377))+(((-1.0)*r20*x1376*x1378))+((sj1*x1379))+((cj1*x1380))), ((((-1.0)*r20*x1374*x1376))+((x1374*x1375))+((cj1*x1379))+(((-1.0)*sj1*x1380))+((cj5*r00*x1378))+(((-1.0)*x1377*x1378))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1381=IKsin(j2);
IkReal x1382=IKcos(j2);
IkReal x1383=((1.0)*cj3);
IkReal x1384=((0.0003501)*cj5);
IkReal x1385=(cj5*r00);
IkReal x1386=(r00*sj5);
IkReal x1387=(cj5*sj3);
IkReal x1388=(cj5*r20);
IkReal x1389=(r20*sj5);
IkReal x1390=((1.0)*cj4);
IkReal x1391=(cj1*x1382);
IkReal x1392=(sj1*x1381);
IkReal x1393=(sj1*x1382);
IkReal x1394=(cj3*cj4*sj5);
IkReal x1395=((1.0)*sj4*sj5);
IkReal x1396=(cj1*x1381);
IkReal x1397=(x1392+x1391);
evalcond[0]=(x1397+((sj4*x1388))+(((-1.0)*r21*x1395))+(((-1.0)*r22*x1390)));
evalcond[1]=(x1396+(((-1.0)*r02*x1390))+((sj4*x1385))+(((-1.0)*r01*x1395))+(((-1.0)*x1393)));
evalcond[2]=((((-1.0)*r21*x1384))+(((-1.0)*pz))+(((-0.31436)*x1391))+(((-0.31436)*x1392))+(((-0.0003501)*x1389))+(((-0.41)*cj1)));
evalcond[3]=((((0.41)*sj1))+(((-1.0)*px))+(((-1.0)*r01*x1384))+(((-0.31436)*x1396))+(((0.31436)*x1393))+(((-0.0003501)*x1386)));
evalcond[4]=(x1397+(((-1.0)*cj4*x1383*x1385))+((sj3*x1386))+((r01*x1394))+((r01*x1387))+(((-1.0)*r02*sj4*x1383)));
evalcond[5]=(x1393+(((-1.0)*r22*sj4*x1383))+((r21*x1394))+((r21*x1387))+(((-1.0)*cj4*x1383*x1388))+((sj3*x1389))+(((-1.0)*x1396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1398=(sj4*sj5);
IkReal x1399=(cj4*sj1);
IkReal x1400=((1.0)*cj1);
IkReal x1401=(cj5*sj4);
IkReal x1402=((1.0)*sj1);
if( IKabs(((((-1.0)*r01*x1398*x1400))+(((-1.0)*cj4*r02*x1400))+((r21*sj1*x1398))+((cj1*r00*x1401))+((r22*x1399))+(((-1.0)*r20*x1401*x1402)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((cj1*r21*x1398))+(((-1.0)*r00*x1401*x1402))+((r01*sj1*x1398))+(((-1.0)*r20*x1400*x1401))+((r02*x1399)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1398*x1400))+(((-1.0)*cj4*r02*x1400))+((r21*sj1*x1398))+((cj1*r00*x1401))+((r22*x1399))+(((-1.0)*r20*x1401*x1402))))+IKsqr((((cj1*cj4*r22))+((cj1*r21*x1398))+(((-1.0)*r00*x1401*x1402))+((r01*sj1*x1398))+(((-1.0)*r20*x1400*x1401))+((r02*x1399))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x1398*x1400))+(((-1.0)*cj4*r02*x1400))+((r21*sj1*x1398))+((cj1*r00*x1401))+((r22*x1399))+(((-1.0)*r20*x1401*x1402))), (((cj1*cj4*r22))+((cj1*r21*x1398))+(((-1.0)*r00*x1401*x1402))+((r01*sj1*x1398))+(((-1.0)*r20*x1400*x1401))+((r02*x1399))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1403=IKcos(j2);
IkReal x1404=IKsin(j2);
IkReal x1405=((0.31436)*sj1);
IkReal x1406=((1.0)*cj3);
IkReal x1407=((0.0003501)*cj5);
IkReal x1408=(cj5*r00);
IkReal x1409=(r00*sj5);
IkReal x1410=(cj5*sj3);
IkReal x1411=(cj5*r20);
IkReal x1412=(r20*sj5);
IkReal x1413=((1.0)*cj4);
IkReal x1414=(sj1*x1403);
IkReal x1415=(cj1*x1403);
IkReal x1416=(cj3*cj4*sj5);
IkReal x1417=((1.0)*sj4*sj5);
IkReal x1418=(cj1*x1404);
IkReal x1419=(sj1*x1404);
IkReal x1420=((1.0)*x1418);
evalcond[0]=((((-1.0)*r22*x1413))+((sj4*x1411))+x1419+x1415+(((-1.0)*r21*x1417)));
evalcond[1]=((((-1.0)*r02*x1413))+x1414+(((-1.0)*r01*x1417))+((sj4*x1408))+(((-1.0)*x1420)));
evalcond[2]=((((-0.31436)*x1415))+(((-1.0)*pz))+(((-0.0003501)*x1412))+(((-1.0)*x1404*x1405))+(((-0.41)*cj1))+(((-1.0)*r21*x1407)));
evalcond[3]=((((-0.0003501)*x1409))+(((0.31436)*x1418))+(((-0.41)*sj1))+(((-1.0)*px))+(((-1.0)*r01*x1407))+(((-1.0)*x1403*x1405)));
evalcond[4]=(((r21*x1410))+((r21*x1416))+(((-1.0)*r22*sj4*x1406))+x1414+(((-1.0)*cj4*x1406*x1411))+((sj3*x1412))+(((-1.0)*x1420)));
evalcond[5]=((((-1.0)*r02*sj4*x1406))+(((-1.0)*cj4*x1406*x1408))+((sj3*x1409))+((r01*x1416))+((r01*x1410))+(((-1.0)*x1415))+(((-1.0)*x1419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1421=((1.0)*sj1);
IkReal x1422=(cj4*r12);
IkReal x1423=(cj5*sj4);
IkReal x1424=((1.0)*cj1);
IkReal x1425=(cj4*r22);
IkReal x1426=(r21*sj4*sj5);
IkReal x1427=(r11*sj4*sj5);
if( IKabs((((sj1*x1426))+((sj1*x1425))+(((-1.0)*r20*x1421*x1423))+(((-1.0)*r10*x1423*x1424))+((cj1*x1427))+((cj1*x1422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1421*x1422))+(((-1.0)*x1421*x1427))+(((-1.0)*r20*x1423*x1424))+((cj1*x1425))+((cj1*x1426))+((r10*sj1*x1423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1426))+((sj1*x1425))+(((-1.0)*r20*x1421*x1423))+(((-1.0)*r10*x1423*x1424))+((cj1*x1427))+((cj1*x1422))))+IKsqr(((((-1.0)*x1421*x1422))+(((-1.0)*x1421*x1427))+(((-1.0)*r20*x1423*x1424))+((cj1*x1425))+((cj1*x1426))+((r10*sj1*x1423))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1426))+((sj1*x1425))+(((-1.0)*r20*x1421*x1423))+(((-1.0)*r10*x1423*x1424))+((cj1*x1427))+((cj1*x1422))), ((((-1.0)*x1421*x1422))+(((-1.0)*x1421*x1427))+(((-1.0)*r20*x1423*x1424))+((cj1*x1425))+((cj1*x1426))+((r10*sj1*x1423))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1428=IKsin(j2);
IkReal x1429=IKcos(j2);
IkReal x1430=((0.0003501)*cj5);
IkReal x1431=(cj3*cj4);
IkReal x1432=(r21*sj5);
IkReal x1433=((1.0)*sj4);
IkReal x1434=((1.0)*cj5);
IkReal x1435=(cj5*sj3);
IkReal x1436=((0.0003501)*sj5);
IkReal x1437=(cj5*sj4);
IkReal x1438=((1.0)*cj4);
IkReal x1439=(sj3*sj5);
IkReal x1440=(r11*sj5);
IkReal x1441=(cj1*x1429);
IkReal x1442=(sj1*x1428);
IkReal x1443=(sj1*x1429);
IkReal x1444=(cj1*x1428);
IkReal x1445=(x1442+x1441);
evalcond[0]=((((-1.0)*r22*x1438))+((r20*x1437))+x1445+(((-1.0)*x1432*x1433)));
evalcond[1]=((((-1.0)*r12*x1438))+(((-1.0)*x1433*x1440))+(((-1.0)*x1443))+x1444+((r10*x1437)));
evalcond[2]=((((-1.0)*pz))+(((-0.41)*cj1))+(((-0.31436)*x1441))+(((-0.31436)*x1442))+(((-1.0)*r21*x1430))+(((-1.0)*r20*x1436)));
evalcond[3]=((((-1.0)*r11*x1430))+(((0.31436)*x1443))+(((0.41)*sj1))+(((-1.0)*py))+(((-1.0)*r10*x1436))+(((-0.31436)*x1444)));
evalcond[4]=(((r11*x1435))+((x1431*x1440))+x1445+(((-1.0)*r10*x1431*x1434))+(((-1.0)*cj3*r12*x1433))+((r10*x1439)));
evalcond[5]=((((-1.0)*r20*x1431*x1434))+(((-1.0)*x1444))+((r20*x1439))+(((-1.0)*cj3*r22*x1433))+((r21*x1435))+x1443+((x1431*x1432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1446=(cj4*r12);
IkReal x1447=((1.0)*sj4);
IkReal x1448=(cj5*sj1);
IkReal x1449=(cj4*r22);
IkReal x1450=(r11*sj5);
IkReal x1451=(cj1*cj5);
IkReal x1452=(r21*sj4*sj5);
if( IKabs((((sj1*x1449))+(((-1.0)*r20*x1447*x1448))+(((-1.0)*cj1*x1446))+((r10*sj4*x1451))+((sj1*x1452))+(((-1.0)*cj1*x1447*x1450)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1452))+((sj1*sj4*x1450))+((cj1*x1449))+((sj1*x1446))+(((-1.0)*r10*x1447*x1448))+(((-1.0)*r20*x1447*x1451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1449))+(((-1.0)*r20*x1447*x1448))+(((-1.0)*cj1*x1446))+((r10*sj4*x1451))+((sj1*x1452))+(((-1.0)*cj1*x1447*x1450))))+IKsqr((((cj1*x1452))+((sj1*sj4*x1450))+((cj1*x1449))+((sj1*x1446))+(((-1.0)*r10*x1447*x1448))+(((-1.0)*r20*x1447*x1451))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1449))+(((-1.0)*r20*x1447*x1448))+(((-1.0)*cj1*x1446))+((r10*sj4*x1451))+((sj1*x1452))+(((-1.0)*cj1*x1447*x1450))), (((cj1*x1452))+((sj1*sj4*x1450))+((cj1*x1449))+((sj1*x1446))+(((-1.0)*r10*x1447*x1448))+(((-1.0)*r20*x1447*x1451))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1453=IKcos(j2);
IkReal x1454=IKsin(j2);
IkReal x1455=((0.31436)*sj1);
IkReal x1456=((0.0003501)*cj5);
IkReal x1457=(cj3*cj4);
IkReal x1458=(r21*sj5);
IkReal x1459=((1.0)*sj4);
IkReal x1460=((1.0)*cj5);
IkReal x1461=(cj5*sj3);
IkReal x1462=((0.0003501)*sj5);
IkReal x1463=(cj5*sj4);
IkReal x1464=((1.0)*cj4);
IkReal x1465=(r11*sj5);
IkReal x1466=(sj3*sj5);
IkReal x1467=(sj1*x1453);
IkReal x1468=(cj1*x1453);
IkReal x1469=(cj1*x1454);
IkReal x1470=(sj1*x1454);
IkReal x1471=((1.0)*x1469);
evalcond[0]=((((-1.0)*x1458*x1459))+((r20*x1463))+(((-1.0)*r22*x1464))+x1468+x1470);
evalcond[1]=((((-1.0)*x1459*x1465))+x1467+(((-1.0)*x1471))+((r10*x1463))+(((-1.0)*r12*x1464)));
evalcond[2]=((((-0.31436)*x1468))+(((-1.0)*x1454*x1455))+(((-1.0)*pz))+(((-1.0)*r20*x1462))+(((-0.41)*cj1))+(((-1.0)*r21*x1456)));
evalcond[3]=((((-0.41)*sj1))+(((0.31436)*x1469))+(((-1.0)*py))+(((-1.0)*x1453*x1455))+(((-1.0)*r10*x1462))+(((-1.0)*r11*x1456)));
evalcond[4]=(((r20*x1466))+(((-1.0)*cj3*r22*x1459))+x1467+(((-1.0)*x1471))+((r21*x1461))+(((-1.0)*r20*x1457*x1460))+((x1457*x1458)));
evalcond[5]=((((-1.0)*x1470))+((x1457*x1465))+((r11*x1461))+((r10*x1466))+(((-1.0)*r10*x1457*x1460))+(((-1.0)*x1468))+(((-1.0)*cj3*r12*x1459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1472=(r21*sj0);
IkReal x1473=((1.0)*sj1);
IkReal x1474=(cj4*r12);
IkReal x1475=((1.0)*cj1);
IkReal x1476=(sj4*sj5);
IkReal x1477=(cj1*x1476);
IkReal x1478=(cj5*r10*sj4);
IkReal x1479=(cj4*r22*sj0);
IkReal x1480=(cj5*r20*sj0*sj4);
CheckValue<IkReal> x1481=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1481.valid){
continue;
}
CheckValue<IkReal> x1482 = IKatan2WithCheck(IkReal((((sj1*x1472*x1476))+((cj1*x1474))+((r11*x1477))+((sj1*x1479))+(((-1.0)*x1475*x1478))+(((-1.0)*x1473*x1480)))),IkReal((((cj1*x1479))+((sj1*x1478))+((x1472*x1477))+(((-1.0)*r11*x1473*x1476))+(((-1.0)*x1475*x1480))+(((-1.0)*x1473*x1474)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1482.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1481.value)))+(x1482.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1483=IKcos(j2);
IkReal x1484=IKsin(j2);
IkReal x1485=((1.0)*sj4);
IkReal x1486=((0.0003501)*cj5);
IkReal x1487=(cj5*sj4);
IkReal x1488=((0.31436)*cj1);
IkReal x1489=(cj5*sj3);
IkReal x1490=((0.0003501)*sj5);
IkReal x1491=(sj3*sj5);
IkReal x1492=((1.0)*cj4);
IkReal x1493=(cj0*sj1);
IkReal x1494=(cj1*x1483);
IkReal x1495=(cj3*cj4*sj5);
IkReal x1496=(sj0*x1484);
IkReal x1497=(sj1*x1484);
IkReal x1498=(cj0*x1484);
IkReal x1499=(sj1*x1483);
IkReal x1500=(cj3*cj5*x1492);
IkReal x1501=((1.0)*x1499);
evalcond[0]=(((r20*x1487))+(((-1.0)*r21*sj5*x1485))+x1494+x1497+(((-1.0)*r22*x1492)));
evalcond[1]=((((-1.0)*r21*x1486))+(((-1.0)*r20*x1490))+(((-1.0)*pz))+(((-1.0)*x1483*x1488))+(((-0.41)*cj1))+(((-0.31436)*x1497)));
evalcond[2]=(((cj1*x1498))+(((-1.0)*x1483*x1493))+((r00*x1487))+(((-1.0)*r02*x1492))+(((-1.0)*r01*sj5*x1485)));
evalcond[3]=((((-1.0)*r12*x1492))+(((-1.0)*r11*sj5*x1485))+((r10*x1487))+((cj1*x1496))+(((-1.0)*sj0*x1501)));
evalcond[4]=((((-1.0)*r01*x1486))+(((-1.0)*r00*x1490))+(((0.31436)*x1483*x1493))+(((0.41)*x1493))+(((0.001)*sj0))+(((-1.0)*px))+(((-1.0)*x1488*x1498)));
evalcond[5]=((((0.41)*sj0*sj1))+(((-1.0)*r11*x1486))+(((0.31436)*sj0*x1499))+(((-0.001)*cj0))+(((-1.0)*py))+(((-1.0)*x1488*x1496))+(((-1.0)*r10*x1490)));
evalcond[6]=((((-1.0)*r20*x1500))+((r20*x1491))+((r21*x1489))+((r21*x1495))+x1499+(((-1.0)*cj1*x1484))+(((-1.0)*cj3*r22*x1485)));
evalcond[7]=(((r00*x1491))+((r01*x1489))+((r01*x1495))+(((-1.0)*r00*x1500))+((x1484*x1493))+(((-1.0)*cj3*r02*x1485))+((cj0*x1494)));
evalcond[8]=(((r10*x1491))+((sj1*x1496))+((sj0*x1494))+((r11*x1495))+((r11*x1489))+(((-1.0)*cj3*r12*x1485))+(((-1.0)*r10*x1500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1502=(cj1*sj4);
IkReal x1503=(cj5*r00);
IkReal x1504=(r01*sj5);
IkReal x1505=(sj1*sj4);
IkReal x1506=(cj4*r02);
IkReal x1507=(cj0*r21*sj5);
IkReal x1508=(cj0*cj4*r22);
IkReal x1509=((1.0)*cj0*cj5*r20);
CheckValue<IkReal> x1510 = IKatan2WithCheck(IkReal((((sj1*x1508))+((cj1*x1506))+((x1502*x1504))+((x1505*x1507))+(((-1.0)*x1505*x1509))+(((-1.0)*x1502*x1503)))),IkReal(((((-1.0)*x1504*x1505))+(((-1.0)*sj1*x1506))+((cj1*x1508))+((x1503*x1505))+((x1502*x1507))+(((-1.0)*x1502*x1509)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1510.valid){
continue;
}
CheckValue<IkReal> x1511=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1511.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1510.value)+(((1.5707963267949)*(x1511.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1512=IKcos(j2);
IkReal x1513=IKsin(j2);
IkReal x1514=((1.0)*sj4);
IkReal x1515=((0.0003501)*cj5);
IkReal x1516=(cj5*sj4);
IkReal x1517=((0.31436)*cj1);
IkReal x1518=(cj5*sj3);
IkReal x1519=((0.0003501)*sj5);
IkReal x1520=(sj3*sj5);
IkReal x1521=((1.0)*cj4);
IkReal x1522=(cj0*sj1);
IkReal x1523=(cj1*x1512);
IkReal x1524=(cj3*cj4*sj5);
IkReal x1525=(sj0*x1513);
IkReal x1526=(sj1*x1513);
IkReal x1527=(cj0*x1513);
IkReal x1528=(sj1*x1512);
IkReal x1529=(cj3*cj5*x1521);
IkReal x1530=((1.0)*x1528);
evalcond[0]=((((-1.0)*r21*sj5*x1514))+((r20*x1516))+(((-1.0)*r22*x1521))+x1526+x1523);
evalcond[1]=((((-1.0)*r20*x1519))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-1.0)*x1512*x1517))+(((-0.31436)*x1526))+(((-1.0)*r21*x1515)));
evalcond[2]=(((cj1*x1527))+(((-1.0)*r02*x1521))+((r00*x1516))+(((-1.0)*x1512*x1522))+(((-1.0)*r01*sj5*x1514)));
evalcond[3]=((((-1.0)*r12*x1521))+(((-1.0)*sj0*x1530))+((cj1*x1525))+((r10*x1516))+(((-1.0)*r11*sj5*x1514)));
evalcond[4]=((((-1.0)*r01*x1515))+(((-1.0)*r00*x1519))+(((0.001)*sj0))+(((0.41)*x1522))+(((-1.0)*px))+(((-1.0)*x1517*x1527))+(((0.31436)*x1512*x1522)));
evalcond[5]=((((0.41)*sj0*sj1))+(((-0.001)*cj0))+(((-1.0)*py))+(((0.31436)*sj0*x1528))+(((-1.0)*x1517*x1525))+(((-1.0)*r11*x1515))+(((-1.0)*r10*x1519)));
evalcond[6]=(((r20*x1520))+(((-1.0)*cj3*r22*x1514))+x1528+((r21*x1524))+((r21*x1518))+(((-1.0)*r20*x1529))+(((-1.0)*cj1*x1513)));
evalcond[7]=(((cj0*x1523))+((x1513*x1522))+(((-1.0)*r00*x1529))+((r00*x1520))+(((-1.0)*cj3*r02*x1514))+((r01*x1524))+((r01*x1518)));
evalcond[8]=(((r10*x1520))+((r11*x1518))+((r11*x1524))+((sj1*x1525))+((sj0*x1523))+(((-1.0)*cj3*r12*x1514))+(((-1.0)*r10*x1529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1531=((1.0)*sj0);
CheckValue<IkReal> x1532=IKPowWithIntegerCheck(IKsign((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+(((-1.0)*cj4*r12)))),-1);
if(!x1532.valid){
continue;
}
CheckValue<IkReal> x1533 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x1531))+(((-1.0)*cj5*r21*x1531)))),IkReal((((cj4*cj5*r20*sj0))+((r22*sj0*sj4))+(((-1.0)*cj4*r21*sj5*x1531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1533.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1532.value)))+(x1533.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1534=IKsin(j3);
IkReal x1535=IKcos(j3);
IkReal x1536=((1.0)*cj5);
IkReal x1537=(cj4*x1534);
IkReal x1538=((1.0)*sj5*x1535);
IkReal x1539=((1.0)*sj4*x1534);
evalcond[0]=((((-1.0)*r21*x1535*x1536))+(((-1.0)*r22*x1539))+((r21*sj5*x1537))+(((-1.0)*r20*x1536*x1537))+(((-1.0)*r20*x1538)));
evalcond[1]=((((-1.0)*r12*x1539))+cj0+(((-1.0)*r10*x1536*x1537))+(((-1.0)*r11*x1535*x1536))+((r11*sj5*x1537))+(((-1.0)*r10*x1538)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1538))+((r01*sj5*x1537))+(((-1.0)*r00*x1536*x1537))+(((-1.0)*r02*x1539))+(((-1.0)*r01*x1535*x1536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1540=((0.766731707317073)*sj4);
IkReal x1541=((0.00085390243902439)*cj5);
IkReal x1542=((0.00085390243902439)*sj5);
IkReal x1543=((0.766731707317073)*cj4);
if( IKabs(((((-1.0)*cj5*r10*x1540))+((r12*x1543))+((r11*x1541))+((r11*sj5*x1540))+((r10*x1542))+(((2.4390243902439)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+((cj5*r20*x1540))+(((-1.0)*r22*x1543))+(((-1.0)*r21*x1541))+(((-1.0)*r20*x1542))+(((-1.0)*r21*sj5*x1540)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r10*x1540))+((r12*x1543))+((r11*x1541))+((r11*sj5*x1540))+((r10*x1542))+(((2.4390243902439)*py))))+IKsqr(((((-2.4390243902439)*pz))+((cj5*r20*x1540))+(((-1.0)*r22*x1543))+(((-1.0)*r21*x1541))+(((-1.0)*r20*x1542))+(((-1.0)*r21*sj5*x1540))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj5*r10*x1540))+((r12*x1543))+((r11*x1541))+((r11*sj5*x1540))+((r10*x1542))+(((2.4390243902439)*py))), ((((-2.4390243902439)*pz))+((cj5*r20*x1540))+(((-1.0)*r22*x1543))+(((-1.0)*r21*x1541))+(((-1.0)*r20*x1542))+(((-1.0)*r21*sj5*x1540))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1544=((1.0)*py);
IkReal x1545=((0.31436)*cj4);
IkReal x1546=((0.0003501)*cj5);
IkReal x1547=((0.31436)*sj4);
IkReal x1548=(cj5*r10);
IkReal x1549=(r20*sj5);
IkReal x1550=((0.31436)*sj3);
IkReal x1551=(r10*sj5);
IkReal x1552=(r21*sj5);
IkReal x1553=(cj5*r20);
IkReal x1554=(r11*sj5);
IkReal x1555=((0.41)*(IKsin(j1)));
IkReal x1556=((0.0003501)*x1551);
IkReal x1557=(r11*x1546);
IkReal x1558=((0.41)*(IKcos(j1)));
IkReal x1559=(r21*x1546);
IkReal x1560=((0.0003501)*x1549);
IkReal x1561=(x1544+x1557+x1556);
IkReal x1562=(x1560+x1559+x1558);
evalcond[0]=(((x1547*x1552))+x1562+pz+((r22*x1545))+(((-1.0)*x1547*x1553)));
evalcond[1]=(((x1547*x1548))+x1555+(((-1.0)*x1547*x1554))+(((-1.0)*r12*x1545))+(((-1.0)*x1561)));
evalcond[2]=((((-1.0)*x1549*x1550))+x1555+((cj3*x1545*x1553))+(((-1.0)*cj5*r21*x1550))+(((-1.0)*x1561))+(((-1.0)*cj3*x1545*x1552))+((cj3*r22*x1547)));
evalcond[3]=((((-1.0)*cj3*x1545*x1548))+((x1550*x1551))+(((-1.0)*cj3*r12*x1547))+(((-1.0)*pz))+((cj5*r11*x1550))+((cj3*x1545*x1554))+(((-1.0)*x1562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1563=((1.0)*sj1);
IkReal x1564=(cj4*r12);
IkReal x1565=(cj5*sj4);
IkReal x1566=((1.0)*cj1);
IkReal x1567=(cj4*r22);
IkReal x1568=(r21*sj4*sj5);
IkReal x1569=(r11*sj4*sj5);
if( IKabs((((cj1*x1564))+((cj1*x1569))+((sj1*x1567))+((sj1*x1568))+(((-1.0)*r20*x1563*x1565))+(((-1.0)*r10*x1565*x1566)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1567))+((cj1*x1568))+((r10*sj1*x1565))+(((-1.0)*x1563*x1564))+(((-1.0)*x1563*x1569))+(((-1.0)*r20*x1565*x1566)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1564))+((cj1*x1569))+((sj1*x1567))+((sj1*x1568))+(((-1.0)*r20*x1563*x1565))+(((-1.0)*r10*x1565*x1566))))+IKsqr((((cj1*x1567))+((cj1*x1568))+((r10*sj1*x1565))+(((-1.0)*x1563*x1564))+(((-1.0)*x1563*x1569))+(((-1.0)*r20*x1565*x1566))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1564))+((cj1*x1569))+((sj1*x1567))+((sj1*x1568))+(((-1.0)*r20*x1563*x1565))+(((-1.0)*r10*x1565*x1566))), (((cj1*x1567))+((cj1*x1568))+((r10*sj1*x1565))+(((-1.0)*x1563*x1564))+(((-1.0)*x1563*x1569))+(((-1.0)*r20*x1565*x1566))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1570=IKsin(j2);
IkReal x1571=IKcos(j2);
IkReal x1572=((0.0003501)*cj5);
IkReal x1573=(cj3*cj4);
IkReal x1574=(r21*sj5);
IkReal x1575=((1.0)*sj4);
IkReal x1576=((1.0)*cj5);
IkReal x1577=(cj5*sj3);
IkReal x1578=((0.0003501)*sj5);
IkReal x1579=(cj5*sj4);
IkReal x1580=((1.0)*cj4);
IkReal x1581=(sj3*sj5);
IkReal x1582=(r11*sj5);
IkReal x1583=(cj1*x1571);
IkReal x1584=(sj1*x1570);
IkReal x1585=(sj1*x1571);
IkReal x1586=(cj1*x1570);
IkReal x1587=(x1583+x1584);
evalcond[0]=(((r20*x1579))+x1587+(((-1.0)*x1574*x1575))+(((-1.0)*r22*x1580)));
evalcond[1]=(x1586+(((-1.0)*x1585))+((r10*x1579))+(((-1.0)*r12*x1580))+(((-1.0)*x1575*x1582)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*r21*x1572))+(((-1.0)*r20*x1578))+(((-0.31436)*x1584))+(((-0.31436)*x1583))+(((-0.41)*cj1)));
evalcond[3]=((((0.41)*sj1))+(((-1.0)*py))+(((-0.31436)*x1586))+(((-1.0)*r10*x1578))+(((0.31436)*x1585))+(((-1.0)*r11*x1572)));
evalcond[4]=((((-1.0)*r10*x1573*x1576))+((x1573*x1582))+(((-1.0)*cj3*r12*x1575))+x1587+((r11*x1577))+((r10*x1581)));
evalcond[5]=((((-1.0)*r20*x1573*x1576))+((r20*x1581))+((x1573*x1574))+x1585+((r21*x1577))+(((-1.0)*x1586))+(((-1.0)*cj3*r22*x1575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1588=((0.766731707317073)*sj4);
IkReal x1589=((0.00085390243902439)*cj5);
IkReal x1590=((0.00085390243902439)*sj5);
IkReal x1591=((0.766731707317073)*cj4);
if( IKabs(((((-2.4390243902439)*py))+(((-1.0)*r11*x1589))+((cj5*r10*x1588))+(((-1.0)*r11*sj5*x1588))+(((-1.0)*r10*x1590))+(((-1.0)*r12*x1591)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+((cj5*r20*x1588))+(((-1.0)*r21*sj5*x1588))+(((-1.0)*r22*x1591))+(((-1.0)*r20*x1590))+(((-1.0)*r21*x1589)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.4390243902439)*py))+(((-1.0)*r11*x1589))+((cj5*r10*x1588))+(((-1.0)*r11*sj5*x1588))+(((-1.0)*r10*x1590))+(((-1.0)*r12*x1591))))+IKsqr(((((-2.4390243902439)*pz))+((cj5*r20*x1588))+(((-1.0)*r21*sj5*x1588))+(((-1.0)*r22*x1591))+(((-1.0)*r20*x1590))+(((-1.0)*r21*x1589))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.4390243902439)*py))+(((-1.0)*r11*x1589))+((cj5*r10*x1588))+(((-1.0)*r11*sj5*x1588))+(((-1.0)*r10*x1590))+(((-1.0)*r12*x1591))), ((((-2.4390243902439)*pz))+((cj5*r20*x1588))+(((-1.0)*r21*sj5*x1588))+(((-1.0)*r22*x1591))+(((-1.0)*r20*x1590))+(((-1.0)*r21*x1589))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1592=((0.31436)*cj4);
IkReal x1593=((0.0003501)*cj5);
IkReal x1594=((0.31436)*sj4);
IkReal x1595=(cj5*r10);
IkReal x1596=(r20*sj5);
IkReal x1597=((0.31436)*sj3);
IkReal x1598=(r10*sj5);
IkReal x1599=(r21*sj5);
IkReal x1600=(cj5*r20);
IkReal x1601=(r11*sj5);
IkReal x1602=((0.41)*(IKcos(j1)));
IkReal x1603=(r21*x1593);
IkReal x1604=((0.0003501)*x1596);
IkReal x1605=((0.41)*(IKsin(j1)));
IkReal x1606=((0.0003501)*x1598);
IkReal x1607=(r11*x1593);
IkReal x1608=(x1605+x1607+x1606);
IkReal x1609=(x1603+x1602+x1604+pz);
evalcond[0]=(x1608+(((-1.0)*x1594*x1595))+((r12*x1592))+((x1594*x1601))+py);
evalcond[1]=((((-1.0)*x1594*x1600))+((x1594*x1599))+x1609+((r22*x1592)));
evalcond[2]=(((cj5*r11*x1597))+x1609+((cj3*x1592*x1601))+(((-1.0)*cj3*r12*x1594))+((x1597*x1598))+(((-1.0)*cj3*x1592*x1595)));
evalcond[3]=(((x1596*x1597))+((cj3*x1592*x1599))+(((-1.0)*cj3*x1592*x1600))+(((-1.0)*x1608))+((cj5*r21*x1597))+(((-1.0)*py))+(((-1.0)*cj3*r22*x1594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1610=(cj4*r12);
IkReal x1611=((1.0)*sj4);
IkReal x1612=(cj5*sj1);
IkReal x1613=(cj4*r22);
IkReal x1614=(r11*sj5);
IkReal x1615=(cj1*cj5);
IkReal x1616=(r21*sj4*sj5);
if( IKabs(((((-1.0)*r20*x1611*x1612))+((sj1*x1616))+((sj1*x1613))+(((-1.0)*cj1*x1611*x1614))+(((-1.0)*cj1*x1610))+((r10*sj4*x1615)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1611*x1615))+((sj1*x1610))+((sj1*sj4*x1614))+(((-1.0)*r10*x1611*x1612))+((cj1*x1613))+((cj1*x1616)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1611*x1612))+((sj1*x1616))+((sj1*x1613))+(((-1.0)*cj1*x1611*x1614))+(((-1.0)*cj1*x1610))+((r10*sj4*x1615))))+IKsqr(((((-1.0)*r20*x1611*x1615))+((sj1*x1610))+((sj1*sj4*x1614))+(((-1.0)*r10*x1611*x1612))+((cj1*x1613))+((cj1*x1616))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x1611*x1612))+((sj1*x1616))+((sj1*x1613))+(((-1.0)*cj1*x1611*x1614))+(((-1.0)*cj1*x1610))+((r10*sj4*x1615))), ((((-1.0)*r20*x1611*x1615))+((sj1*x1610))+((sj1*sj4*x1614))+(((-1.0)*r10*x1611*x1612))+((cj1*x1613))+((cj1*x1616))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1617=IKcos(j2);
IkReal x1618=IKsin(j2);
IkReal x1619=((0.31436)*sj1);
IkReal x1620=((0.0003501)*cj5);
IkReal x1621=(cj3*cj4);
IkReal x1622=(r21*sj5);
IkReal x1623=((1.0)*sj4);
IkReal x1624=((1.0)*cj5);
IkReal x1625=(cj5*sj3);
IkReal x1626=((0.0003501)*sj5);
IkReal x1627=(cj5*sj4);
IkReal x1628=((1.0)*cj4);
IkReal x1629=(r11*sj5);
IkReal x1630=(sj3*sj5);
IkReal x1631=(sj1*x1617);
IkReal x1632=(cj1*x1617);
IkReal x1633=(cj1*x1618);
IkReal x1634=(sj1*x1618);
IkReal x1635=((1.0)*x1633);
evalcond[0]=(((r20*x1627))+x1632+x1634+(((-1.0)*x1622*x1623))+(((-1.0)*r22*x1628)));
evalcond[1]=((((-1.0)*r12*x1628))+x1631+(((-1.0)*x1635))+(((-1.0)*x1623*x1629))+((r10*x1627)));
evalcond[2]=((((-1.0)*x1618*x1619))+(((-1.0)*r20*x1626))+(((-1.0)*r21*x1620))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-0.31436)*x1632)));
evalcond[3]=((((-1.0)*r11*x1620))+(((-0.41)*sj1))+(((-1.0)*x1617*x1619))+(((-1.0)*py))+(((0.31436)*x1633))+(((-1.0)*r10*x1626)));
evalcond[4]=((((-1.0)*cj3*r22*x1623))+((r20*x1630))+((r21*x1625))+x1631+(((-1.0)*x1635))+(((-1.0)*r20*x1621*x1624))+((x1621*x1622)));
evalcond[5]=((((-1.0)*r10*x1621*x1624))+(((-1.0)*cj3*r12*x1623))+((r10*x1630))+(((-1.0)*x1634))+(((-1.0)*x1632))+((r11*x1625))+((x1621*x1629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1636=((0.00085390243902439)*cj5);
IkReal x1637=((0.00085390243902439)*sj5);
IkReal x1638=((0.766731707317073)*cj4);
IkReal x1639=((0.766731707317073)*sj4*sj5);
IkReal x1640=((0.766731707317073)*cj5*sj4);
if( IKabs((((r02*x1638))+(((-1.0)*r00*x1640))+((r01*x1636))+((r01*x1639))+((r00*x1637))+(((2.4390243902439)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-1.0)*r22*x1638))+((r20*x1640))+(((-1.0)*r21*x1636))+(((-1.0)*r21*x1639))+(((-1.0)*r20*x1637)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x1638))+(((-1.0)*r00*x1640))+((r01*x1636))+((r01*x1639))+((r00*x1637))+(((2.4390243902439)*px))))+IKsqr(((((-2.4390243902439)*pz))+(((-1.0)*r22*x1638))+((r20*x1640))+(((-1.0)*r21*x1636))+(((-1.0)*r21*x1639))+(((-1.0)*r20*x1637))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r02*x1638))+(((-1.0)*r00*x1640))+((r01*x1636))+((r01*x1639))+((r00*x1637))+(((2.4390243902439)*px))), ((((-2.4390243902439)*pz))+(((-1.0)*r22*x1638))+((r20*x1640))+(((-1.0)*r21*x1636))+(((-1.0)*r21*x1639))+(((-1.0)*r20*x1637))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1641=((1.0)*px);
IkReal x1642=((0.31436)*cj4);
IkReal x1643=(cj5*r21);
IkReal x1644=(cj3*sj5);
IkReal x1645=(r20*sj5);
IkReal x1646=((0.31436)*sj3);
IkReal x1647=(r00*sj5);
IkReal x1648=(cj5*r00);
IkReal x1649=((0.31436)*sj4);
IkReal x1650=(cj5*r20);
IkReal x1651=(cj5*r01);
IkReal x1652=((0.41)*(IKsin(j1)));
IkReal x1653=((0.0003501)*x1647);
IkReal x1654=((0.0003501)*x1651);
IkReal x1655=((0.41)*(IKcos(j1)));
IkReal x1656=((0.0003501)*x1643);
IkReal x1657=((0.0003501)*x1645);
IkReal x1658=(cj3*x1649);
IkReal x1659=(x1653+x1654+x1641);
IkReal x1660=(x1656+x1657+x1655);
evalcond[0]=(x1660+pz+(((-1.0)*x1649*x1650))+((r21*sj5*x1649))+((r22*x1642)));
evalcond[1]=((((-1.0)*r01*sj5*x1649))+x1652+((x1648*x1649))+(((-1.0)*x1659))+(((-1.0)*r02*x1642)));
evalcond[2]=(((r22*x1658))+(((-1.0)*r21*x1642*x1644))+x1652+(((-1.0)*x1645*x1646))+((cj3*x1642*x1650))+(((-1.0)*x1643*x1646))+(((-1.0)*x1659)));
evalcond[3]=(((x1646*x1651))+((r01*x1642*x1644))+(((-1.0)*pz))+(((-1.0)*cj3*x1642*x1648))+((x1646*x1647))+(((-1.0)*x1660))+(((-1.0)*r02*x1658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1661=(cj1*sj4);
IkReal x1662=(r21*sj5);
IkReal x1663=((1.0)*cj5);
IkReal x1664=(r01*sj5);
IkReal x1665=(sj1*sj4);
IkReal x1666=(cj4*r22);
IkReal x1667=(cj4*r02);
if( IKabs((((sj1*x1666))+((cj1*x1667))+((x1662*x1665))+(((-1.0)*r00*x1661*x1663))+((x1661*x1664))+(((-1.0)*r20*x1663*x1665)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1666))+((cj5*r00*x1665))+(((-1.0)*x1664*x1665))+((x1661*x1662))+(((-1.0)*sj1*x1667))+(((-1.0)*r20*x1661*x1663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1666))+((cj1*x1667))+((x1662*x1665))+(((-1.0)*r00*x1661*x1663))+((x1661*x1664))+(((-1.0)*r20*x1663*x1665))))+IKsqr((((cj1*x1666))+((cj5*r00*x1665))+(((-1.0)*x1664*x1665))+((x1661*x1662))+(((-1.0)*sj1*x1667))+(((-1.0)*r20*x1661*x1663))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1666))+((cj1*x1667))+((x1662*x1665))+(((-1.0)*r00*x1661*x1663))+((x1661*x1664))+(((-1.0)*r20*x1663*x1665))), (((cj1*x1666))+((cj5*r00*x1665))+(((-1.0)*x1664*x1665))+((x1661*x1662))+(((-1.0)*sj1*x1667))+(((-1.0)*r20*x1661*x1663))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1668=IKsin(j2);
IkReal x1669=IKcos(j2);
IkReal x1670=((1.0)*cj3);
IkReal x1671=((0.0003501)*cj5);
IkReal x1672=(cj5*r00);
IkReal x1673=(r00*sj5);
IkReal x1674=(cj5*sj3);
IkReal x1675=(cj5*r20);
IkReal x1676=(r20*sj5);
IkReal x1677=((1.0)*cj4);
IkReal x1678=(cj1*x1669);
IkReal x1679=(sj1*x1668);
IkReal x1680=(sj1*x1669);
IkReal x1681=(cj3*cj4*sj5);
IkReal x1682=((1.0)*sj4*sj5);
IkReal x1683=(cj1*x1668);
IkReal x1684=(x1678+x1679);
evalcond[0]=(((sj4*x1675))+x1684+(((-1.0)*r21*x1682))+(((-1.0)*r22*x1677)));
evalcond[1]=((((-1.0)*r01*x1682))+((sj4*x1672))+(((-1.0)*r02*x1677))+x1683+(((-1.0)*x1680)));
evalcond[2]=((((-0.31436)*x1679))+(((-0.31436)*x1678))+(((-0.0003501)*x1676))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-1.0)*r21*x1671)));
evalcond[3]=((((-0.0003501)*x1673))+(((0.41)*sj1))+(((-1.0)*px))+(((-0.31436)*x1683))+(((0.31436)*x1680))+(((-1.0)*r01*x1671)));
evalcond[4]=(((r01*x1681))+x1684+(((-1.0)*cj4*x1670*x1672))+((sj3*x1673))+((r01*x1674))+(((-1.0)*r02*sj4*x1670)));
evalcond[5]=(((r21*x1674))+x1680+(((-1.0)*r22*sj4*x1670))+(((-1.0)*x1683))+((r21*x1681))+(((-1.0)*cj4*x1670*x1675))+((sj3*x1676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1685=((0.00085390243902439)*cj5);
IkReal x1686=((0.00085390243902439)*sj5);
IkReal x1687=((0.766731707317073)*cj4);
IkReal x1688=((0.766731707317073)*sj4*sj5);
IkReal x1689=((0.766731707317073)*cj5*sj4);
if( IKabs(((((-2.4390243902439)*px))+(((-1.0)*r01*x1685))+(((-1.0)*r01*x1688))+((r00*x1689))+(((-1.0)*r02*x1687))+(((-1.0)*r00*x1686)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-1.0)*r20*x1686))+(((-1.0)*r21*x1685))+(((-1.0)*r21*x1688))+(((-1.0)*r22*x1687))+((r20*x1689)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.4390243902439)*px))+(((-1.0)*r01*x1685))+(((-1.0)*r01*x1688))+((r00*x1689))+(((-1.0)*r02*x1687))+(((-1.0)*r00*x1686))))+IKsqr(((((-2.4390243902439)*pz))+(((-1.0)*r20*x1686))+(((-1.0)*r21*x1685))+(((-1.0)*r21*x1688))+(((-1.0)*r22*x1687))+((r20*x1689))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.4390243902439)*px))+(((-1.0)*r01*x1685))+(((-1.0)*r01*x1688))+((r00*x1689))+(((-1.0)*r02*x1687))+(((-1.0)*r00*x1686))), ((((-2.4390243902439)*pz))+(((-1.0)*r20*x1686))+(((-1.0)*r21*x1685))+(((-1.0)*r21*x1688))+(((-1.0)*r22*x1687))+((r20*x1689))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1690=((0.31436)*cj4);
IkReal x1691=(cj5*r21);
IkReal x1692=(cj3*sj5);
IkReal x1693=(r20*sj5);
IkReal x1694=((0.31436)*sj3);
IkReal x1695=(r00*sj5);
IkReal x1696=(cj5*r00);
IkReal x1697=((0.31436)*sj4);
IkReal x1698=(cj5*r20);
IkReal x1699=(cj5*r01);
IkReal x1700=((0.41)*(IKcos(j1)));
IkReal x1701=((0.0003501)*x1691);
IkReal x1702=((0.0003501)*x1693);
IkReal x1703=((0.41)*(IKsin(j1)));
IkReal x1704=((0.0003501)*x1695);
IkReal x1705=((0.0003501)*x1699);
IkReal x1706=(cj3*x1697);
IkReal x1707=(x1703+x1704+x1705);
IkReal x1708=(x1700+x1701+x1702+pz);
evalcond[0]=((((-1.0)*x1696*x1697))+x1707+((r02*x1690))+((r01*sj5*x1697))+px);
evalcond[1]=(x1708+(((-1.0)*x1697*x1698))+((r22*x1690))+((r21*sj5*x1697)));
evalcond[2]=(x1708+(((-1.0)*r02*x1706))+((r01*x1690*x1692))+(((-1.0)*cj3*x1690*x1696))+((x1694*x1695))+((x1694*x1699)));
evalcond[3]=(((x1691*x1694))+(((-1.0)*x1707))+((r21*x1690*x1692))+(((-1.0)*px))+((x1693*x1694))+(((-1.0)*r22*x1706))+(((-1.0)*cj3*x1690*x1698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1709=(sj4*sj5);
IkReal x1710=(cj4*sj1);
IkReal x1711=((1.0)*cj1);
IkReal x1712=(cj5*sj4);
IkReal x1713=((1.0)*sj1);
if( IKabs((((r22*x1710))+(((-1.0)*cj4*r02*x1711))+((r21*sj1*x1709))+(((-1.0)*r20*x1712*x1713))+((cj1*r00*x1712))+(((-1.0)*r01*x1709*x1711)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj1*x1709))+((cj1*cj4*r22))+((r02*x1710))+((cj1*r21*x1709))+(((-1.0)*r20*x1711*x1712))+(((-1.0)*r00*x1712*x1713)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x1710))+(((-1.0)*cj4*r02*x1711))+((r21*sj1*x1709))+(((-1.0)*r20*x1712*x1713))+((cj1*r00*x1712))+(((-1.0)*r01*x1709*x1711))))+IKsqr((((r01*sj1*x1709))+((cj1*cj4*r22))+((r02*x1710))+((cj1*r21*x1709))+(((-1.0)*r20*x1711*x1712))+(((-1.0)*r00*x1712*x1713))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x1710))+(((-1.0)*cj4*r02*x1711))+((r21*sj1*x1709))+(((-1.0)*r20*x1712*x1713))+((cj1*r00*x1712))+(((-1.0)*r01*x1709*x1711))), (((r01*sj1*x1709))+((cj1*cj4*r22))+((r02*x1710))+((cj1*r21*x1709))+(((-1.0)*r20*x1711*x1712))+(((-1.0)*r00*x1712*x1713))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1714=IKcos(j2);
IkReal x1715=IKsin(j2);
IkReal x1716=((0.31436)*sj1);
IkReal x1717=((1.0)*cj3);
IkReal x1718=((0.0003501)*cj5);
IkReal x1719=(cj5*r00);
IkReal x1720=(r00*sj5);
IkReal x1721=(cj5*sj3);
IkReal x1722=(cj5*r20);
IkReal x1723=(r20*sj5);
IkReal x1724=((1.0)*cj4);
IkReal x1725=(sj1*x1714);
IkReal x1726=(cj1*x1714);
IkReal x1727=(cj3*cj4*sj5);
IkReal x1728=((1.0)*sj4*sj5);
IkReal x1729=(cj1*x1715);
IkReal x1730=(sj1*x1715);
IkReal x1731=((1.0)*x1729);
evalcond[0]=((((-1.0)*r22*x1724))+x1726+x1730+((sj4*x1722))+(((-1.0)*r21*x1728)));
evalcond[1]=(((sj4*x1719))+x1725+(((-1.0)*r01*x1728))+(((-1.0)*x1731))+(((-1.0)*r02*x1724)));
evalcond[2]=((((-0.0003501)*x1723))+(((-0.31436)*x1726))+(((-1.0)*r21*x1718))+(((-1.0)*pz))+(((-1.0)*x1715*x1716))+(((-0.41)*cj1)));
evalcond[3]=((((-0.0003501)*x1720))+(((-1.0)*x1714*x1716))+(((-0.41)*sj1))+(((-1.0)*px))+(((0.31436)*x1729))+(((-1.0)*r01*x1718)));
evalcond[4]=(((sj3*x1723))+(((-1.0)*r22*sj4*x1717))+x1725+((r21*x1721))+((r21*x1727))+(((-1.0)*cj4*x1717*x1722))+(((-1.0)*x1731)));
evalcond[5]=(((sj3*x1720))+(((-1.0)*r02*sj4*x1717))+((r01*x1721))+((r01*x1727))+(((-1.0)*cj4*x1717*x1719))+(((-1.0)*x1726))+(((-1.0)*x1730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1732=(sj4*sj5);
IkReal x1733=(cj0*r01);
IkReal x1734=(cj0*r00);
IkReal x1735=(cj5*sj4);
CheckValue<IkReal> x1736=IKPowWithIntegerCheck(cj0,-2);
if(!x1736.valid){
continue;
}
if( IKabs(((-2.4390243902439)*(x1736.value)*(((((-0.31436)*x1732*x1733))+(((-0.31436)*cj0*cj4*r02))+(((0.31436)*x1734*x1735))+(((0.001)*cj0*sj0))+(((-0.0003501)*cj5*x1733))+(((-0.0003501)*sj5*x1734))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((0.766731707317073)*r20*x1735))+(((-0.766731707317073)*r21*x1732))+(((-0.00085390243902439)*cj5*r21))+(((-0.766731707317073)*cj4*r22))+(((-0.00085390243902439)*r20*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.4390243902439)*(x1736.value)*(((((-0.31436)*x1732*x1733))+(((-0.31436)*cj0*cj4*r02))+(((0.31436)*x1734*x1735))+(((0.001)*cj0*sj0))+(((-0.0003501)*cj5*x1733))+(((-0.0003501)*sj5*x1734))+(((-1.0)*cj0*px))))))+IKsqr(((((-2.4390243902439)*pz))+(((0.766731707317073)*r20*x1735))+(((-0.766731707317073)*r21*x1732))+(((-0.00085390243902439)*cj5*r21))+(((-0.766731707317073)*cj4*r22))+(((-0.00085390243902439)*r20*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.4390243902439)*(x1736.value)*(((((-0.31436)*x1732*x1733))+(((-0.31436)*cj0*cj4*r02))+(((0.31436)*x1734*x1735))+(((0.001)*cj0*sj0))+(((-0.0003501)*cj5*x1733))+(((-0.0003501)*sj5*x1734))+(((-1.0)*cj0*px))))), ((((-2.4390243902439)*pz))+(((0.766731707317073)*r20*x1735))+(((-0.766731707317073)*r21*x1732))+(((-0.00085390243902439)*cj5*r21))+(((-0.766731707317073)*cj4*r22))+(((-0.00085390243902439)*r20*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1737=IKsin(j1);
IkReal x1738=IKcos(j1);
IkReal x1739=sj0*sj0;
IkReal x1740=cj0*cj0;
IkReal x1741=((0.31436)*cj4);
IkReal x1742=(r01*sj5);
IkReal x1743=((0.31436)*sj4);
IkReal x1744=(cj5*r10);
IkReal x1745=((1.0)*py);
IkReal x1746=(cj0*r20);
IkReal x1747=(cj3*cj5);
IkReal x1748=((0.31436)*sj3);
IkReal x1749=(cj5*sj0);
IkReal x1750=((1.0)*px);
IkReal x1751=((0.0003501)*sj5);
IkReal x1752=((0.0003501)*r11);
IkReal x1753=(r20*sj0);
IkReal x1754=(cj0*cj3);
IkReal x1755=(cj0*sj0);
IkReal x1756=(cj5*r01);
IkReal x1757=(cj0*r00);
IkReal x1758=(cj0*cj5);
IkReal x1759=(r11*sj5);
IkReal x1760=(r21*sj5);
IkReal x1761=(cj3*sj0);
IkReal x1762=((1.0)*pz);
IkReal x1763=((0.001)*x1755);
IkReal x1764=((0.0003501)*cj5*r21);
IkReal x1765=((0.41)*x1738);
IkReal x1766=(sj0*x1751);
IkReal x1767=((0.41)*x1737);
IkReal x1768=(x1755*x1767);
evalcond[0]=(x1764+x1765+((x1743*x1760))+((r22*x1741))+(((-1.0)*cj5*r20*x1743))+((r20*x1751))+pz);
evalcond[1]=((((-1.0)*sj0*x1743*x1759))+(((-1.0)*x1763))+((sj0*x1743*x1744))+(((-1.0)*x1749*x1752))+((x1739*x1767))+(((-1.0)*sj0*x1745))+(((-1.0)*r12*sj0*x1741))+(((-1.0)*r10*x1766)));
evalcond[2]=((((-1.0)*cj0*x1750))+(((-1.0)*cj0*r02*x1741))+((cj5*x1743*x1757))+x1763+(((-1.0)*cj0*x1742*x1743))+(((-0.0003501)*cj0*x1756))+((x1740*x1767))+(((-1.0)*x1751*x1757)));
evalcond[3]=((((-0.0003501)*r21*x1749))+((r10*sj5*x1748))+((cj3*x1741*x1759))+((cj5*r11*x1748))+(((-1.0)*cj3*x1741*x1744))+(((-1.0)*x1751*x1753))+(((-1.0)*cj3*r12*x1743))+(((-1.0)*sj0*x1762))+(((-1.0)*sj0*x1765)));
evalcond[4]=((((-0.0003501)*r21*x1758))+(((-1.0)*r00*x1741*x1747))+((cj3*x1741*x1742))+(((-1.0)*x1746*x1751))+(((-1.0)*cj0*x1765))+(((-1.0)*cj0*x1762))+((x1748*x1756))+((r00*sj5*x1748))+(((-1.0)*cj3*r02*x1743)));
evalcond[5]=(((r22*x1743*x1761))+((sj0*x1767))+(((-1.0)*cj5*x1752))+(((-1.0)*r21*x1748*x1749))+(((-1.0)*r10*x1751))+(((-0.001)*cj0))+(((-1.0)*sj5*x1748*x1753))+(((-1.0)*x1745))+(((-1.0)*x1741*x1760*x1761))+((x1741*x1747*x1753)));
evalcond[6]=((((-0.0003501)*x1756))+(((-1.0)*r21*x1748*x1758))+((cj0*x1767))+(((-1.0)*x1741*x1754*x1760))+((r22*x1743*x1754))+(((0.001)*sj0))+(((-1.0)*x1750))+(((-1.0)*sj5*x1746*x1748))+(((-1.0)*r00*x1751))+((x1741*x1746*x1747)));
evalcond[7]=((((-1.0)*r00*x1766))+((cj0*x1743*x1744))+x1768+(((-1.0)*cj0*x1743*x1759))+(((-1.0)*sj0*x1750))+(((-0.0003501)*r01*x1749))+(((-1.0)*cj0*r12*x1741))+(((0.001)*x1739)));
evalcond[8]=((((-1.0)*cj0*x1745))+x1768+((r00*x1743*x1749))+(((-1.0)*x1752*x1758))+(((-1.0)*r02*sj0*x1741))+(((-0.001)*x1740))+(((-1.0)*cj0*r10*x1751))+(((-1.0)*sj0*x1742*x1743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1769=(cj1*sj4);
IkReal x1770=(r21*sj5);
IkReal x1771=((1.0)*cj5);
IkReal x1772=(r01*sj5);
IkReal x1773=(sj1*sj4);
IkReal x1774=(cj4*r22);
IkReal x1775=(cj4*r02);
if( IKabs((((x1770*x1773))+(((-1.0)*r20*x1771*x1773))+(((-1.0)*r00*x1769*x1771))+((sj1*x1774))+((x1769*x1772))+((cj1*x1775)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1772*x1773))+(((-1.0)*sj1*x1775))+((cj5*r00*x1773))+(((-1.0)*r20*x1769*x1771))+((x1769*x1770))+((cj1*x1774)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1770*x1773))+(((-1.0)*r20*x1771*x1773))+(((-1.0)*r00*x1769*x1771))+((sj1*x1774))+((x1769*x1772))+((cj1*x1775))))+IKsqr(((((-1.0)*x1772*x1773))+(((-1.0)*sj1*x1775))+((cj5*r00*x1773))+(((-1.0)*r20*x1769*x1771))+((x1769*x1770))+((cj1*x1774))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1770*x1773))+(((-1.0)*r20*x1771*x1773))+(((-1.0)*r00*x1769*x1771))+((sj1*x1774))+((x1769*x1772))+((cj1*x1775))), ((((-1.0)*x1772*x1773))+(((-1.0)*sj1*x1775))+((cj5*r00*x1773))+(((-1.0)*r20*x1769*x1771))+((x1769*x1770))+((cj1*x1774))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1776=IKsin(j2);
IkReal x1777=IKcos(j2);
IkReal x1778=((1.0)*cj3);
IkReal x1779=((0.0003501)*cj5);
IkReal x1780=(cj5*r00);
IkReal x1781=(r00*sj5);
IkReal x1782=(cj5*sj3);
IkReal x1783=(cj5*r20);
IkReal x1784=(r20*sj5);
IkReal x1785=((1.0)*cj4);
IkReal x1786=(cj1*x1777);
IkReal x1787=(sj1*x1776);
IkReal x1788=(sj1*x1777);
IkReal x1789=(cj3*cj4*sj5);
IkReal x1790=((1.0)*sj4*sj5);
IkReal x1791=(cj1*x1776);
IkReal x1792=(x1786+x1787);
evalcond[0]=(x1792+(((-1.0)*r22*x1785))+((sj4*x1783))+(((-1.0)*r21*x1790)));
evalcond[1]=((((-1.0)*r01*x1790))+x1791+((sj4*x1780))+(((-1.0)*x1788))+(((-1.0)*r02*x1785)));
evalcond[2]=((((-0.31436)*x1787))+(((-0.31436)*x1786))+(((-1.0)*r21*x1779))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-0.0003501)*x1784)));
evalcond[3]=((((0.31436)*x1788))+(((-0.31436)*x1791))+(((0.41)*sj1))+(((-1.0)*px))+(((-1.0)*r01*x1779))+(((-0.0003501)*x1781)));
evalcond[4]=((((-1.0)*cj4*x1778*x1780))+(((-1.0)*r02*sj4*x1778))+((sj3*x1781))+x1792+((r01*x1782))+((r01*x1789)));
evalcond[5]=((((-1.0)*cj4*x1778*x1783))+((sj3*x1784))+x1788+((r21*x1782))+((r21*x1789))+(((-1.0)*x1791))+(((-1.0)*r22*sj4*x1778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1793=(sj4*sj5);
IkReal x1794=(cj4*sj1);
IkReal x1795=((1.0)*cj1);
IkReal x1796=(cj5*sj4);
IkReal x1797=((1.0)*sj1);
if( IKabs(((((-1.0)*r20*x1796*x1797))+((cj1*r00*x1796))+((r22*x1794))+(((-1.0)*r01*x1793*x1795))+(((-1.0)*cj4*r02*x1795))+((r21*sj1*x1793)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r20*x1795*x1796))+((r01*sj1*x1793))+((cj1*r21*x1793))+((r02*x1794))+(((-1.0)*r00*x1796*x1797)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1796*x1797))+((cj1*r00*x1796))+((r22*x1794))+(((-1.0)*r01*x1793*x1795))+(((-1.0)*cj4*r02*x1795))+((r21*sj1*x1793))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r20*x1795*x1796))+((r01*sj1*x1793))+((cj1*r21*x1793))+((r02*x1794))+(((-1.0)*r00*x1796*x1797))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x1796*x1797))+((cj1*r00*x1796))+((r22*x1794))+(((-1.0)*r01*x1793*x1795))+(((-1.0)*cj4*r02*x1795))+((r21*sj1*x1793))), (((cj1*cj4*r22))+(((-1.0)*r20*x1795*x1796))+((r01*sj1*x1793))+((cj1*r21*x1793))+((r02*x1794))+(((-1.0)*r00*x1796*x1797))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1798=IKcos(j2);
IkReal x1799=IKsin(j2);
IkReal x1800=((0.31436)*sj1);
IkReal x1801=((1.0)*cj3);
IkReal x1802=((0.0003501)*cj5);
IkReal x1803=(cj5*r00);
IkReal x1804=(r00*sj5);
IkReal x1805=(cj5*sj3);
IkReal x1806=(cj5*r20);
IkReal x1807=(r20*sj5);
IkReal x1808=((1.0)*cj4);
IkReal x1809=(sj1*x1798);
IkReal x1810=(cj1*x1798);
IkReal x1811=(cj3*cj4*sj5);
IkReal x1812=((1.0)*sj4*sj5);
IkReal x1813=(cj1*x1799);
IkReal x1814=(sj1*x1799);
IkReal x1815=((1.0)*x1813);
evalcond[0]=(((sj4*x1806))+x1814+x1810+(((-1.0)*r21*x1812))+(((-1.0)*r22*x1808)));
evalcond[1]=((((-1.0)*x1815))+((sj4*x1803))+(((-1.0)*r01*x1812))+(((-1.0)*r02*x1808))+x1809);
evalcond[2]=((((-1.0)*r21*x1802))+(((-0.0003501)*x1807))+(((-1.0)*x1799*x1800))+(((-0.31436)*x1810))+(((-1.0)*pz))+(((-0.41)*cj1)));
evalcond[3]=((((-1.0)*r01*x1802))+(((-0.0003501)*x1804))+(((-1.0)*x1798*x1800))+(((-0.41)*sj1))+(((-1.0)*px))+(((0.31436)*x1813)));
evalcond[4]=((((-1.0)*x1815))+(((-1.0)*r22*sj4*x1801))+((r21*x1805))+((sj3*x1807))+(((-1.0)*cj4*x1801*x1806))+x1809+((r21*x1811)));
evalcond[5]=((((-1.0)*r02*sj4*x1801))+((sj3*x1804))+(((-1.0)*cj4*x1801*x1803))+((r01*x1811))+((r01*x1805))+(((-1.0)*x1810))+(((-1.0)*x1814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1816=((1.0)*sj1);
IkReal x1817=(cj4*r12);
IkReal x1818=(cj5*sj4);
IkReal x1819=((1.0)*cj1);
IkReal x1820=(cj4*r22);
IkReal x1821=(r21*sj4*sj5);
IkReal x1822=(r11*sj4*sj5);
if( IKabs(((((-1.0)*r10*x1818*x1819))+(((-1.0)*r20*x1816*x1818))+((cj1*x1822))+((sj1*x1820))+((sj1*x1821))+((cj1*x1817)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1821))+((cj1*x1820))+(((-1.0)*x1816*x1817))+(((-1.0)*x1816*x1822))+((r10*sj1*x1818))+(((-1.0)*r20*x1818*x1819)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1818*x1819))+(((-1.0)*r20*x1816*x1818))+((cj1*x1822))+((sj1*x1820))+((sj1*x1821))+((cj1*x1817))))+IKsqr((((cj1*x1821))+((cj1*x1820))+(((-1.0)*x1816*x1817))+(((-1.0)*x1816*x1822))+((r10*sj1*x1818))+(((-1.0)*r20*x1818*x1819))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x1818*x1819))+(((-1.0)*r20*x1816*x1818))+((cj1*x1822))+((sj1*x1820))+((sj1*x1821))+((cj1*x1817))), (((cj1*x1821))+((cj1*x1820))+(((-1.0)*x1816*x1817))+(((-1.0)*x1816*x1822))+((r10*sj1*x1818))+(((-1.0)*r20*x1818*x1819))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1823=IKsin(j2);
IkReal x1824=IKcos(j2);
IkReal x1825=((0.0003501)*cj5);
IkReal x1826=(cj3*cj4);
IkReal x1827=(r21*sj5);
IkReal x1828=((1.0)*sj4);
IkReal x1829=((1.0)*cj5);
IkReal x1830=(cj5*sj3);
IkReal x1831=((0.0003501)*sj5);
IkReal x1832=(cj5*sj4);
IkReal x1833=((1.0)*cj4);
IkReal x1834=(sj3*sj5);
IkReal x1835=(r11*sj5);
IkReal x1836=(cj1*x1824);
IkReal x1837=(sj1*x1823);
IkReal x1838=(sj1*x1824);
IkReal x1839=(cj1*x1823);
IkReal x1840=(x1836+x1837);
evalcond[0]=((((-1.0)*x1827*x1828))+x1840+((r20*x1832))+(((-1.0)*r22*x1833)));
evalcond[1]=(((r10*x1832))+(((-1.0)*x1838))+(((-1.0)*x1828*x1835))+x1839+(((-1.0)*r12*x1833)));
evalcond[2]=((((-1.0)*r20*x1831))+(((-1.0)*pz))+(((-0.31436)*x1836))+(((-0.31436)*x1837))+(((-0.41)*cj1))+(((-1.0)*r21*x1825)));
evalcond[3]=((((0.31436)*x1838))+(((-1.0)*r10*x1831))+(((0.41)*sj1))+(((-1.0)*py))+(((-0.31436)*x1839))+(((-1.0)*r11*x1825)));
evalcond[4]=(((r10*x1834))+((x1826*x1835))+(((-1.0)*cj3*r12*x1828))+((r11*x1830))+x1840+(((-1.0)*r10*x1826*x1829)));
evalcond[5]=((((-1.0)*x1839))+((x1826*x1827))+(((-1.0)*r20*x1826*x1829))+((r21*x1830))+x1838+((r20*x1834))+(((-1.0)*cj3*r22*x1828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1841=(cj4*r12);
IkReal x1842=((1.0)*sj4);
IkReal x1843=(cj5*sj1);
IkReal x1844=(cj4*r22);
IkReal x1845=(r11*sj5);
IkReal x1846=(cj1*cj5);
IkReal x1847=(r21*sj4*sj5);
if( IKabs(((((-1.0)*r20*x1842*x1843))+(((-1.0)*cj1*x1842*x1845))+((sj1*x1844))+((sj1*x1847))+((r10*sj4*x1846))+(((-1.0)*cj1*x1841)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*sj4*x1845))+(((-1.0)*r20*x1842*x1846))+(((-1.0)*r10*x1842*x1843))+((sj1*x1841))+((cj1*x1847))+((cj1*x1844)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1842*x1843))+(((-1.0)*cj1*x1842*x1845))+((sj1*x1844))+((sj1*x1847))+((r10*sj4*x1846))+(((-1.0)*cj1*x1841))))+IKsqr((((sj1*sj4*x1845))+(((-1.0)*r20*x1842*x1846))+(((-1.0)*r10*x1842*x1843))+((sj1*x1841))+((cj1*x1847))+((cj1*x1844))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x1842*x1843))+(((-1.0)*cj1*x1842*x1845))+((sj1*x1844))+((sj1*x1847))+((r10*sj4*x1846))+(((-1.0)*cj1*x1841))), (((sj1*sj4*x1845))+(((-1.0)*r20*x1842*x1846))+(((-1.0)*r10*x1842*x1843))+((sj1*x1841))+((cj1*x1847))+((cj1*x1844))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1848=IKcos(j2);
IkReal x1849=IKsin(j2);
IkReal x1850=((0.31436)*sj1);
IkReal x1851=((0.0003501)*cj5);
IkReal x1852=(cj3*cj4);
IkReal x1853=(r21*sj5);
IkReal x1854=((1.0)*sj4);
IkReal x1855=((1.0)*cj5);
IkReal x1856=(cj5*sj3);
IkReal x1857=((0.0003501)*sj5);
IkReal x1858=(cj5*sj4);
IkReal x1859=((1.0)*cj4);
IkReal x1860=(r11*sj5);
IkReal x1861=(sj3*sj5);
IkReal x1862=(sj1*x1848);
IkReal x1863=(cj1*x1848);
IkReal x1864=(cj1*x1849);
IkReal x1865=(sj1*x1849);
IkReal x1866=((1.0)*x1864);
evalcond[0]=((((-1.0)*r22*x1859))+x1863+x1865+(((-1.0)*x1853*x1854))+((r20*x1858)));
evalcond[1]=(((r10*x1858))+(((-1.0)*x1854*x1860))+x1862+(((-1.0)*r12*x1859))+(((-1.0)*x1866)));
evalcond[2]=((((-1.0)*x1849*x1850))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-1.0)*r21*x1851))+(((-0.31436)*x1863))+(((-1.0)*r20*x1857)));
evalcond[3]=((((-1.0)*x1848*x1850))+(((-0.41)*sj1))+(((-1.0)*py))+(((0.31436)*x1864))+(((-1.0)*r11*x1851))+(((-1.0)*r10*x1857)));
evalcond[4]=(((x1852*x1853))+x1862+(((-1.0)*r20*x1852*x1855))+((r20*x1861))+((r21*x1856))+(((-1.0)*x1866))+(((-1.0)*cj3*r22*x1854)));
evalcond[5]=((((-1.0)*r10*x1852*x1855))+(((-1.0)*cj3*r12*x1854))+((r10*x1861))+((r11*x1856))+(((-1.0)*x1863))+(((-1.0)*x1865))+((x1852*x1860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1867=(r21*sj0);
IkReal x1868=((1.0)*sj1);
IkReal x1869=(cj4*r12);
IkReal x1870=((1.0)*cj1);
IkReal x1871=(sj4*sj5);
IkReal x1872=(cj1*x1871);
IkReal x1873=(cj5*r10*sj4);
IkReal x1874=(cj4*r22*sj0);
IkReal x1875=(cj5*r20*sj0*sj4);
CheckValue<IkReal> x1876=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1876.valid){
continue;
}
CheckValue<IkReal> x1877 = IKatan2WithCheck(IkReal((((sj1*x1867*x1871))+((cj1*x1869))+(((-1.0)*x1868*x1875))+(((-1.0)*x1870*x1873))+((sj1*x1874))+((r11*x1872)))),IkReal(((((-1.0)*r11*x1868*x1871))+(((-1.0)*x1870*x1875))+((sj1*x1873))+((cj1*x1874))+(((-1.0)*x1868*x1869))+((x1867*x1872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1877.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1876.value)))+(x1877.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1878=IKcos(j2);
IkReal x1879=IKsin(j2);
IkReal x1880=((1.0)*sj4);
IkReal x1881=((0.0003501)*cj5);
IkReal x1882=(cj5*sj4);
IkReal x1883=((0.31436)*cj1);
IkReal x1884=(cj5*sj3);
IkReal x1885=((0.0003501)*sj5);
IkReal x1886=(sj3*sj5);
IkReal x1887=((1.0)*cj4);
IkReal x1888=(cj0*sj1);
IkReal x1889=(cj1*x1878);
IkReal x1890=(cj3*cj4*sj5);
IkReal x1891=(sj0*x1879);
IkReal x1892=(sj1*x1879);
IkReal x1893=(cj0*x1879);
IkReal x1894=(sj1*x1878);
IkReal x1895=(cj3*cj5*x1887);
IkReal x1896=((1.0)*x1894);
evalcond[0]=(((r20*x1882))+(((-1.0)*r21*sj5*x1880))+(((-1.0)*r22*x1887))+x1892+x1889);
evalcond[1]=((((-0.31436)*x1892))+(((-1.0)*x1878*x1883))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-1.0)*r20*x1885))+(((-1.0)*r21*x1881)));
evalcond[2]=((((-1.0)*r01*sj5*x1880))+(((-1.0)*r02*x1887))+(((-1.0)*x1878*x1888))+((r00*x1882))+((cj1*x1893)));
evalcond[3]=((((-1.0)*r12*x1887))+((cj1*x1891))+((r10*x1882))+(((-1.0)*r11*sj5*x1880))+(((-1.0)*sj0*x1896)));
evalcond[4]=((((0.41)*x1888))+(((-1.0)*x1883*x1893))+(((0.001)*sj0))+(((-1.0)*px))+(((0.31436)*x1878*x1888))+(((-1.0)*r00*x1885))+(((-1.0)*r01*x1881)));
evalcond[5]=((((0.41)*sj0*sj1))+(((-1.0)*x1883*x1891))+(((0.31436)*sj0*x1894))+(((-0.001)*cj0))+(((-1.0)*r11*x1881))+(((-1.0)*py))+(((-1.0)*r10*x1885)));
evalcond[6]=(((r21*x1884))+((r20*x1886))+(((-1.0)*cj3*r22*x1880))+x1894+(((-1.0)*r20*x1895))+(((-1.0)*cj1*x1879))+((r21*x1890)));
evalcond[7]=(((x1879*x1888))+((r01*x1890))+((r00*x1886))+((r01*x1884))+(((-1.0)*cj3*r02*x1880))+(((-1.0)*r00*x1895))+((cj0*x1889)));
evalcond[8]=(((r11*x1890))+(((-1.0)*cj3*r12*x1880))+(((-1.0)*r10*x1895))+((r10*x1886))+((sj1*x1891))+((r11*x1884))+((sj0*x1889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1897=(cj1*sj4);
IkReal x1898=(cj5*r00);
IkReal x1899=(r01*sj5);
IkReal x1900=(sj1*sj4);
IkReal x1901=(cj4*r02);
IkReal x1902=(cj0*r21*sj5);
IkReal x1903=(cj0*cj4*r22);
IkReal x1904=((1.0)*cj0*cj5*r20);
CheckValue<IkReal> x1905 = IKatan2WithCheck(IkReal((((x1897*x1899))+((cj1*x1901))+(((-1.0)*x1900*x1904))+(((-1.0)*x1897*x1898))+((x1900*x1902))+((sj1*x1903)))),IkReal((((cj1*x1903))+((x1898*x1900))+(((-1.0)*x1899*x1900))+(((-1.0)*sj1*x1901))+(((-1.0)*x1897*x1904))+((x1897*x1902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1905.valid){
continue;
}
CheckValue<IkReal> x1906=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1906.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1905.value)+(((1.5707963267949)*(x1906.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1907=IKcos(j2);
IkReal x1908=IKsin(j2);
IkReal x1909=((1.0)*sj4);
IkReal x1910=((0.0003501)*cj5);
IkReal x1911=(cj5*sj4);
IkReal x1912=((0.31436)*cj1);
IkReal x1913=(cj5*sj3);
IkReal x1914=((0.0003501)*sj5);
IkReal x1915=(sj3*sj5);
IkReal x1916=((1.0)*cj4);
IkReal x1917=(cj0*sj1);
IkReal x1918=(cj1*x1907);
IkReal x1919=(cj3*cj4*sj5);
IkReal x1920=(sj0*x1908);
IkReal x1921=(sj1*x1908);
IkReal x1922=(cj0*x1908);
IkReal x1923=(sj1*x1907);
IkReal x1924=(cj3*cj5*x1916);
IkReal x1925=((1.0)*x1923);
evalcond[0]=((((-1.0)*r22*x1916))+x1921+x1918+((r20*x1911))+(((-1.0)*r21*sj5*x1909)));
evalcond[1]=((((-0.31436)*x1921))+(((-1.0)*x1907*x1912))+(((-1.0)*pz))+(((-1.0)*r20*x1914))+(((-0.41)*cj1))+(((-1.0)*r21*x1910)));
evalcond[2]=((((-1.0)*x1907*x1917))+((cj1*x1922))+(((-1.0)*r02*x1916))+((r00*x1911))+(((-1.0)*r01*sj5*x1909)));
evalcond[3]=(((r10*x1911))+((cj1*x1920))+(((-1.0)*sj0*x1925))+(((-1.0)*r12*x1916))+(((-1.0)*r11*sj5*x1909)));
evalcond[4]=((((-1.0)*r00*x1914))+(((-1.0)*r01*x1910))+(((0.41)*x1917))+(((-1.0)*x1912*x1922))+(((0.001)*sj0))+(((-1.0)*px))+(((0.31436)*x1907*x1917)));
evalcond[5]=((((0.41)*sj0*sj1))+(((0.31436)*sj0*x1923))+(((-0.001)*cj0))+(((-1.0)*r11*x1910))+(((-1.0)*x1912*x1920))+(((-1.0)*py))+(((-1.0)*r10*x1914)));
evalcond[6]=((((-1.0)*cj1*x1908))+(((-1.0)*r20*x1924))+x1923+((r21*x1913))+((r21*x1919))+((r20*x1915))+(((-1.0)*cj3*r22*x1909)));
evalcond[7]=(((r00*x1915))+((r01*x1919))+((r01*x1913))+(((-1.0)*r00*x1924))+(((-1.0)*cj3*r02*x1909))+((x1908*x1917))+((cj0*x1918)));
evalcond[8]=(((r10*x1915))+(((-1.0)*cj3*r12*x1909))+((r11*x1913))+((r11*x1919))+((sj0*x1918))+(((-1.0)*r10*x1924))+((sj1*x1920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1926=(sj4*sj5);
IkReal x1927=(r11*sj0);
IkReal x1928=((0.31436)*sj0);
IkReal x1929=(cj5*sj4);
CheckValue<IkReal> x1930=IKPowWithIntegerCheck(sj0,-2);
if(!x1930.valid){
continue;
}
if( IKabs(((-2.4390243902439)*(x1930.value)*(((((-1.0)*cj4*r12*x1928))+(((-0.31436)*x1926*x1927))+(((-0.0003501)*cj5*x1927))+(((-0.0003501)*r10*sj0*sj5))+(((-0.001)*cj0*sj0))+((r10*x1928*x1929))+(((-1.0)*py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-0.00085390243902439)*cj5*r21))+(((0.766731707317073)*r20*x1929))+(((-0.766731707317073)*cj4*r22))+(((-0.00085390243902439)*r20*sj5))+(((-0.766731707317073)*r21*x1926)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.4390243902439)*(x1930.value)*(((((-1.0)*cj4*r12*x1928))+(((-0.31436)*x1926*x1927))+(((-0.0003501)*cj5*x1927))+(((-0.0003501)*r10*sj0*sj5))+(((-0.001)*cj0*sj0))+((r10*x1928*x1929))+(((-1.0)*py*sj0))))))+IKsqr(((((-2.4390243902439)*pz))+(((-0.00085390243902439)*cj5*r21))+(((0.766731707317073)*r20*x1929))+(((-0.766731707317073)*cj4*r22))+(((-0.00085390243902439)*r20*sj5))+(((-0.766731707317073)*r21*x1926))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.4390243902439)*(x1930.value)*(((((-1.0)*cj4*r12*x1928))+(((-0.31436)*x1926*x1927))+(((-0.0003501)*cj5*x1927))+(((-0.0003501)*r10*sj0*sj5))+(((-0.001)*cj0*sj0))+((r10*x1928*x1929))+(((-1.0)*py*sj0))))), ((((-2.4390243902439)*pz))+(((-0.00085390243902439)*cj5*r21))+(((0.766731707317073)*r20*x1929))+(((-0.766731707317073)*cj4*r22))+(((-0.00085390243902439)*r20*sj5))+(((-0.766731707317073)*r21*x1926))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1931=IKsin(j1);
IkReal x1932=IKcos(j1);
IkReal x1933=sj0*sj0;
IkReal x1934=cj0*cj0;
IkReal x1935=((0.31436)*cj4);
IkReal x1936=(r01*sj5);
IkReal x1937=((0.31436)*sj4);
IkReal x1938=(cj5*r10);
IkReal x1939=((1.0)*py);
IkReal x1940=(cj0*r20);
IkReal x1941=(cj3*cj5);
IkReal x1942=((0.31436)*sj3);
IkReal x1943=(cj5*sj0);
IkReal x1944=((1.0)*px);
IkReal x1945=((0.0003501)*sj5);
IkReal x1946=((0.0003501)*r11);
IkReal x1947=(r20*sj0);
IkReal x1948=(cj0*cj3);
IkReal x1949=(cj0*sj0);
IkReal x1950=(cj5*r01);
IkReal x1951=(cj0*r00);
IkReal x1952=(cj0*cj5);
IkReal x1953=(r11*sj5);
IkReal x1954=(r21*sj5);
IkReal x1955=(cj3*sj0);
IkReal x1956=((1.0)*pz);
IkReal x1957=((0.001)*x1949);
IkReal x1958=((0.0003501)*cj5*r21);
IkReal x1959=((0.41)*x1932);
IkReal x1960=(sj0*x1945);
IkReal x1961=((0.41)*x1931);
IkReal x1962=(x1949*x1961);
evalcond[0]=(((x1937*x1954))+((r20*x1945))+(((-1.0)*cj5*r20*x1937))+((r22*x1935))+x1959+x1958+pz);
evalcond[1]=(((x1933*x1961))+(((-1.0)*x1957))+(((-1.0)*x1943*x1946))+(((-1.0)*r12*sj0*x1935))+(((-1.0)*sj0*x1937*x1953))+(((-1.0)*r10*x1960))+(((-1.0)*sj0*x1939))+((sj0*x1937*x1938)));
evalcond[2]=(((cj5*x1937*x1951))+(((-0.0003501)*cj0*x1950))+(((-1.0)*x1945*x1951))+(((-1.0)*cj0*x1944))+x1957+(((-1.0)*cj0*x1936*x1937))+(((-1.0)*cj0*r02*x1935))+((x1934*x1961)));
evalcond[3]=((((-1.0)*cj3*r12*x1937))+(((-1.0)*x1945*x1947))+((cj3*x1935*x1953))+((r10*sj5*x1942))+(((-1.0)*sj0*x1956))+(((-1.0)*sj0*x1959))+((cj5*r11*x1942))+(((-1.0)*cj3*x1935*x1938))+(((-0.0003501)*r21*x1943)));
evalcond[4]=(((cj3*x1935*x1936))+(((-1.0)*cj0*x1956))+(((-1.0)*cj0*x1959))+(((-1.0)*x1940*x1945))+(((-1.0)*cj3*r02*x1937))+(((-1.0)*r00*x1935*x1941))+((r00*sj5*x1942))+((x1942*x1950))+(((-0.0003501)*r21*x1952)));
evalcond[5]=(((x1935*x1941*x1947))+(((-1.0)*cj5*x1946))+(((-0.001)*cj0))+(((-1.0)*sj5*x1942*x1947))+(((-1.0)*r21*x1942*x1943))+((sj0*x1961))+(((-1.0)*r10*x1945))+(((-1.0)*x1935*x1954*x1955))+((r22*x1937*x1955))+(((-1.0)*x1939)));
evalcond[6]=(((cj0*x1961))+(((-1.0)*x1944))+(((-1.0)*r21*x1942*x1952))+(((-0.0003501)*x1950))+(((-1.0)*x1935*x1948*x1954))+(((0.001)*sj0))+(((-1.0)*sj5*x1940*x1942))+(((-1.0)*r00*x1945))+((r22*x1937*x1948))+((x1935*x1940*x1941)));
evalcond[7]=((((0.001)*x1933))+((cj0*x1937*x1938))+(((-1.0)*r00*x1960))+(((-1.0)*cj0*r12*x1935))+x1962+(((-1.0)*sj0*x1944))+(((-0.0003501)*r01*x1943))+(((-1.0)*cj0*x1937*x1953)));
evalcond[8]=((((-1.0)*sj0*x1936*x1937))+(((-1.0)*cj0*r10*x1945))+(((-0.001)*x1934))+(((-1.0)*r02*sj0*x1935))+x1962+(((-1.0)*x1946*x1952))+((r00*x1937*x1943))+(((-1.0)*cj0*x1939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1963=(cj1*sj4);
IkReal x1964=(r21*sj5);
IkReal x1965=((1.0)*cj5);
IkReal x1966=(r01*sj5);
IkReal x1967=(sj1*sj4);
IkReal x1968=(cj4*r22);
IkReal x1969=(cj4*r02);
if( IKabs(((((-1.0)*r20*x1965*x1967))+((cj1*x1969))+((x1964*x1967))+((sj1*x1968))+(((-1.0)*r00*x1963*x1965))+((x1963*x1966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1963*x1965))+((cj1*x1968))+(((-1.0)*x1966*x1967))+((x1963*x1964))+(((-1.0)*sj1*x1969))+((cj5*r00*x1967)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1965*x1967))+((cj1*x1969))+((x1964*x1967))+((sj1*x1968))+(((-1.0)*r00*x1963*x1965))+((x1963*x1966))))+IKsqr(((((-1.0)*r20*x1963*x1965))+((cj1*x1968))+(((-1.0)*x1966*x1967))+((x1963*x1964))+(((-1.0)*sj1*x1969))+((cj5*r00*x1967))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x1965*x1967))+((cj1*x1969))+((x1964*x1967))+((sj1*x1968))+(((-1.0)*r00*x1963*x1965))+((x1963*x1966))), ((((-1.0)*r20*x1963*x1965))+((cj1*x1968))+(((-1.0)*x1966*x1967))+((x1963*x1964))+(((-1.0)*sj1*x1969))+((cj5*r00*x1967))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1970=IKsin(j2);
IkReal x1971=IKcos(j2);
IkReal x1972=((1.0)*cj3);
IkReal x1973=((0.0003501)*cj5);
IkReal x1974=(cj5*r00);
IkReal x1975=(r00*sj5);
IkReal x1976=(cj5*sj3);
IkReal x1977=(cj5*r20);
IkReal x1978=(r20*sj5);
IkReal x1979=((1.0)*cj4);
IkReal x1980=(cj1*x1971);
IkReal x1981=(sj1*x1970);
IkReal x1982=(sj1*x1971);
IkReal x1983=(cj3*cj4*sj5);
IkReal x1984=((1.0)*sj4*sj5);
IkReal x1985=(cj1*x1970);
IkReal x1986=(x1980+x1981);
evalcond[0]=((((-1.0)*r22*x1979))+x1986+((sj4*x1977))+(((-1.0)*r21*x1984)));
evalcond[1]=((((-1.0)*r02*x1979))+x1985+(((-1.0)*r01*x1984))+(((-1.0)*x1982))+((sj4*x1974)));
evalcond[2]=((((-0.0003501)*x1978))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-0.31436)*x1981))+(((-0.31436)*x1980))+(((-1.0)*r21*x1973)));
evalcond[3]=((((-0.0003501)*x1975))+(((0.41)*sj1))+(((0.31436)*x1982))+(((-1.0)*r01*x1973))+(((-1.0)*px))+(((-0.31436)*x1985)));
evalcond[4]=(((sj3*x1975))+((r01*x1983))+x1986+((r01*x1976))+(((-1.0)*cj4*x1972*x1974))+(((-1.0)*r02*sj4*x1972)));
evalcond[5]=((((-1.0)*r22*sj4*x1972))+((sj3*x1978))+((r21*x1983))+((r21*x1976))+x1982+(((-1.0)*cj4*x1972*x1977))+(((-1.0)*x1985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1987=(sj4*sj5);
IkReal x1988=(cj4*sj1);
IkReal x1989=((1.0)*cj1);
IkReal x1990=(cj5*sj4);
IkReal x1991=((1.0)*sj1);
if( IKabs(((((-1.0)*cj4*r02*x1989))+((r21*sj1*x1987))+((r22*x1988))+(((-1.0)*r01*x1987*x1989))+((cj1*r00*x1990))+(((-1.0)*r20*x1990*x1991)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((cj1*r21*x1987))+((r01*sj1*x1987))+(((-1.0)*r00*x1990*x1991))+(((-1.0)*r20*x1989*x1990))+((r02*x1988)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02*x1989))+((r21*sj1*x1987))+((r22*x1988))+(((-1.0)*r01*x1987*x1989))+((cj1*r00*x1990))+(((-1.0)*r20*x1990*x1991))))+IKsqr((((cj1*cj4*r22))+((cj1*r21*x1987))+((r01*sj1*x1987))+(((-1.0)*r00*x1990*x1991))+(((-1.0)*r20*x1989*x1990))+((r02*x1988))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r02*x1989))+((r21*sj1*x1987))+((r22*x1988))+(((-1.0)*r01*x1987*x1989))+((cj1*r00*x1990))+(((-1.0)*r20*x1990*x1991))), (((cj1*cj4*r22))+((cj1*r21*x1987))+((r01*sj1*x1987))+(((-1.0)*r00*x1990*x1991))+(((-1.0)*r20*x1989*x1990))+((r02*x1988))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1992=IKcos(j2);
IkReal x1993=IKsin(j2);
IkReal x1994=((0.31436)*sj1);
IkReal x1995=((1.0)*cj3);
IkReal x1996=((0.0003501)*cj5);
IkReal x1997=(cj5*r00);
IkReal x1998=(r00*sj5);
IkReal x1999=(cj5*sj3);
IkReal x2000=(cj5*r20);
IkReal x2001=(r20*sj5);
IkReal x2002=((1.0)*cj4);
IkReal x2003=(sj1*x1992);
IkReal x2004=(cj1*x1992);
IkReal x2005=(cj3*cj4*sj5);
IkReal x2006=((1.0)*sj4*sj5);
IkReal x2007=(cj1*x1993);
IkReal x2008=(sj1*x1993);
IkReal x2009=((1.0)*x2007);
evalcond[0]=((((-1.0)*r22*x2002))+x2004+x2008+((sj4*x2000))+(((-1.0)*r21*x2006)));
evalcond[1]=(x2003+(((-1.0)*r01*x2006))+(((-1.0)*r02*x2002))+(((-1.0)*x2009))+((sj4*x1997)));
evalcond[2]=((((-1.0)*r21*x1996))+(((-1.0)*x1993*x1994))+(((-0.31436)*x2004))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-0.0003501)*x2001)));
evalcond[3]=((((-0.0003501)*x1998))+(((-1.0)*r01*x1996))+(((-0.41)*sj1))+(((-1.0)*px))+(((-1.0)*x1992*x1994))+(((0.31436)*x2007)));
evalcond[4]=(((r21*x2005))+(((-1.0)*cj4*x1995*x2000))+((r21*x1999))+(((-1.0)*r22*sj4*x1995))+((sj3*x2001))+x2003+(((-1.0)*x2009)));
evalcond[5]=(((r01*x2005))+((sj3*x1998))+(((-1.0)*r02*sj4*x1995))+(((-1.0)*x2008))+(((-1.0)*x2004))+((r01*x1999))+(((-1.0)*cj4*x1995*x1997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2010=((1.0)*sj1);
IkReal x2011=(cj4*r12);
IkReal x2012=(cj5*sj4);
IkReal x2013=((1.0)*cj1);
IkReal x2014=(cj4*r22);
IkReal x2015=(r21*sj4*sj5);
IkReal x2016=(r11*sj4*sj5);
if( IKabs((((cj1*x2016))+((cj1*x2011))+((sj1*x2014))+((sj1*x2015))+(((-1.0)*r20*x2010*x2012))+(((-1.0)*r10*x2012*x2013)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2015))+((cj1*x2014))+(((-1.0)*x2010*x2011))+(((-1.0)*x2010*x2016))+(((-1.0)*r20*x2012*x2013))+((r10*sj1*x2012)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2016))+((cj1*x2011))+((sj1*x2014))+((sj1*x2015))+(((-1.0)*r20*x2010*x2012))+(((-1.0)*r10*x2012*x2013))))+IKsqr((((cj1*x2015))+((cj1*x2014))+(((-1.0)*x2010*x2011))+(((-1.0)*x2010*x2016))+(((-1.0)*r20*x2012*x2013))+((r10*sj1*x2012))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2016))+((cj1*x2011))+((sj1*x2014))+((sj1*x2015))+(((-1.0)*r20*x2010*x2012))+(((-1.0)*r10*x2012*x2013))), (((cj1*x2015))+((cj1*x2014))+(((-1.0)*x2010*x2011))+(((-1.0)*x2010*x2016))+(((-1.0)*r20*x2012*x2013))+((r10*sj1*x2012))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2017=IKsin(j2);
IkReal x2018=IKcos(j2);
IkReal x2019=((0.0003501)*cj5);
IkReal x2020=(cj3*cj4);
IkReal x2021=(r21*sj5);
IkReal x2022=((1.0)*sj4);
IkReal x2023=((1.0)*cj5);
IkReal x2024=(cj5*sj3);
IkReal x2025=((0.0003501)*sj5);
IkReal x2026=(cj5*sj4);
IkReal x2027=((1.0)*cj4);
IkReal x2028=(sj3*sj5);
IkReal x2029=(r11*sj5);
IkReal x2030=(cj1*x2018);
IkReal x2031=(sj1*x2017);
IkReal x2032=(sj1*x2018);
IkReal x2033=(cj1*x2017);
IkReal x2034=(x2031+x2030);
evalcond[0]=((((-1.0)*x2021*x2022))+(((-1.0)*r22*x2027))+x2034+((r20*x2026)));
evalcond[1]=((((-1.0)*x2022*x2029))+((r10*x2026))+x2033+(((-1.0)*r12*x2027))+(((-1.0)*x2032)));
evalcond[2]=((((-1.0)*r21*x2019))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-1.0)*r20*x2025))+(((-0.31436)*x2031))+(((-0.31436)*x2030)));
evalcond[3]=((((-1.0)*r10*x2025))+(((0.41)*sj1))+(((-1.0)*py))+(((-1.0)*r11*x2019))+(((0.31436)*x2032))+(((-0.31436)*x2033)));
evalcond[4]=(((x2020*x2029))+((r10*x2028))+((r11*x2024))+x2034+(((-1.0)*r10*x2020*x2023))+(((-1.0)*cj3*r12*x2022)));
evalcond[5]=(((x2020*x2021))+(((-1.0)*r20*x2020*x2023))+x2032+(((-1.0)*cj3*r22*x2022))+(((-1.0)*x2033))+((r20*x2028))+((r21*x2024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2035=(cj4*r12);
IkReal x2036=((1.0)*sj4);
IkReal x2037=(cj5*sj1);
IkReal x2038=(cj4*r22);
IkReal x2039=(r11*sj5);
IkReal x2040=(cj1*cj5);
IkReal x2041=(r21*sj4*sj5);
if( IKabs((((r10*sj4*x2040))+((sj1*x2038))+(((-1.0)*r20*x2036*x2037))+((sj1*x2041))+(((-1.0)*cj1*x2035))+(((-1.0)*cj1*x2036*x2039)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*sj4*x2039))+(((-1.0)*r20*x2036*x2040))+((sj1*x2035))+(((-1.0)*r10*x2036*x2037))+((cj1*x2038))+((cj1*x2041)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj4*x2040))+((sj1*x2038))+(((-1.0)*r20*x2036*x2037))+((sj1*x2041))+(((-1.0)*cj1*x2035))+(((-1.0)*cj1*x2036*x2039))))+IKsqr((((sj1*sj4*x2039))+(((-1.0)*r20*x2036*x2040))+((sj1*x2035))+(((-1.0)*r10*x2036*x2037))+((cj1*x2038))+((cj1*x2041))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*sj4*x2040))+((sj1*x2038))+(((-1.0)*r20*x2036*x2037))+((sj1*x2041))+(((-1.0)*cj1*x2035))+(((-1.0)*cj1*x2036*x2039))), (((sj1*sj4*x2039))+(((-1.0)*r20*x2036*x2040))+((sj1*x2035))+(((-1.0)*r10*x2036*x2037))+((cj1*x2038))+((cj1*x2041))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2042=IKcos(j2);
IkReal x2043=IKsin(j2);
IkReal x2044=((0.31436)*sj1);
IkReal x2045=((0.0003501)*cj5);
IkReal x2046=(cj3*cj4);
IkReal x2047=(r21*sj5);
IkReal x2048=((1.0)*sj4);
IkReal x2049=((1.0)*cj5);
IkReal x2050=(cj5*sj3);
IkReal x2051=((0.0003501)*sj5);
IkReal x2052=(cj5*sj4);
IkReal x2053=((1.0)*cj4);
IkReal x2054=(r11*sj5);
IkReal x2055=(sj3*sj5);
IkReal x2056=(sj1*x2042);
IkReal x2057=(cj1*x2042);
IkReal x2058=(cj1*x2043);
IkReal x2059=(sj1*x2043);
IkReal x2060=((1.0)*x2058);
evalcond[0]=(x2057+x2059+(((-1.0)*r22*x2053))+(((-1.0)*x2047*x2048))+((r20*x2052)));
evalcond[1]=(((r10*x2052))+x2056+(((-1.0)*r12*x2053))+(((-1.0)*x2060))+(((-1.0)*x2048*x2054)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*r21*x2045))+(((-0.41)*cj1))+(((-1.0)*x2043*x2044))+(((-1.0)*r20*x2051))+(((-0.31436)*x2057)));
evalcond[3]=((((0.31436)*x2058))+(((-1.0)*r10*x2051))+(((-0.41)*sj1))+(((-1.0)*py))+(((-1.0)*x2042*x2044))+(((-1.0)*r11*x2045)));
evalcond[4]=((((-1.0)*r20*x2046*x2049))+x2056+(((-1.0)*cj3*r22*x2048))+(((-1.0)*x2060))+((x2046*x2047))+((r20*x2055))+((r21*x2050)));
evalcond[5]=(((r10*x2055))+(((-1.0)*r10*x2046*x2049))+((r11*x2050))+(((-1.0)*x2057))+(((-1.0)*x2059))+((x2046*x2054))+(((-1.0)*cj3*r12*x2048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2061=(r21*sj0);
IkReal x2062=((1.0)*sj1);
IkReal x2063=(cj4*r12);
IkReal x2064=((1.0)*cj1);
IkReal x2065=(sj4*sj5);
IkReal x2066=(cj1*x2065);
IkReal x2067=(cj5*r10*sj4);
IkReal x2068=(cj4*r22*sj0);
IkReal x2069=(cj5*r20*sj0*sj4);
CheckValue<IkReal> x2070=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2070.valid){
continue;
}
CheckValue<IkReal> x2071 = IKatan2WithCheck(IkReal(((((-1.0)*x2064*x2067))+((r11*x2066))+((sj1*x2068))+(((-1.0)*x2062*x2069))+((cj1*x2063))+((sj1*x2061*x2065)))),IkReal(((((-1.0)*x2064*x2069))+((sj1*x2067))+(((-1.0)*x2062*x2063))+((cj1*x2068))+(((-1.0)*r11*x2062*x2065))+((x2061*x2066)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2071.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2070.value)))+(x2071.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2072=IKcos(j2);
IkReal x2073=IKsin(j2);
IkReal x2074=((1.0)*sj4);
IkReal x2075=((0.0003501)*cj5);
IkReal x2076=(cj5*sj4);
IkReal x2077=((0.31436)*cj1);
IkReal x2078=(cj5*sj3);
IkReal x2079=((0.0003501)*sj5);
IkReal x2080=(sj3*sj5);
IkReal x2081=((1.0)*cj4);
IkReal x2082=(cj0*sj1);
IkReal x2083=(cj1*x2072);
IkReal x2084=(cj3*cj4*sj5);
IkReal x2085=(sj0*x2073);
IkReal x2086=(sj1*x2073);
IkReal x2087=(cj0*x2073);
IkReal x2088=(sj1*x2072);
IkReal x2089=(cj3*cj5*x2081);
IkReal x2090=((1.0)*x2088);
evalcond[0]=((((-1.0)*r22*x2081))+x2083+x2086+((r20*x2076))+(((-1.0)*r21*sj5*x2074)));
evalcond[1]=((((-1.0)*r21*x2075))+(((-1.0)*pz))+(((-1.0)*r20*x2079))+(((-0.31436)*x2086))+(((-0.41)*cj1))+(((-1.0)*x2072*x2077)));
evalcond[2]=((((-1.0)*r02*x2081))+(((-1.0)*r01*sj5*x2074))+((cj1*x2087))+(((-1.0)*x2072*x2082))+((r00*x2076)));
evalcond[3]=((((-1.0)*r11*sj5*x2074))+(((-1.0)*sj0*x2090))+((cj1*x2085))+((r10*x2076))+(((-1.0)*r12*x2081)));
evalcond[4]=((((0.41)*x2082))+(((-1.0)*x2077*x2087))+(((0.001)*sj0))+(((-1.0)*px))+(((-1.0)*r01*x2075))+(((-1.0)*r00*x2079))+(((0.31436)*x2072*x2082)));
evalcond[5]=((((0.41)*sj0*sj1))+(((-1.0)*r10*x2079))+(((-1.0)*r11*x2075))+(((0.31436)*sj0*x2088))+(((-0.001)*cj0))+(((-1.0)*x2077*x2085))+(((-1.0)*py)));
evalcond[6]=((((-1.0)*r20*x2089))+x2088+((r20*x2080))+(((-1.0)*cj3*r22*x2074))+(((-1.0)*cj1*x2073))+((r21*x2084))+((r21*x2078)));
evalcond[7]=(((x2073*x2082))+(((-1.0)*cj3*r02*x2074))+((r01*x2078))+((r01*x2084))+((cj0*x2083))+((r00*x2080))+(((-1.0)*r00*x2089)));
evalcond[8]=(((sj0*x2083))+((sj1*x2085))+((r11*x2078))+((r10*x2080))+(((-1.0)*cj3*r12*x2074))+(((-1.0)*r10*x2089))+((r11*x2084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2091=(cj1*sj4);
IkReal x2092=(cj5*r00);
IkReal x2093=(r01*sj5);
IkReal x2094=(sj1*sj4);
IkReal x2095=(cj4*r02);
IkReal x2096=(cj0*r21*sj5);
IkReal x2097=(cj0*cj4*r22);
IkReal x2098=((1.0)*cj0*cj5*r20);
CheckValue<IkReal> x2099=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2099.valid){
continue;
}
CheckValue<IkReal> x2100 = IKatan2WithCheck(IkReal((((cj1*x2095))+((x2094*x2096))+((sj1*x2097))+((x2091*x2093))+(((-1.0)*x2094*x2098))+(((-1.0)*x2091*x2092)))),IkReal((((cj1*x2097))+(((-1.0)*x2091*x2098))+((x2091*x2096))+(((-1.0)*x2093*x2094))+(((-1.0)*sj1*x2095))+((x2092*x2094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2100.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2099.value)))+(x2100.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2101=IKcos(j2);
IkReal x2102=IKsin(j2);
IkReal x2103=((1.0)*sj4);
IkReal x2104=((0.0003501)*cj5);
IkReal x2105=(cj5*sj4);
IkReal x2106=((0.31436)*cj1);
IkReal x2107=(cj5*sj3);
IkReal x2108=((0.0003501)*sj5);
IkReal x2109=(sj3*sj5);
IkReal x2110=((1.0)*cj4);
IkReal x2111=(cj0*sj1);
IkReal x2112=(cj1*x2101);
IkReal x2113=(cj3*cj4*sj5);
IkReal x2114=(sj0*x2102);
IkReal x2115=(sj1*x2102);
IkReal x2116=(cj0*x2102);
IkReal x2117=(sj1*x2101);
IkReal x2118=(cj3*cj5*x2110);
IkReal x2119=((1.0)*x2117);
evalcond[0]=(((r20*x2105))+x2112+x2115+(((-1.0)*r21*sj5*x2103))+(((-1.0)*r22*x2110)));
evalcond[1]=((((-1.0)*x2101*x2106))+(((-1.0)*pz))+(((-1.0)*r20*x2108))+(((-0.31436)*x2115))+(((-1.0)*r21*x2104))+(((-0.41)*cj1)));
evalcond[2]=(((r00*x2105))+(((-1.0)*x2101*x2111))+(((-1.0)*r02*x2110))+((cj1*x2116))+(((-1.0)*r01*sj5*x2103)));
evalcond[3]=(((r10*x2105))+(((-1.0)*r11*sj5*x2103))+(((-1.0)*r12*x2110))+((cj1*x2114))+(((-1.0)*sj0*x2119)));
evalcond[4]=((((0.31436)*x2101*x2111))+(((-1.0)*r00*x2108))+(((-1.0)*r01*x2104))+(((0.001)*sj0))+(((-1.0)*px))+(((0.41)*x2111))+(((-1.0)*x2106*x2116)));
evalcond[5]=((((0.41)*sj0*sj1))+(((-1.0)*r10*x2108))+(((-1.0)*r11*x2104))+(((-0.001)*cj0))+(((-1.0)*py))+(((0.31436)*sj0*x2117))+(((-1.0)*x2106*x2114)));
evalcond[6]=(((r20*x2109))+((r21*x2107))+(((-1.0)*r20*x2118))+((r21*x2113))+x2117+(((-1.0)*cj3*r22*x2103))+(((-1.0)*cj1*x2102)));
evalcond[7]=((((-1.0)*r00*x2118))+((r01*x2113))+((cj0*x2112))+((r00*x2109))+((r01*x2107))+((x2102*x2111))+(((-1.0)*cj3*r02*x2103)));
evalcond[8]=((((-1.0)*r10*x2118))+((sj0*x2112))+(((-1.0)*cj3*r12*x2103))+((sj1*x2114))+((r11*x2107))+((r10*x2109))+((r11*x2113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2120=((1.0)*cj0);
CheckValue<IkReal> x2121=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5)))),-1);
if(!x2121.valid){
continue;
}
CheckValue<IkReal> x2122 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x2120))+(((-1.0)*cj5*r21*x2120)))),IkReal((((cj0*cj4*cj5*r20))+((cj0*r22*sj4))+(((-1.0)*cj4*r21*sj5*x2120)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2122.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2121.value)))+(x2122.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2123=IKsin(j3);
IkReal x2124=IKcos(j3);
IkReal x2125=((1.0)*cj5);
IkReal x2126=(cj4*x2123);
IkReal x2127=((1.0)*sj5*x2124);
IkReal x2128=((1.0)*sj4*x2123);
evalcond[0]=(((r21*sj5*x2126))+(((-1.0)*r22*x2128))+(((-1.0)*r21*x2124*x2125))+(((-1.0)*r20*x2127))+(((-1.0)*r20*x2125*x2126)));
evalcond[1]=((((-1.0)*r10*x2127))+cj0+(((-1.0)*r11*x2124*x2125))+(((-1.0)*r10*x2125*x2126))+(((-1.0)*r12*x2128))+((r11*sj5*x2126)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2125*x2126))+((r01*sj5*x2126))+(((-1.0)*r00*x2127))+(((-1.0)*r02*x2128))+(((-1.0)*r01*x2124*x2125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2129=((0.766731707317073)*sj4);
IkReal x2130=((0.00085390243902439)*cj5);
IkReal x2131=((0.00085390243902439)*sj5);
IkReal x2132=((0.766731707317073)*cj4);
if( IKabs((((r12*x2132))+((r11*x2130))+((r10*x2131))+(((-1.0)*cj5*r10*x2129))+((r11*sj5*x2129))+(((2.4390243902439)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x2132))+(((-2.4390243902439)*pz))+(((-1.0)*r21*x2130))+(((-1.0)*r20*x2131))+(((-1.0)*r21*sj5*x2129))+((cj5*r20*x2129)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x2132))+((r11*x2130))+((r10*x2131))+(((-1.0)*cj5*r10*x2129))+((r11*sj5*x2129))+(((2.4390243902439)*py))))+IKsqr(((((-1.0)*r22*x2132))+(((-2.4390243902439)*pz))+(((-1.0)*r21*x2130))+(((-1.0)*r20*x2131))+(((-1.0)*r21*sj5*x2129))+((cj5*r20*x2129))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r12*x2132))+((r11*x2130))+((r10*x2131))+(((-1.0)*cj5*r10*x2129))+((r11*sj5*x2129))+(((2.4390243902439)*py))), ((((-1.0)*r22*x2132))+(((-2.4390243902439)*pz))+(((-1.0)*r21*x2130))+(((-1.0)*r20*x2131))+(((-1.0)*r21*sj5*x2129))+((cj5*r20*x2129))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2133=((1.0)*py);
IkReal x2134=((0.31436)*cj4);
IkReal x2135=((0.0003501)*cj5);
IkReal x2136=((0.31436)*sj4);
IkReal x2137=(cj5*r10);
IkReal x2138=(r20*sj5);
IkReal x2139=((0.31436)*sj3);
IkReal x2140=(r10*sj5);
IkReal x2141=(r21*sj5);
IkReal x2142=(cj5*r20);
IkReal x2143=(r11*sj5);
IkReal x2144=((0.41)*(IKsin(j1)));
IkReal x2145=((0.0003501)*x2140);
IkReal x2146=(r11*x2135);
IkReal x2147=((0.41)*(IKcos(j1)));
IkReal x2148=(r21*x2135);
IkReal x2149=((0.0003501)*x2138);
IkReal x2150=(x2133+x2146+x2145);
IkReal x2151=(x2147+x2149+x2148);
evalcond[0]=((((-1.0)*x2136*x2142))+x2151+((r22*x2134))+pz+((x2136*x2141)));
evalcond[1]=(((x2136*x2137))+(((-1.0)*x2136*x2143))+(((-1.0)*r12*x2134))+x2144+(((-1.0)*x2150)));
evalcond[2]=(x2144+(((-1.0)*cj5*r21*x2139))+(((-1.0)*x2150))+(((-1.0)*cj3*x2134*x2141))+(((-1.0)*x2138*x2139))+((cj3*x2134*x2142))+((cj3*r22*x2136)));
evalcond[3]=((((-1.0)*cj3*r12*x2136))+(((-1.0)*pz))+(((-1.0)*x2151))+((cj5*r11*x2139))+((cj3*x2134*x2143))+(((-1.0)*cj3*x2134*x2137))+((x2139*x2140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2152=((1.0)*sj1);
IkReal x2153=(cj4*r12);
IkReal x2154=(cj5*sj4);
IkReal x2155=((1.0)*cj1);
IkReal x2156=(cj4*r22);
IkReal x2157=(r21*sj4*sj5);
IkReal x2158=(r11*sj4*sj5);
if( IKabs(((((-1.0)*r10*x2154*x2155))+(((-1.0)*r20*x2152*x2154))+((sj1*x2157))+((sj1*x2156))+((cj1*x2158))+((cj1*x2153)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2152*x2158))+(((-1.0)*x2152*x2153))+((r10*sj1*x2154))+(((-1.0)*r20*x2154*x2155))+((cj1*x2157))+((cj1*x2156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x2154*x2155))+(((-1.0)*r20*x2152*x2154))+((sj1*x2157))+((sj1*x2156))+((cj1*x2158))+((cj1*x2153))))+IKsqr(((((-1.0)*x2152*x2158))+(((-1.0)*x2152*x2153))+((r10*sj1*x2154))+(((-1.0)*r20*x2154*x2155))+((cj1*x2157))+((cj1*x2156))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x2154*x2155))+(((-1.0)*r20*x2152*x2154))+((sj1*x2157))+((sj1*x2156))+((cj1*x2158))+((cj1*x2153))), ((((-1.0)*x2152*x2158))+(((-1.0)*x2152*x2153))+((r10*sj1*x2154))+(((-1.0)*r20*x2154*x2155))+((cj1*x2157))+((cj1*x2156))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2159=IKsin(j2);
IkReal x2160=IKcos(j2);
IkReal x2161=((0.0003501)*cj5);
IkReal x2162=(cj3*cj4);
IkReal x2163=(r21*sj5);
IkReal x2164=((1.0)*sj4);
IkReal x2165=((1.0)*cj5);
IkReal x2166=(cj5*sj3);
IkReal x2167=((0.0003501)*sj5);
IkReal x2168=(cj5*sj4);
IkReal x2169=((1.0)*cj4);
IkReal x2170=(sj3*sj5);
IkReal x2171=(r11*sj5);
IkReal x2172=(cj1*x2160);
IkReal x2173=(sj1*x2159);
IkReal x2174=(sj1*x2160);
IkReal x2175=(cj1*x2159);
IkReal x2176=(x2172+x2173);
evalcond[0]=((((-1.0)*x2163*x2164))+x2176+((r20*x2168))+(((-1.0)*r22*x2169)));
evalcond[1]=(x2175+(((-1.0)*x2164*x2171))+((r10*x2168))+(((-1.0)*x2174))+(((-1.0)*r12*x2169)));
evalcond[2]=((((-1.0)*r20*x2167))+(((-1.0)*r21*x2161))+(((-0.31436)*x2172))+(((-0.31436)*x2173))+(((-1.0)*pz))+(((-0.41)*cj1)));
evalcond[3]=((((-1.0)*r10*x2167))+(((0.41)*sj1))+(((-0.31436)*x2175))+(((-1.0)*py))+(((0.31436)*x2174))+(((-1.0)*r11*x2161)));
evalcond[4]=((((-1.0)*cj3*r12*x2164))+x2176+((r10*x2170))+((x2162*x2171))+((r11*x2166))+(((-1.0)*r10*x2162*x2165)));
evalcond[5]=((((-1.0)*r20*x2162*x2165))+(((-1.0)*cj3*r22*x2164))+x2174+((r21*x2166))+((r20*x2170))+(((-1.0)*x2175))+((x2162*x2163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2177=((0.766731707317073)*sj4);
IkReal x2178=((0.00085390243902439)*cj5);
IkReal x2179=((0.00085390243902439)*sj5);
IkReal x2180=((0.766731707317073)*cj4);
if( IKabs(((((-2.4390243902439)*py))+((cj5*r10*x2177))+(((-1.0)*r11*sj5*x2177))+(((-1.0)*r10*x2179))+(((-1.0)*r12*x2180))+(((-1.0)*r11*x2178)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x2178))+(((-2.4390243902439)*pz))+(((-1.0)*r20*x2179))+(((-1.0)*r21*sj5*x2177))+((cj5*r20*x2177))+(((-1.0)*r22*x2180)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.4390243902439)*py))+((cj5*r10*x2177))+(((-1.0)*r11*sj5*x2177))+(((-1.0)*r10*x2179))+(((-1.0)*r12*x2180))+(((-1.0)*r11*x2178))))+IKsqr(((((-1.0)*r21*x2178))+(((-2.4390243902439)*pz))+(((-1.0)*r20*x2179))+(((-1.0)*r21*sj5*x2177))+((cj5*r20*x2177))+(((-1.0)*r22*x2180))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.4390243902439)*py))+((cj5*r10*x2177))+(((-1.0)*r11*sj5*x2177))+(((-1.0)*r10*x2179))+(((-1.0)*r12*x2180))+(((-1.0)*r11*x2178))), ((((-1.0)*r21*x2178))+(((-2.4390243902439)*pz))+(((-1.0)*r20*x2179))+(((-1.0)*r21*sj5*x2177))+((cj5*r20*x2177))+(((-1.0)*r22*x2180))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2181=((0.31436)*cj4);
IkReal x2182=((0.0003501)*cj5);
IkReal x2183=((0.31436)*sj4);
IkReal x2184=(cj5*r10);
IkReal x2185=(r20*sj5);
IkReal x2186=((0.31436)*sj3);
IkReal x2187=(r10*sj5);
IkReal x2188=(r21*sj5);
IkReal x2189=(cj5*r20);
IkReal x2190=(r11*sj5);
IkReal x2191=((0.41)*(IKcos(j1)));
IkReal x2192=(r21*x2182);
IkReal x2193=((0.0003501)*x2185);
IkReal x2194=((0.41)*(IKsin(j1)));
IkReal x2195=((0.0003501)*x2187);
IkReal x2196=(r11*x2182);
IkReal x2197=(x2194+x2195+x2196);
IkReal x2198=(x2191+x2192+x2193+pz);
evalcond[0]=(x2197+((r12*x2181))+((x2183*x2190))+py+(((-1.0)*x2183*x2184)));
evalcond[1]=(((r22*x2181))+x2198+((x2183*x2188))+(((-1.0)*x2183*x2189)));
evalcond[2]=(((x2186*x2187))+x2198+(((-1.0)*cj3*r12*x2183))+((cj3*x2181*x2190))+(((-1.0)*cj3*x2181*x2184))+((cj5*r11*x2186)));
evalcond[3]=((((-1.0)*cj3*r22*x2183))+((cj5*r21*x2186))+(((-1.0)*py))+(((-1.0)*cj3*x2181*x2189))+((cj3*x2181*x2188))+(((-1.0)*x2197))+((x2185*x2186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2199=(cj4*r12);
IkReal x2200=((1.0)*sj4);
IkReal x2201=(cj5*sj1);
IkReal x2202=(cj4*r22);
IkReal x2203=(r11*sj5);
IkReal x2204=(cj1*cj5);
IkReal x2205=(r21*sj4*sj5);
if( IKabs(((((-1.0)*r20*x2200*x2201))+(((-1.0)*cj1*x2200*x2203))+(((-1.0)*cj1*x2199))+((r10*sj4*x2204))+((sj1*x2205))+((sj1*x2202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x2200*x2204))+((cj1*x2205))+((cj1*x2202))+((sj1*x2199))+(((-1.0)*r10*x2200*x2201))+((sj1*sj4*x2203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x2200*x2201))+(((-1.0)*cj1*x2200*x2203))+(((-1.0)*cj1*x2199))+((r10*sj4*x2204))+((sj1*x2205))+((sj1*x2202))))+IKsqr(((((-1.0)*r20*x2200*x2204))+((cj1*x2205))+((cj1*x2202))+((sj1*x2199))+(((-1.0)*r10*x2200*x2201))+((sj1*sj4*x2203))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x2200*x2201))+(((-1.0)*cj1*x2200*x2203))+(((-1.0)*cj1*x2199))+((r10*sj4*x2204))+((sj1*x2205))+((sj1*x2202))), ((((-1.0)*r20*x2200*x2204))+((cj1*x2205))+((cj1*x2202))+((sj1*x2199))+(((-1.0)*r10*x2200*x2201))+((sj1*sj4*x2203))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2206=IKcos(j2);
IkReal x2207=IKsin(j2);
IkReal x2208=((0.31436)*sj1);
IkReal x2209=((0.0003501)*cj5);
IkReal x2210=(cj3*cj4);
IkReal x2211=(r21*sj5);
IkReal x2212=((1.0)*sj4);
IkReal x2213=((1.0)*cj5);
IkReal x2214=(cj5*sj3);
IkReal x2215=((0.0003501)*sj5);
IkReal x2216=(cj5*sj4);
IkReal x2217=((1.0)*cj4);
IkReal x2218=(r11*sj5);
IkReal x2219=(sj3*sj5);
IkReal x2220=(sj1*x2206);
IkReal x2221=(cj1*x2206);
IkReal x2222=(cj1*x2207);
IkReal x2223=(sj1*x2207);
IkReal x2224=((1.0)*x2222);
evalcond[0]=(((r20*x2216))+x2223+x2221+(((-1.0)*r22*x2217))+(((-1.0)*x2211*x2212)));
evalcond[1]=(x2220+(((-1.0)*r12*x2217))+(((-1.0)*x2224))+((r10*x2216))+(((-1.0)*x2212*x2218)));
evalcond[2]=((((-1.0)*x2207*x2208))+(((-0.31436)*x2221))+(((-1.0)*pz))+(((-1.0)*r20*x2215))+(((-1.0)*r21*x2209))+(((-0.41)*cj1)));
evalcond[3]=((((-1.0)*r10*x2215))+(((-1.0)*r11*x2209))+(((-0.41)*sj1))+(((-1.0)*py))+(((0.31436)*x2222))+(((-1.0)*x2206*x2208)));
evalcond[4]=(((r20*x2219))+x2220+((x2210*x2211))+(((-1.0)*cj3*r22*x2212))+(((-1.0)*x2224))+(((-1.0)*r20*x2210*x2213))+((r21*x2214)));
evalcond[5]=((((-1.0)*cj3*r12*x2212))+((x2210*x2218))+(((-1.0)*r10*x2210*x2213))+((r11*x2214))+(((-1.0)*x2223))+(((-1.0)*x2221))+((r10*x2219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2225=((0.00085390243902439)*cj5);
IkReal x2226=((0.00085390243902439)*sj5);
IkReal x2227=((0.766731707317073)*cj4);
IkReal x2228=((0.766731707317073)*sj4*sj5);
IkReal x2229=((0.766731707317073)*cj5*sj4);
if( IKabs((((r02*x2227))+(((-1.0)*r00*x2229))+((r00*x2226))+((r01*x2225))+((r01*x2228))+(((2.4390243902439)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x2226))+(((-2.4390243902439)*pz))+(((-1.0)*r21*x2228))+(((-1.0)*r21*x2225))+((r20*x2229))+(((-1.0)*r22*x2227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x2227))+(((-1.0)*r00*x2229))+((r00*x2226))+((r01*x2225))+((r01*x2228))+(((2.4390243902439)*px))))+IKsqr(((((-1.0)*r20*x2226))+(((-2.4390243902439)*pz))+(((-1.0)*r21*x2228))+(((-1.0)*r21*x2225))+((r20*x2229))+(((-1.0)*r22*x2227))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r02*x2227))+(((-1.0)*r00*x2229))+((r00*x2226))+((r01*x2225))+((r01*x2228))+(((2.4390243902439)*px))), ((((-1.0)*r20*x2226))+(((-2.4390243902439)*pz))+(((-1.0)*r21*x2228))+(((-1.0)*r21*x2225))+((r20*x2229))+(((-1.0)*r22*x2227))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2230=((1.0)*px);
IkReal x2231=((0.31436)*cj4);
IkReal x2232=(cj5*r21);
IkReal x2233=(cj3*sj5);
IkReal x2234=(r20*sj5);
IkReal x2235=((0.31436)*sj3);
IkReal x2236=(r00*sj5);
IkReal x2237=(cj5*r00);
IkReal x2238=((0.31436)*sj4);
IkReal x2239=(cj5*r20);
IkReal x2240=(cj5*r01);
IkReal x2241=((0.41)*(IKsin(j1)));
IkReal x2242=((0.0003501)*x2236);
IkReal x2243=((0.0003501)*x2240);
IkReal x2244=((0.41)*(IKcos(j1)));
IkReal x2245=((0.0003501)*x2232);
IkReal x2246=((0.0003501)*x2234);
IkReal x2247=(cj3*x2238);
IkReal x2248=(x2230+x2242+x2243);
IkReal x2249=(x2244+x2245+x2246);
evalcond[0]=(((r21*sj5*x2238))+x2249+((r22*x2231))+(((-1.0)*x2238*x2239))+pz);
evalcond[1]=(x2241+((x2237*x2238))+(((-1.0)*r02*x2231))+(((-1.0)*x2248))+(((-1.0)*r01*sj5*x2238)));
evalcond[2]=((((-1.0)*x2234*x2235))+x2241+(((-1.0)*r21*x2231*x2233))+(((-1.0)*x2232*x2235))+(((-1.0)*x2248))+((cj3*x2231*x2239))+((r22*x2247)));
evalcond[3]=(((x2235*x2236))+(((-1.0)*r02*x2247))+(((-1.0)*cj3*x2231*x2237))+((x2235*x2240))+(((-1.0)*pz))+(((-1.0)*x2249))+((r01*x2231*x2233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2250=(cj1*sj4);
IkReal x2251=(r21*sj5);
IkReal x2252=((1.0)*cj5);
IkReal x2253=(r01*sj5);
IkReal x2254=(sj1*sj4);
IkReal x2255=(cj4*r22);
IkReal x2256=(cj4*r02);
if( IKabs(((((-1.0)*r20*x2252*x2254))+((cj1*x2256))+((sj1*x2255))+((x2251*x2254))+((x2250*x2253))+(((-1.0)*r00*x2250*x2252)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r00*x2254))+(((-1.0)*sj1*x2256))+(((-1.0)*x2253*x2254))+((cj1*x2255))+((x2250*x2251))+(((-1.0)*r20*x2250*x2252)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x2252*x2254))+((cj1*x2256))+((sj1*x2255))+((x2251*x2254))+((x2250*x2253))+(((-1.0)*r00*x2250*x2252))))+IKsqr((((cj5*r00*x2254))+(((-1.0)*sj1*x2256))+(((-1.0)*x2253*x2254))+((cj1*x2255))+((x2250*x2251))+(((-1.0)*r20*x2250*x2252))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x2252*x2254))+((cj1*x2256))+((sj1*x2255))+((x2251*x2254))+((x2250*x2253))+(((-1.0)*r00*x2250*x2252))), (((cj5*r00*x2254))+(((-1.0)*sj1*x2256))+(((-1.0)*x2253*x2254))+((cj1*x2255))+((x2250*x2251))+(((-1.0)*r20*x2250*x2252))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2257=IKsin(j2);
IkReal x2258=IKcos(j2);
IkReal x2259=((1.0)*cj3);
IkReal x2260=((0.0003501)*cj5);
IkReal x2261=(cj5*r00);
IkReal x2262=(r00*sj5);
IkReal x2263=(cj5*sj3);
IkReal x2264=(cj5*r20);
IkReal x2265=(r20*sj5);
IkReal x2266=((1.0)*cj4);
IkReal x2267=(cj1*x2258);
IkReal x2268=(sj1*x2257);
IkReal x2269=(sj1*x2258);
IkReal x2270=(cj3*cj4*sj5);
IkReal x2271=((1.0)*sj4*sj5);
IkReal x2272=(cj1*x2257);
IkReal x2273=(x2268+x2267);
evalcond[0]=(((sj4*x2264))+x2273+(((-1.0)*r21*x2271))+(((-1.0)*r22*x2266)));
evalcond[1]=(((sj4*x2261))+x2272+(((-1.0)*r01*x2271))+(((-1.0)*r02*x2266))+(((-1.0)*x2269)));
evalcond[2]=((((-1.0)*r21*x2260))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-0.31436)*x2267))+(((-0.31436)*x2268))+(((-0.0003501)*x2265)));
evalcond[3]=((((0.41)*sj1))+(((-1.0)*r01*x2260))+(((-1.0)*px))+(((-0.31436)*x2272))+(((-0.0003501)*x2262))+(((0.31436)*x2269)));
evalcond[4]=(((r01*x2270))+((r01*x2263))+x2273+(((-1.0)*r02*sj4*x2259))+(((-1.0)*cj4*x2259*x2261))+((sj3*x2262)));
evalcond[5]=(((r21*x2270))+x2269+((r21*x2263))+(((-1.0)*cj4*x2259*x2264))+((sj3*x2265))+(((-1.0)*r22*sj4*x2259))+(((-1.0)*x2272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2274=((0.00085390243902439)*cj5);
IkReal x2275=((0.00085390243902439)*sj5);
IkReal x2276=((0.766731707317073)*cj4);
IkReal x2277=((0.766731707317073)*sj4*sj5);
IkReal x2278=((0.766731707317073)*cj5*sj4);
if( IKabs(((((-2.4390243902439)*px))+((r00*x2278))+(((-1.0)*r01*x2274))+(((-1.0)*r01*x2277))+(((-1.0)*r00*x2275))+(((-1.0)*r02*x2276)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-1.0)*r21*x2274))+(((-1.0)*r21*x2277))+(((-1.0)*r20*x2275))+(((-1.0)*r22*x2276))+((r20*x2278)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.4390243902439)*px))+((r00*x2278))+(((-1.0)*r01*x2274))+(((-1.0)*r01*x2277))+(((-1.0)*r00*x2275))+(((-1.0)*r02*x2276))))+IKsqr(((((-2.4390243902439)*pz))+(((-1.0)*r21*x2274))+(((-1.0)*r21*x2277))+(((-1.0)*r20*x2275))+(((-1.0)*r22*x2276))+((r20*x2278))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.4390243902439)*px))+((r00*x2278))+(((-1.0)*r01*x2274))+(((-1.0)*r01*x2277))+(((-1.0)*r00*x2275))+(((-1.0)*r02*x2276))), ((((-2.4390243902439)*pz))+(((-1.0)*r21*x2274))+(((-1.0)*r21*x2277))+(((-1.0)*r20*x2275))+(((-1.0)*r22*x2276))+((r20*x2278))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2279=((0.31436)*cj4);
IkReal x2280=(cj5*r21);
IkReal x2281=(cj3*sj5);
IkReal x2282=(r20*sj5);
IkReal x2283=((0.31436)*sj3);
IkReal x2284=(r00*sj5);
IkReal x2285=(cj5*r00);
IkReal x2286=((0.31436)*sj4);
IkReal x2287=(cj5*r20);
IkReal x2288=(cj5*r01);
IkReal x2289=((0.41)*(IKcos(j1)));
IkReal x2290=((0.0003501)*x2280);
IkReal x2291=((0.0003501)*x2282);
IkReal x2292=((0.41)*(IKsin(j1)));
IkReal x2293=((0.0003501)*x2284);
IkReal x2294=((0.0003501)*x2288);
IkReal x2295=(cj3*x2286);
IkReal x2296=(x2293+x2292+x2294);
IkReal x2297=(x2289+x2291+x2290+pz);
evalcond[0]=(x2296+((r01*sj5*x2286))+((r02*x2279))+px+(((-1.0)*x2285*x2286)));
evalcond[1]=(x2297+((r22*x2279))+(((-1.0)*x2286*x2287))+((r21*sj5*x2286)));
evalcond[2]=(x2297+(((-1.0)*r02*x2295))+((r01*x2279*x2281))+((x2283*x2284))+((x2283*x2288))+(((-1.0)*cj3*x2279*x2285)));
evalcond[3]=(((x2282*x2283))+((x2280*x2283))+((r21*x2279*x2281))+(((-1.0)*px))+(((-1.0)*x2296))+(((-1.0)*r22*x2295))+(((-1.0)*cj3*x2279*x2287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2298=(sj4*sj5);
IkReal x2299=(cj4*sj1);
IkReal x2300=((1.0)*cj1);
IkReal x2301=(cj5*sj4);
IkReal x2302=((1.0)*sj1);
if( IKabs(((((-1.0)*r20*x2301*x2302))+((r22*x2299))+((cj1*r00*x2301))+(((-1.0)*r01*x2298*x2300))+(((-1.0)*cj4*r02*x2300))+((r21*sj1*x2298)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r00*x2301*x2302))+(((-1.0)*r20*x2300*x2301))+((r01*sj1*x2298))+((r02*x2299))+((cj1*r21*x2298)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x2301*x2302))+((r22*x2299))+((cj1*r00*x2301))+(((-1.0)*r01*x2298*x2300))+(((-1.0)*cj4*r02*x2300))+((r21*sj1*x2298))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r00*x2301*x2302))+(((-1.0)*r20*x2300*x2301))+((r01*sj1*x2298))+((r02*x2299))+((cj1*r21*x2298))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x2301*x2302))+((r22*x2299))+((cj1*r00*x2301))+(((-1.0)*r01*x2298*x2300))+(((-1.0)*cj4*r02*x2300))+((r21*sj1*x2298))), (((cj1*cj4*r22))+(((-1.0)*r00*x2301*x2302))+(((-1.0)*r20*x2300*x2301))+((r01*sj1*x2298))+((r02*x2299))+((cj1*r21*x2298))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2303=IKcos(j2);
IkReal x2304=IKsin(j2);
IkReal x2305=((0.31436)*sj1);
IkReal x2306=((1.0)*cj3);
IkReal x2307=((0.0003501)*cj5);
IkReal x2308=(cj5*r00);
IkReal x2309=(r00*sj5);
IkReal x2310=(cj5*sj3);
IkReal x2311=(cj5*r20);
IkReal x2312=(r20*sj5);
IkReal x2313=((1.0)*cj4);
IkReal x2314=(sj1*x2303);
IkReal x2315=(cj1*x2303);
IkReal x2316=(cj3*cj4*sj5);
IkReal x2317=((1.0)*sj4*sj5);
IkReal x2318=(cj1*x2304);
IkReal x2319=(sj1*x2304);
IkReal x2320=((1.0)*x2318);
evalcond[0]=((((-1.0)*r22*x2313))+x2319+x2315+((sj4*x2311))+(((-1.0)*r21*x2317)));
evalcond[1]=(x2314+(((-1.0)*r01*x2317))+(((-1.0)*r02*x2313))+((sj4*x2308))+(((-1.0)*x2320)));
evalcond[2]=((((-1.0)*r21*x2307))+(((-0.0003501)*x2312))+(((-1.0)*x2304*x2305))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-0.31436)*x2315)));
evalcond[3]=((((-1.0)*x2303*x2305))+(((-1.0)*r01*x2307))+(((-0.41)*sj1))+(((-1.0)*px))+(((-0.0003501)*x2309))+(((0.31436)*x2318)));
evalcond[4]=(((sj3*x2312))+((r21*x2310))+((r21*x2316))+x2314+(((-1.0)*r22*sj4*x2306))+(((-1.0)*cj4*x2306*x2311))+(((-1.0)*x2320)));
evalcond[5]=((((-1.0)*x2315))+(((-1.0)*x2319))+(((-1.0)*r02*sj4*x2306))+((sj3*x2309))+((r01*x2310))+((r01*x2316))+(((-1.0)*cj4*x2306*x2308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2321=(sj4*sj5);
IkReal x2322=(cj0*r01);
IkReal x2323=(cj0*r00);
IkReal x2324=(cj5*sj4);
CheckValue<IkReal> x2325=IKPowWithIntegerCheck(cj0,-2);
if(!x2325.valid){
continue;
}
if( IKabs(((-2.4390243902439)*(x2325.value)*(((((-0.31436)*x2321*x2322))+(((0.31436)*x2323*x2324))+(((-0.31436)*cj0*cj4*r02))+(((0.001)*cj0*sj0))+(((-0.0003501)*sj5*x2323))+(((-1.0)*cj0*px))+(((-0.0003501)*cj5*x2322)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((-0.766731707317073)*r21*x2321))+(((0.766731707317073)*r20*x2324))+(((-0.00085390243902439)*cj5*r21))+(((-0.766731707317073)*cj4*r22))+(((-0.00085390243902439)*r20*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.4390243902439)*(x2325.value)*(((((-0.31436)*x2321*x2322))+(((0.31436)*x2323*x2324))+(((-0.31436)*cj0*cj4*r02))+(((0.001)*cj0*sj0))+(((-0.0003501)*sj5*x2323))+(((-1.0)*cj0*px))+(((-0.0003501)*cj5*x2322))))))+IKsqr(((((-2.4390243902439)*pz))+(((-0.766731707317073)*r21*x2321))+(((0.766731707317073)*r20*x2324))+(((-0.00085390243902439)*cj5*r21))+(((-0.766731707317073)*cj4*r22))+(((-0.00085390243902439)*r20*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.4390243902439)*(x2325.value)*(((((-0.31436)*x2321*x2322))+(((0.31436)*x2323*x2324))+(((-0.31436)*cj0*cj4*r02))+(((0.001)*cj0*sj0))+(((-0.0003501)*sj5*x2323))+(((-1.0)*cj0*px))+(((-0.0003501)*cj5*x2322))))), ((((-2.4390243902439)*pz))+(((-0.766731707317073)*r21*x2321))+(((0.766731707317073)*r20*x2324))+(((-0.00085390243902439)*cj5*r21))+(((-0.766731707317073)*cj4*r22))+(((-0.00085390243902439)*r20*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2326=IKsin(j1);
IkReal x2327=IKcos(j1);
IkReal x2328=sj0*sj0;
IkReal x2329=cj0*cj0;
IkReal x2330=((0.31436)*cj4);
IkReal x2331=(r01*sj5);
IkReal x2332=((0.31436)*sj4);
IkReal x2333=(cj5*r10);
IkReal x2334=((1.0)*py);
IkReal x2335=(cj0*r20);
IkReal x2336=(cj3*cj5);
IkReal x2337=((0.31436)*sj3);
IkReal x2338=(cj5*sj0);
IkReal x2339=((1.0)*px);
IkReal x2340=((0.0003501)*sj5);
IkReal x2341=((0.0003501)*r11);
IkReal x2342=(r20*sj0);
IkReal x2343=(cj0*cj3);
IkReal x2344=(cj0*sj0);
IkReal x2345=(cj5*r01);
IkReal x2346=(cj0*r00);
IkReal x2347=(cj0*cj5);
IkReal x2348=(r11*sj5);
IkReal x2349=(r21*sj5);
IkReal x2350=(cj3*sj0);
IkReal x2351=((1.0)*pz);
IkReal x2352=((0.001)*x2344);
IkReal x2353=((0.0003501)*cj5*r21);
IkReal x2354=((0.41)*x2327);
IkReal x2355=(sj0*x2340);
IkReal x2356=((0.41)*x2326);
IkReal x2357=(x2344*x2356);
evalcond[0]=(x2353+x2354+((x2332*x2349))+(((-1.0)*cj5*r20*x2332))+((r22*x2330))+pz+((r20*x2340)));
evalcond[1]=((((-1.0)*r12*sj0*x2330))+((x2328*x2356))+(((-1.0)*sj0*x2332*x2348))+((sj0*x2332*x2333))+(((-1.0)*r10*x2355))+(((-1.0)*x2338*x2341))+(((-1.0)*x2352))+(((-1.0)*sj0*x2334)));
evalcond[2]=((((-1.0)*cj0*x2339))+(((-1.0)*x2340*x2346))+x2352+((x2329*x2356))+(((-1.0)*cj0*r02*x2330))+(((-1.0)*cj0*x2331*x2332))+((cj5*x2332*x2346))+(((-0.0003501)*cj0*x2345)));
evalcond[3]=((((-1.0)*x2340*x2342))+(((-1.0)*cj3*x2330*x2333))+(((-1.0)*sj0*x2354))+(((-1.0)*sj0*x2351))+(((-0.0003501)*r21*x2338))+((r10*sj5*x2337))+((cj5*r11*x2337))+(((-1.0)*cj3*r12*x2332))+((cj3*x2330*x2348)));
evalcond[4]=(((cj3*x2330*x2331))+(((-0.0003501)*r21*x2347))+(((-1.0)*x2335*x2340))+(((-1.0)*cj3*r02*x2332))+(((-1.0)*r00*x2330*x2336))+((x2337*x2345))+((r00*sj5*x2337))+(((-1.0)*cj0*x2354))+(((-1.0)*cj0*x2351)));
evalcond[5]=((((-1.0)*r21*x2337*x2338))+((sj0*x2356))+(((-1.0)*x2334))+(((-1.0)*sj5*x2337*x2342))+(((-0.001)*cj0))+(((-1.0)*r10*x2340))+((r22*x2332*x2350))+((x2330*x2336*x2342))+(((-1.0)*cj5*x2341))+(((-1.0)*x2330*x2349*x2350)));
evalcond[6]=(((cj0*x2356))+(((-1.0)*x2339))+((x2330*x2335*x2336))+(((-1.0)*r00*x2340))+(((0.001)*sj0))+(((-1.0)*r21*x2337*x2347))+(((-0.0003501)*x2345))+(((-1.0)*sj5*x2335*x2337))+(((-1.0)*x2330*x2343*x2349))+((r22*x2332*x2343)));
evalcond[7]=(((cj0*x2332*x2333))+(((-1.0)*cj0*x2332*x2348))+x2357+(((-1.0)*r00*x2355))+(((0.001)*x2328))+(((-0.0003501)*r01*x2338))+(((-1.0)*cj0*r12*x2330))+(((-1.0)*sj0*x2339)));
evalcond[8]=((((-1.0)*cj0*r10*x2340))+(((-1.0)*cj0*x2334))+((r00*x2332*x2338))+x2357+(((-1.0)*sj0*x2331*x2332))+(((-1.0)*x2341*x2347))+(((-0.001)*x2329))+(((-1.0)*r02*sj0*x2330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2358=(cj1*sj4);
IkReal x2359=(r21*sj5);
IkReal x2360=((1.0)*cj5);
IkReal x2361=(r01*sj5);
IkReal x2362=(sj1*sj4);
IkReal x2363=(cj4*r22);
IkReal x2364=(cj4*r02);
if( IKabs((((sj1*x2363))+((x2359*x2362))+(((-1.0)*r00*x2358*x2360))+((x2358*x2361))+((cj1*x2364))+(((-1.0)*r20*x2360*x2362)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2361*x2362))+((cj5*r00*x2362))+((x2358*x2359))+(((-1.0)*r20*x2358*x2360))+((cj1*x2363))+(((-1.0)*sj1*x2364)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2363))+((x2359*x2362))+(((-1.0)*r00*x2358*x2360))+((x2358*x2361))+((cj1*x2364))+(((-1.0)*r20*x2360*x2362))))+IKsqr(((((-1.0)*x2361*x2362))+((cj5*r00*x2362))+((x2358*x2359))+(((-1.0)*r20*x2358*x2360))+((cj1*x2363))+(((-1.0)*sj1*x2364))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2363))+((x2359*x2362))+(((-1.0)*r00*x2358*x2360))+((x2358*x2361))+((cj1*x2364))+(((-1.0)*r20*x2360*x2362))), ((((-1.0)*x2361*x2362))+((cj5*r00*x2362))+((x2358*x2359))+(((-1.0)*r20*x2358*x2360))+((cj1*x2363))+(((-1.0)*sj1*x2364))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2365=IKsin(j2);
IkReal x2366=IKcos(j2);
IkReal x2367=((1.0)*cj3);
IkReal x2368=((0.0003501)*cj5);
IkReal x2369=(cj5*r00);
IkReal x2370=(r00*sj5);
IkReal x2371=(cj5*sj3);
IkReal x2372=(cj5*r20);
IkReal x2373=(r20*sj5);
IkReal x2374=((1.0)*cj4);
IkReal x2375=(cj1*x2366);
IkReal x2376=(sj1*x2365);
IkReal x2377=(sj1*x2366);
IkReal x2378=(cj3*cj4*sj5);
IkReal x2379=((1.0)*sj4*sj5);
IkReal x2380=(cj1*x2365);
IkReal x2381=(x2375+x2376);
evalcond[0]=(x2381+(((-1.0)*r21*x2379))+((sj4*x2372))+(((-1.0)*r22*x2374)));
evalcond[1]=((((-1.0)*r02*x2374))+x2380+(((-1.0)*x2377))+(((-1.0)*r01*x2379))+((sj4*x2369)));
evalcond[2]=((((-1.0)*r21*x2368))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-0.0003501)*x2373))+(((-0.31436)*x2376))+(((-0.31436)*x2375)));
evalcond[3]=((((0.31436)*x2377))+(((-0.31436)*x2380))+(((0.41)*sj1))+(((-1.0)*r01*x2368))+(((-1.0)*px))+(((-0.0003501)*x2370)));
evalcond[4]=(x2381+(((-1.0)*r02*sj4*x2367))+((sj3*x2370))+(((-1.0)*cj4*x2367*x2369))+((r01*x2378))+((r01*x2371)));
evalcond[5]=(x2377+((sj3*x2373))+(((-1.0)*x2380))+(((-1.0)*cj4*x2367*x2372))+(((-1.0)*r22*sj4*x2367))+((r21*x2371))+((r21*x2378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2382=(sj4*sj5);
IkReal x2383=(cj4*sj1);
IkReal x2384=((1.0)*cj1);
IkReal x2385=(cj5*sj4);
IkReal x2386=((1.0)*sj1);
if( IKabs(((((-1.0)*r20*x2385*x2386))+((r21*sj1*x2382))+(((-1.0)*r01*x2382*x2384))+(((-1.0)*cj4*r02*x2384))+((r22*x2383))+((cj1*r00*x2385)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((r01*sj1*x2382))+((cj1*r21*x2382))+(((-1.0)*r00*x2385*x2386))+(((-1.0)*r20*x2384*x2385))+((r02*x2383)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x2385*x2386))+((r21*sj1*x2382))+(((-1.0)*r01*x2382*x2384))+(((-1.0)*cj4*r02*x2384))+((r22*x2383))+((cj1*r00*x2385))))+IKsqr((((cj1*cj4*r22))+((r01*sj1*x2382))+((cj1*r21*x2382))+(((-1.0)*r00*x2385*x2386))+(((-1.0)*r20*x2384*x2385))+((r02*x2383))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x2385*x2386))+((r21*sj1*x2382))+(((-1.0)*r01*x2382*x2384))+(((-1.0)*cj4*r02*x2384))+((r22*x2383))+((cj1*r00*x2385))), (((cj1*cj4*r22))+((r01*sj1*x2382))+((cj1*r21*x2382))+(((-1.0)*r00*x2385*x2386))+(((-1.0)*r20*x2384*x2385))+((r02*x2383))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2387=IKcos(j2);
IkReal x2388=IKsin(j2);
IkReal x2389=((0.31436)*sj1);
IkReal x2390=((1.0)*cj3);
IkReal x2391=((0.0003501)*cj5);
IkReal x2392=(cj5*r00);
IkReal x2393=(r00*sj5);
IkReal x2394=(cj5*sj3);
IkReal x2395=(cj5*r20);
IkReal x2396=(r20*sj5);
IkReal x2397=((1.0)*cj4);
IkReal x2398=(sj1*x2387);
IkReal x2399=(cj1*x2387);
IkReal x2400=(cj3*cj4*sj5);
IkReal x2401=((1.0)*sj4*sj5);
IkReal x2402=(cj1*x2388);
IkReal x2403=(sj1*x2388);
IkReal x2404=((1.0)*x2402);
evalcond[0]=(((sj4*x2395))+x2403+x2399+(((-1.0)*r22*x2397))+(((-1.0)*r21*x2401)));
evalcond[1]=(((sj4*x2392))+(((-1.0)*r02*x2397))+(((-1.0)*x2404))+x2398+(((-1.0)*r01*x2401)));
evalcond[2]=((((-0.31436)*x2399))+(((-1.0)*r21*x2391))+(((-1.0)*pz))+(((-1.0)*x2388*x2389))+(((-0.41)*cj1))+(((-0.0003501)*x2396)));
evalcond[3]=((((-1.0)*r01*x2391))+(((-0.41)*sj1))+(((-1.0)*px))+(((0.31436)*x2402))+(((-0.0003501)*x2393))+(((-1.0)*x2387*x2389)));
evalcond[4]=((((-1.0)*r22*sj4*x2390))+(((-1.0)*x2404))+x2398+(((-1.0)*cj4*x2390*x2395))+((sj3*x2396))+((r21*x2400))+((r21*x2394)));
evalcond[5]=((((-1.0)*x2403))+((r01*x2400))+((r01*x2394))+(((-1.0)*r02*sj4*x2390))+(((-1.0)*cj4*x2390*x2392))+(((-1.0)*x2399))+((sj3*x2393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2405=((1.0)*sj1);
IkReal x2406=(cj4*r12);
IkReal x2407=(cj5*sj4);
IkReal x2408=((1.0)*cj1);
IkReal x2409=(cj4*r22);
IkReal x2410=(r21*sj4*sj5);
IkReal x2411=(r11*sj4*sj5);
if( IKabs((((sj1*x2410))+((cj1*x2406))+((cj1*x2411))+(((-1.0)*r20*x2405*x2407))+(((-1.0)*r10*x2407*x2408))+((sj1*x2409)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2405*x2406))+(((-1.0)*r20*x2407*x2408))+((r10*sj1*x2407))+(((-1.0)*x2405*x2411))+((cj1*x2409))+((cj1*x2410)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2410))+((cj1*x2406))+((cj1*x2411))+(((-1.0)*r20*x2405*x2407))+(((-1.0)*r10*x2407*x2408))+((sj1*x2409))))+IKsqr(((((-1.0)*x2405*x2406))+(((-1.0)*r20*x2407*x2408))+((r10*sj1*x2407))+(((-1.0)*x2405*x2411))+((cj1*x2409))+((cj1*x2410))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2410))+((cj1*x2406))+((cj1*x2411))+(((-1.0)*r20*x2405*x2407))+(((-1.0)*r10*x2407*x2408))+((sj1*x2409))), ((((-1.0)*x2405*x2406))+(((-1.0)*r20*x2407*x2408))+((r10*sj1*x2407))+(((-1.0)*x2405*x2411))+((cj1*x2409))+((cj1*x2410))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2412=IKsin(j2);
IkReal x2413=IKcos(j2);
IkReal x2414=((0.0003501)*cj5);
IkReal x2415=(cj3*cj4);
IkReal x2416=(r21*sj5);
IkReal x2417=((1.0)*sj4);
IkReal x2418=((1.0)*cj5);
IkReal x2419=(cj5*sj3);
IkReal x2420=((0.0003501)*sj5);
IkReal x2421=(cj5*sj4);
IkReal x2422=((1.0)*cj4);
IkReal x2423=(sj3*sj5);
IkReal x2424=(r11*sj5);
IkReal x2425=(cj1*x2413);
IkReal x2426=(sj1*x2412);
IkReal x2427=(sj1*x2413);
IkReal x2428=(cj1*x2412);
IkReal x2429=(x2425+x2426);
evalcond[0]=(x2429+(((-1.0)*x2416*x2417))+(((-1.0)*r22*x2422))+((r20*x2421)));
evalcond[1]=(x2428+((r10*x2421))+(((-1.0)*r12*x2422))+(((-1.0)*x2427))+(((-1.0)*x2417*x2424)));
evalcond[2]=((((-0.31436)*x2425))+(((-0.31436)*x2426))+(((-1.0)*r20*x2420))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-1.0)*r21*x2414)));
evalcond[3]=((((-0.31436)*x2428))+(((-1.0)*r11*x2414))+(((0.41)*sj1))+(((0.31436)*x2427))+(((-1.0)*r10*x2420))+(((-1.0)*py)));
evalcond[4]=(x2429+((r11*x2419))+(((-1.0)*r10*x2415*x2418))+((x2415*x2424))+((r10*x2423))+(((-1.0)*cj3*r12*x2417)));
evalcond[5]=(x2427+((r21*x2419))+((x2415*x2416))+(((-1.0)*x2428))+((r20*x2423))+(((-1.0)*cj3*r22*x2417))+(((-1.0)*r20*x2415*x2418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2430=(cj4*r12);
IkReal x2431=((1.0)*sj4);
IkReal x2432=(cj5*sj1);
IkReal x2433=(cj4*r22);
IkReal x2434=(r11*sj5);
IkReal x2435=(cj1*cj5);
IkReal x2436=(r21*sj4*sj5);
if( IKabs(((((-1.0)*r20*x2431*x2432))+(((-1.0)*cj1*x2430))+((sj1*x2436))+((sj1*x2433))+(((-1.0)*cj1*x2431*x2434))+((r10*sj4*x2435)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x2431*x2435))+((sj1*sj4*x2434))+(((-1.0)*r10*x2431*x2432))+((cj1*x2436))+((cj1*x2433))+((sj1*x2430)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x2431*x2432))+(((-1.0)*cj1*x2430))+((sj1*x2436))+((sj1*x2433))+(((-1.0)*cj1*x2431*x2434))+((r10*sj4*x2435))))+IKsqr(((((-1.0)*r20*x2431*x2435))+((sj1*sj4*x2434))+(((-1.0)*r10*x2431*x2432))+((cj1*x2436))+((cj1*x2433))+((sj1*x2430))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x2431*x2432))+(((-1.0)*cj1*x2430))+((sj1*x2436))+((sj1*x2433))+(((-1.0)*cj1*x2431*x2434))+((r10*sj4*x2435))), ((((-1.0)*r20*x2431*x2435))+((sj1*sj4*x2434))+(((-1.0)*r10*x2431*x2432))+((cj1*x2436))+((cj1*x2433))+((sj1*x2430))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2437=IKcos(j2);
IkReal x2438=IKsin(j2);
IkReal x2439=((0.31436)*sj1);
IkReal x2440=((0.0003501)*cj5);
IkReal x2441=(cj3*cj4);
IkReal x2442=(r21*sj5);
IkReal x2443=((1.0)*sj4);
IkReal x2444=((1.0)*cj5);
IkReal x2445=(cj5*sj3);
IkReal x2446=((0.0003501)*sj5);
IkReal x2447=(cj5*sj4);
IkReal x2448=((1.0)*cj4);
IkReal x2449=(r11*sj5);
IkReal x2450=(sj3*sj5);
IkReal x2451=(sj1*x2437);
IkReal x2452=(cj1*x2437);
IkReal x2453=(cj1*x2438);
IkReal x2454=(sj1*x2438);
IkReal x2455=((1.0)*x2453);
evalcond[0]=(x2454+x2452+(((-1.0)*r22*x2448))+((r20*x2447))+(((-1.0)*x2442*x2443)));
evalcond[1]=((((-1.0)*x2443*x2449))+x2451+((r10*x2447))+(((-1.0)*r12*x2448))+(((-1.0)*x2455)));
evalcond[2]=((((-1.0)*x2438*x2439))+(((-1.0)*r20*x2446))+(((-1.0)*r21*x2440))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-0.31436)*x2452)));
evalcond[3]=((((-1.0)*r10*x2446))+(((0.31436)*x2453))+(((-0.41)*sj1))+(((-1.0)*py))+(((-1.0)*r11*x2440))+(((-1.0)*x2437*x2439)));
evalcond[4]=(x2451+(((-1.0)*x2455))+((r20*x2450))+(((-1.0)*cj3*r22*x2443))+(((-1.0)*r20*x2441*x2444))+((x2441*x2442))+((r21*x2445)));
evalcond[5]=(((r10*x2450))+(((-1.0)*cj3*r12*x2443))+(((-1.0)*r10*x2441*x2444))+(((-1.0)*x2452))+(((-1.0)*x2454))+((r11*x2445))+((x2441*x2449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2456=(r21*sj0);
IkReal x2457=((1.0)*sj1);
IkReal x2458=(cj4*r12);
IkReal x2459=((1.0)*cj1);
IkReal x2460=(sj4*sj5);
IkReal x2461=(cj1*x2460);
IkReal x2462=(cj5*r10*sj4);
IkReal x2463=(cj4*r22*sj0);
IkReal x2464=(cj5*r20*sj0*sj4);
CheckValue<IkReal> x2465=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2465.valid){
continue;
}
CheckValue<IkReal> x2466 = IKatan2WithCheck(IkReal((((cj1*x2458))+(((-1.0)*x2457*x2464))+((r11*x2461))+((sj1*x2463))+((sj1*x2456*x2460))+(((-1.0)*x2459*x2462)))),IkReal(((((-1.0)*r11*x2457*x2460))+((cj1*x2463))+(((-1.0)*x2457*x2458))+((x2456*x2461))+((sj1*x2462))+(((-1.0)*x2459*x2464)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2466.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2465.value)))+(x2466.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2467=IKcos(j2);
IkReal x2468=IKsin(j2);
IkReal x2469=((1.0)*sj4);
IkReal x2470=((0.0003501)*cj5);
IkReal x2471=(cj5*sj4);
IkReal x2472=((0.31436)*cj1);
IkReal x2473=(cj5*sj3);
IkReal x2474=((0.0003501)*sj5);
IkReal x2475=(sj3*sj5);
IkReal x2476=((1.0)*cj4);
IkReal x2477=(cj0*sj1);
IkReal x2478=(cj1*x2467);
IkReal x2479=(cj3*cj4*sj5);
IkReal x2480=(sj0*x2468);
IkReal x2481=(sj1*x2468);
IkReal x2482=(cj0*x2468);
IkReal x2483=(sj1*x2467);
IkReal x2484=(cj3*cj5*x2476);
IkReal x2485=((1.0)*x2483);
evalcond[0]=(x2481+x2478+((r20*x2471))+(((-1.0)*r21*sj5*x2469))+(((-1.0)*r22*x2476)));
evalcond[1]=((((-1.0)*r21*x2470))+(((-1.0)*x2467*x2472))+(((-1.0)*r20*x2474))+(((-0.31436)*x2481))+(((-1.0)*pz))+(((-0.41)*cj1)));
evalcond[2]=((((-1.0)*r01*sj5*x2469))+((cj1*x2482))+(((-1.0)*x2467*x2477))+((r00*x2471))+(((-1.0)*r02*x2476)));
evalcond[3]=((((-1.0)*r11*sj5*x2469))+((cj1*x2480))+(((-1.0)*r12*x2476))+((r10*x2471))+(((-1.0)*sj0*x2485)));
evalcond[4]=((((-1.0)*r01*x2470))+(((-1.0)*r00*x2474))+(((0.41)*x2477))+(((0.001)*sj0))+(((-1.0)*px))+(((-1.0)*x2472*x2482))+(((0.31436)*x2467*x2477)));
evalcond[5]=((((0.41)*sj0*sj1))+(((0.31436)*sj0*x2483))+(((-1.0)*r11*x2470))+(((-0.001)*cj0))+(((-1.0)*py))+(((-1.0)*r10*x2474))+(((-1.0)*x2472*x2480)));
evalcond[6]=(x2483+(((-1.0)*cj1*x2468))+(((-1.0)*cj3*r22*x2469))+((r21*x2479))+((r21*x2473))+(((-1.0)*r20*x2484))+((r20*x2475)));
evalcond[7]=(((x2468*x2477))+(((-1.0)*r00*x2484))+((r01*x2473))+((r01*x2479))+((r00*x2475))+((cj0*x2478))+(((-1.0)*cj3*r02*x2469)));
evalcond[8]=(((r10*x2475))+(((-1.0)*r10*x2484))+((sj0*x2478))+(((-1.0)*cj3*r12*x2469))+((sj1*x2480))+((r11*x2479))+((r11*x2473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2486=(cj1*sj4);
IkReal x2487=(cj5*r00);
IkReal x2488=(r01*sj5);
IkReal x2489=(sj1*sj4);
IkReal x2490=(cj4*r02);
IkReal x2491=(cj0*r21*sj5);
IkReal x2492=(cj0*cj4*r22);
IkReal x2493=((1.0)*cj0*cj5*r20);
CheckValue<IkReal> x2494 = IKatan2WithCheck(IkReal((((sj1*x2492))+((cj1*x2490))+(((-1.0)*x2489*x2493))+((x2486*x2488))+(((-1.0)*x2486*x2487))+((x2489*x2491)))),IkReal((((cj1*x2492))+((x2487*x2489))+(((-1.0)*x2486*x2493))+(((-1.0)*x2488*x2489))+((x2486*x2491))+(((-1.0)*sj1*x2490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2494.valid){
continue;
}
CheckValue<IkReal> x2495=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2495.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2494.value)+(((1.5707963267949)*(x2495.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2496=IKcos(j2);
IkReal x2497=IKsin(j2);
IkReal x2498=((1.0)*sj4);
IkReal x2499=((0.0003501)*cj5);
IkReal x2500=(cj5*sj4);
IkReal x2501=((0.31436)*cj1);
IkReal x2502=(cj5*sj3);
IkReal x2503=((0.0003501)*sj5);
IkReal x2504=(sj3*sj5);
IkReal x2505=((1.0)*cj4);
IkReal x2506=(cj0*sj1);
IkReal x2507=(cj1*x2496);
IkReal x2508=(cj3*cj4*sj5);
IkReal x2509=(sj0*x2497);
IkReal x2510=(sj1*x2497);
IkReal x2511=(cj0*x2497);
IkReal x2512=(sj1*x2496);
IkReal x2513=(cj3*cj5*x2505);
IkReal x2514=((1.0)*x2512);
evalcond[0]=(x2510+x2507+(((-1.0)*r21*sj5*x2498))+(((-1.0)*r22*x2505))+((r20*x2500)));
evalcond[1]=((((-0.31436)*x2510))+(((-1.0)*x2496*x2501))+(((-1.0)*r21*x2499))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-1.0)*r20*x2503)));
evalcond[2]=((((-1.0)*r01*sj5*x2498))+(((-1.0)*r02*x2505))+(((-1.0)*x2496*x2506))+((cj1*x2511))+((r00*x2500)));
evalcond[3]=((((-1.0)*r11*sj5*x2498))+((r10*x2500))+(((-1.0)*r12*x2505))+((cj1*x2509))+(((-1.0)*sj0*x2514)));
evalcond[4]=((((0.31436)*x2496*x2506))+(((-1.0)*r00*x2503))+(((-1.0)*r01*x2499))+(((0.001)*sj0))+(((-1.0)*px))+(((0.41)*x2506))+(((-1.0)*x2501*x2511)));
evalcond[5]=((((0.41)*sj0*sj1))+(((-0.001)*cj0))+(((-1.0)*py))+(((0.31436)*sj0*x2512))+(((-1.0)*x2501*x2509))+(((-1.0)*r11*x2499))+(((-1.0)*r10*x2503)));
evalcond[6]=(x2512+(((-1.0)*cj3*r22*x2498))+(((-1.0)*cj1*x2497))+((r21*x2508))+((r21*x2502))+(((-1.0)*r20*x2513))+((r20*x2504)));
evalcond[7]=(((x2497*x2506))+((cj0*x2507))+(((-1.0)*r00*x2513))+(((-1.0)*cj3*r02*x2498))+((r00*x2504))+((r01*x2502))+((r01*x2508)));
evalcond[8]=(((r10*x2504))+(((-1.0)*cj3*r12*x2498))+((sj1*x2509))+((sj0*x2507))+(((-1.0)*r10*x2513))+((r11*x2502))+((r11*x2508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2515=(sj4*sj5);
IkReal x2516=(r11*sj0);
IkReal x2517=((0.31436)*sj0);
IkReal x2518=(cj5*sj4);
CheckValue<IkReal> x2519=IKPowWithIntegerCheck(sj0,-2);
if(!x2519.valid){
continue;
}
if( IKabs(((-2.4390243902439)*(x2519.value)*(((((-0.0003501)*cj5*x2516))+(((-0.0003501)*r10*sj0*sj5))+(((-0.001)*cj0*sj0))+((r10*x2517*x2518))+(((-1.0)*py*sj0))+(((-0.31436)*x2515*x2516))+(((-1.0)*cj4*r12*x2517)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.4390243902439)*pz))+(((0.766731707317073)*r20*x2518))+(((-0.00085390243902439)*cj5*r21))+(((-0.766731707317073)*r21*x2515))+(((-0.766731707317073)*cj4*r22))+(((-0.00085390243902439)*r20*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.4390243902439)*(x2519.value)*(((((-0.0003501)*cj5*x2516))+(((-0.0003501)*r10*sj0*sj5))+(((-0.001)*cj0*sj0))+((r10*x2517*x2518))+(((-1.0)*py*sj0))+(((-0.31436)*x2515*x2516))+(((-1.0)*cj4*r12*x2517))))))+IKsqr(((((-2.4390243902439)*pz))+(((0.766731707317073)*r20*x2518))+(((-0.00085390243902439)*cj5*r21))+(((-0.766731707317073)*r21*x2515))+(((-0.766731707317073)*cj4*r22))+(((-0.00085390243902439)*r20*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.4390243902439)*(x2519.value)*(((((-0.0003501)*cj5*x2516))+(((-0.0003501)*r10*sj0*sj5))+(((-0.001)*cj0*sj0))+((r10*x2517*x2518))+(((-1.0)*py*sj0))+(((-0.31436)*x2515*x2516))+(((-1.0)*cj4*r12*x2517))))), ((((-2.4390243902439)*pz))+(((0.766731707317073)*r20*x2518))+(((-0.00085390243902439)*cj5*r21))+(((-0.766731707317073)*r21*x2515))+(((-0.766731707317073)*cj4*r22))+(((-0.00085390243902439)*r20*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2520=IKsin(j1);
IkReal x2521=IKcos(j1);
IkReal x2522=sj0*sj0;
IkReal x2523=cj0*cj0;
IkReal x2524=((0.31436)*cj4);
IkReal x2525=(r01*sj5);
IkReal x2526=((0.31436)*sj4);
IkReal x2527=(cj5*r10);
IkReal x2528=((1.0)*py);
IkReal x2529=(cj0*r20);
IkReal x2530=(cj3*cj5);
IkReal x2531=((0.31436)*sj3);
IkReal x2532=(cj5*sj0);
IkReal x2533=((1.0)*px);
IkReal x2534=((0.0003501)*sj5);
IkReal x2535=((0.0003501)*r11);
IkReal x2536=(r20*sj0);
IkReal x2537=(cj0*cj3);
IkReal x2538=(cj0*sj0);
IkReal x2539=(cj5*r01);
IkReal x2540=(cj0*r00);
IkReal x2541=(cj0*cj5);
IkReal x2542=(r11*sj5);
IkReal x2543=(r21*sj5);
IkReal x2544=(cj3*sj0);
IkReal x2545=((1.0)*pz);
IkReal x2546=((0.001)*x2538);
IkReal x2547=((0.0003501)*cj5*r21);
IkReal x2548=((0.41)*x2521);
IkReal x2549=(sj0*x2534);
IkReal x2550=((0.41)*x2520);
IkReal x2551=(x2538*x2550);
evalcond[0]=(((r22*x2524))+x2547+x2548+((r20*x2534))+pz+((x2526*x2543))+(((-1.0)*cj5*r20*x2526)));
evalcond[1]=((((-1.0)*sj0*x2528))+(((-1.0)*r10*x2549))+(((-1.0)*sj0*x2526*x2542))+(((-1.0)*r12*sj0*x2524))+((x2522*x2550))+(((-1.0)*x2546))+((sj0*x2526*x2527))+(((-1.0)*x2532*x2535)));
evalcond[2]=(x2546+((cj5*x2526*x2540))+(((-1.0)*cj0*x2525*x2526))+(((-1.0)*cj0*x2533))+(((-0.0003501)*cj0*x2539))+((x2523*x2550))+(((-1.0)*cj0*r02*x2524))+(((-1.0)*x2534*x2540)));
evalcond[3]=((((-1.0)*cj3*r12*x2526))+(((-1.0)*sj0*x2545))+(((-1.0)*sj0*x2548))+(((-1.0)*x2534*x2536))+((cj5*r11*x2531))+((cj3*x2524*x2542))+((r10*sj5*x2531))+(((-0.0003501)*r21*x2532))+(((-1.0)*cj3*x2524*x2527)));
evalcond[4]=(((r00*sj5*x2531))+(((-0.0003501)*r21*x2541))+(((-1.0)*cj0*x2545))+(((-1.0)*cj0*x2548))+((x2531*x2539))+(((-1.0)*r00*x2524*x2530))+(((-1.0)*cj3*r02*x2526))+((cj3*x2524*x2525))+(((-1.0)*x2529*x2534)));
evalcond[5]=((((-1.0)*r21*x2531*x2532))+(((-0.001)*cj0))+(((-1.0)*r10*x2534))+(((-1.0)*cj5*x2535))+(((-1.0)*sj5*x2531*x2536))+((sj0*x2550))+(((-1.0)*x2524*x2543*x2544))+((r22*x2526*x2544))+(((-1.0)*x2528))+((x2524*x2530*x2536)));
evalcond[6]=(((r22*x2526*x2537))+(((-1.0)*r00*x2534))+(((-1.0)*x2533))+(((0.001)*sj0))+(((-0.0003501)*x2539))+(((-1.0)*x2524*x2537*x2543))+((x2524*x2529*x2530))+((cj0*x2550))+(((-1.0)*r21*x2531*x2541))+(((-1.0)*sj5*x2529*x2531)));
evalcond[7]=(x2551+(((-1.0)*sj0*x2533))+(((-0.0003501)*r01*x2532))+(((-1.0)*cj0*x2526*x2542))+(((-1.0)*r00*x2549))+(((-1.0)*cj0*r12*x2524))+(((0.001)*x2522))+((cj0*x2526*x2527)));
evalcond[8]=((((-1.0)*cj0*x2528))+x2551+((r00*x2526*x2532))+(((-0.001)*x2523))+(((-1.0)*sj0*x2525*x2526))+(((-1.0)*cj0*r10*x2534))+(((-1.0)*x2535*x2541))+(((-1.0)*r02*sj0*x2524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2552=(cj1*sj4);
IkReal x2553=(r21*sj5);
IkReal x2554=((1.0)*cj5);
IkReal x2555=(r01*sj5);
IkReal x2556=(sj1*sj4);
IkReal x2557=(cj4*r22);
IkReal x2558=(cj4*r02);
if( IKabs((((cj1*x2558))+((sj1*x2557))+((x2553*x2556))+((x2552*x2555))+(((-1.0)*r20*x2554*x2556))+(((-1.0)*r00*x2552*x2554)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2555*x2556))+((cj5*r00*x2556))+((cj1*x2557))+(((-1.0)*r20*x2552*x2554))+((x2552*x2553))+(((-1.0)*sj1*x2558)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2558))+((sj1*x2557))+((x2553*x2556))+((x2552*x2555))+(((-1.0)*r20*x2554*x2556))+(((-1.0)*r00*x2552*x2554))))+IKsqr(((((-1.0)*x2555*x2556))+((cj5*r00*x2556))+((cj1*x2557))+(((-1.0)*r20*x2552*x2554))+((x2552*x2553))+(((-1.0)*sj1*x2558))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2558))+((sj1*x2557))+((x2553*x2556))+((x2552*x2555))+(((-1.0)*r20*x2554*x2556))+(((-1.0)*r00*x2552*x2554))), ((((-1.0)*x2555*x2556))+((cj5*r00*x2556))+((cj1*x2557))+(((-1.0)*r20*x2552*x2554))+((x2552*x2553))+(((-1.0)*sj1*x2558))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2559=IKsin(j2);
IkReal x2560=IKcos(j2);
IkReal x2561=((1.0)*cj3);
IkReal x2562=((0.0003501)*cj5);
IkReal x2563=(cj5*r00);
IkReal x2564=(r00*sj5);
IkReal x2565=(cj5*sj3);
IkReal x2566=(cj5*r20);
IkReal x2567=(r20*sj5);
IkReal x2568=((1.0)*cj4);
IkReal x2569=(cj1*x2560);
IkReal x2570=(sj1*x2559);
IkReal x2571=(sj1*x2560);
IkReal x2572=(cj3*cj4*sj5);
IkReal x2573=((1.0)*sj4*sj5);
IkReal x2574=(cj1*x2559);
IkReal x2575=(x2569+x2570);
evalcond[0]=(x2575+(((-1.0)*r22*x2568))+(((-1.0)*r21*x2573))+((sj4*x2566)));
evalcond[1]=(x2574+(((-1.0)*r02*x2568))+(((-1.0)*x2571))+((sj4*x2563))+(((-1.0)*r01*x2573)));
evalcond[2]=((((-0.31436)*x2570))+(((-1.0)*r21*x2562))+(((-0.0003501)*x2567))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-0.31436)*x2569)));
evalcond[3]=((((-0.31436)*x2574))+(((-1.0)*r01*x2562))+(((0.31436)*x2571))+(((0.41)*sj1))+(((-0.0003501)*x2564))+(((-1.0)*px)));
evalcond[4]=(x2575+((r01*x2565))+((sj3*x2564))+(((-1.0)*r02*sj4*x2561))+(((-1.0)*cj4*x2561*x2563))+((r01*x2572)));
evalcond[5]=(((r21*x2572))+x2571+((sj3*x2567))+(((-1.0)*x2574))+(((-1.0)*cj4*x2561*x2566))+(((-1.0)*r22*sj4*x2561))+((r21*x2565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2576=(sj4*sj5);
IkReal x2577=(cj4*sj1);
IkReal x2578=((1.0)*cj1);
IkReal x2579=(cj5*sj4);
IkReal x2580=((1.0)*sj1);
if( IKabs(((((-1.0)*cj4*r02*x2578))+((cj1*r00*x2579))+(((-1.0)*r20*x2579*x2580))+(((-1.0)*r01*x2576*x2578))+((r21*sj1*x2576))+((r22*x2577)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj1*x2576))+((cj1*cj4*r22))+((cj1*r21*x2576))+(((-1.0)*r00*x2579*x2580))+((r02*x2577))+(((-1.0)*r20*x2578*x2579)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02*x2578))+((cj1*r00*x2579))+(((-1.0)*r20*x2579*x2580))+(((-1.0)*r01*x2576*x2578))+((r21*sj1*x2576))+((r22*x2577))))+IKsqr((((r01*sj1*x2576))+((cj1*cj4*r22))+((cj1*r21*x2576))+(((-1.0)*r00*x2579*x2580))+((r02*x2577))+(((-1.0)*r20*x2578*x2579))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r02*x2578))+((cj1*r00*x2579))+(((-1.0)*r20*x2579*x2580))+(((-1.0)*r01*x2576*x2578))+((r21*sj1*x2576))+((r22*x2577))), (((r01*sj1*x2576))+((cj1*cj4*r22))+((cj1*r21*x2576))+(((-1.0)*r00*x2579*x2580))+((r02*x2577))+(((-1.0)*r20*x2578*x2579))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2581=IKcos(j2);
IkReal x2582=IKsin(j2);
IkReal x2583=((0.31436)*sj1);
IkReal x2584=((1.0)*cj3);
IkReal x2585=((0.0003501)*cj5);
IkReal x2586=(cj5*r00);
IkReal x2587=(r00*sj5);
IkReal x2588=(cj5*sj3);
IkReal x2589=(cj5*r20);
IkReal x2590=(r20*sj5);
IkReal x2591=((1.0)*cj4);
IkReal x2592=(sj1*x2581);
IkReal x2593=(cj1*x2581);
IkReal x2594=(cj3*cj4*sj5);
IkReal x2595=((1.0)*sj4*sj5);
IkReal x2596=(cj1*x2582);
IkReal x2597=(sj1*x2582);
IkReal x2598=((1.0)*x2596);
evalcond[0]=(x2597+x2593+(((-1.0)*r22*x2591))+(((-1.0)*r21*x2595))+((sj4*x2589)));
evalcond[1]=(x2592+(((-1.0)*r01*x2595))+(((-1.0)*r02*x2591))+(((-1.0)*x2598))+((sj4*x2586)));
evalcond[2]=((((-1.0)*r21*x2585))+(((-0.0003501)*x2590))+(((-1.0)*pz))+(((-0.41)*cj1))+(((-0.31436)*x2593))+(((-1.0)*x2582*x2583)));
evalcond[3]=((((-1.0)*r01*x2585))+(((0.31436)*x2596))+(((-0.41)*sj1))+(((-0.0003501)*x2587))+(((-1.0)*px))+(((-1.0)*x2581*x2583)));
evalcond[4]=(x2592+((sj3*x2590))+(((-1.0)*x2598))+(((-1.0)*cj4*x2584*x2589))+(((-1.0)*r22*sj4*x2584))+((r21*x2588))+((r21*x2594)));
evalcond[5]=(((r01*x2588))+(((-1.0)*x2593))+(((-1.0)*x2597))+((r01*x2594))+((sj3*x2587))+(((-1.0)*r02*sj4*x2584))+(((-1.0)*cj4*x2584*x2586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2599=((1.0)*sj1);
IkReal x2600=(cj4*r12);
IkReal x2601=(cj5*sj4);
IkReal x2602=((1.0)*cj1);
IkReal x2603=(cj4*r22);
IkReal x2604=(r21*sj4*sj5);
IkReal x2605=(r11*sj4*sj5);
if( IKabs(((((-1.0)*r10*x2601*x2602))+((cj1*x2605))+((cj1*x2600))+(((-1.0)*r20*x2599*x2601))+((sj1*x2603))+((sj1*x2604)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2604))+((cj1*x2603))+((r10*sj1*x2601))+(((-1.0)*r20*x2601*x2602))+(((-1.0)*x2599*x2605))+(((-1.0)*x2599*x2600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x2601*x2602))+((cj1*x2605))+((cj1*x2600))+(((-1.0)*r20*x2599*x2601))+((sj1*x2603))+((sj1*x2604))))+IKsqr((((cj1*x2604))+((cj1*x2603))+((r10*sj1*x2601))+(((-1.0)*r20*x2601*x2602))+(((-1.0)*x2599*x2605))+(((-1.0)*x2599*x2600))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x2601*x2602))+((cj1*x2605))+((cj1*x2600))+(((-1.0)*r20*x2599*x2601))+((sj1*x2603))+((sj1*x2604))), (((cj1*x2604))+((cj1*x2603))+((r10*sj1*x2601))+(((-1.0)*r20*x2601*x2602))+(((-1.0)*x2599*x2605))+(((-1.0)*x2599*x2600))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2606=IKsin(j2);
IkReal x2607=IKcos(j2);
IkReal x2608=((0.0003501)*cj5);
IkReal x2609=(cj3*cj4);
IkReal x2610=(r21*sj5);
IkReal x2611=((1.0)*sj4);
IkReal x2612=((1.0)*cj5);
IkReal x2613=(cj5*sj3);
IkReal x2614=((0.0003501)*sj5);
IkReal x2615=(cj5*sj4);
IkReal x2616=((1.0)*cj4);
IkReal x2617=(sj3*sj5);
IkReal x2618=(r11*sj5);
IkReal x2619=(cj1*x2607);
IkReal x2620=(sj1*x2606);
IkReal x2621=(sj1*x2607);
IkReal x2622=(cj1*x2606);
IkReal x2623=(x2619+x2620);
evalcond[0]=((((-1.0)*x2610*x2611))+((r20*x2615))+(((-1.0)*r22*x2616))+x2623);
evalcond[1]=((((-1.0)*x2611*x2618))+(((-1.0)*r12*x2616))+(((-1.0)*x2621))+((r10*x2615))+x2622);
evalcond[2]=((((-1.0)*pz))+(((-0.31436)*x2619))+(((-0.41)*cj1))+(((-0.31436)*x2620))+(((-1.0)*r21*x2608))+(((-1.0)*r20*x2614)));
evalcond[3]=((((0.41)*sj1))+(((-1.0)*r11*x2608))+(((-1.0)*py))+(((-1.0)*r10*x2614))+(((-0.31436)*x2622))+(((0.31436)*x2621)));
evalcond[4]=((((-1.0)*r10*x2609*x2612))+(((-1.0)*cj3*r12*x2611))+((r11*x2613))+((r10*x2617))+((x2609*x2618))+x2623);
evalcond[5]=(((r20*x2617))+(((-1.0)*x2622))+(((-1.0)*r20*x2609*x2612))+(((-1.0)*cj3*r22*x2611))+((x2609*x2610))+((r21*x2613))+x2621);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2624=(cj4*r12);
IkReal x2625=((1.0)*sj4);
IkReal x2626=(cj5*sj1);
IkReal x2627=(cj4*r22);
IkReal x2628=(r11*sj5);
IkReal x2629=(cj1*cj5);
IkReal x2630=(r21*sj4*sj5);
if( IKabs((((sj1*x2630))+(((-1.0)*cj1*x2625*x2628))+(((-1.0)*r20*x2625*x2626))+(((-1.0)*cj1*x2624))+((sj1*x2627))+((r10*sj4*x2629)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*sj4*x2628))+((cj1*x2630))+(((-1.0)*r20*x2625*x2629))+((cj1*x2627))+(((-1.0)*r10*x2625*x2626))+((sj1*x2624)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2630))+(((-1.0)*cj1*x2625*x2628))+(((-1.0)*r20*x2625*x2626))+(((-1.0)*cj1*x2624))+((sj1*x2627))+((r10*sj4*x2629))))+IKsqr((((sj1*sj4*x2628))+((cj1*x2630))+(((-1.0)*r20*x2625*x2629))+((cj1*x2627))+(((-1.0)*r10*x2625*x2626))+((sj1*x2624))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2630))+(((-1.0)*cj1*x2625*x2628))+(((-1.0)*r20*x2625*x2626))+(((-1.0)*cj1*x2624))+((sj1*x2627))+((r10*sj4*x2629))), (((sj1*sj4*x2628))+((cj1*x2630))+(((-1.0)*r20*x2625*x2629))+((cj1*x2627))+(((-1.0)*r10*x2625*x2626))+((sj1*x2624))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2631=IKcos(j2);
IkReal x2632=IKsin(j2);
IkReal x2633=((0.31436)*sj1);
IkReal x2634=((0.0003501)*cj5);
IkReal x2635=(cj3*cj4);
IkReal x2636=(r21*sj5);
IkReal x2637=((1.0)*sj4);
IkReal x2638=((1.0)*cj5);
IkReal x2639=(cj5*sj3);
IkReal x2640=((0.0003501)*sj5);
IkReal x2641=(cj5*sj4);
IkReal x2642=((1.0)*cj4);
IkReal x2643=(r11*sj5);
IkReal x2644=(sj3*sj5);
IkReal x2645=(sj1*x2631);
IkReal x2646=(cj1*x2631);
IkReal x2647=(cj1*x2632);
IkReal x2648=(sj1*x2632);
IkReal x2649=((1.0)*x2647);
evalcond[0]=((((-1.0)*r22*x2642))+(((-1.0)*x2636*x2637))+x2648+x2646+((r20*x2641)));
evalcond[1]=((((-1.0)*r12*x2642))+(((-1.0)*x2637*x2643))+((r10*x2641))+(((-1.0)*x2649))+x2645);
evalcond[2]=((((-0.31436)*x2646))+(((-1.0)*r21*x2634))+(((-1.0)*r20*x2640))+(((-1.0)*x2632*x2633))+(((-1.0)*pz))+(((-0.41)*cj1)));
evalcond[3]=((((-0.41)*sj1))+(((-1.0)*py))+(((0.31436)*x2647))+(((-1.0)*r11*x2634))+(((-1.0)*x2631*x2633))+(((-1.0)*r10*x2640)));
evalcond[4]=((((-1.0)*cj3*r22*x2637))+(((-1.0)*r20*x2635*x2638))+((r21*x2639))+(((-1.0)*x2649))+((x2635*x2636))+x2645+((r20*x2644)));
evalcond[5]=((((-1.0)*r10*x2635*x2638))+((r11*x2639))+((r10*x2644))+(((-1.0)*cj3*r12*x2637))+((x2635*x2643))+(((-1.0)*x2648))+(((-1.0)*x2646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2650=(r21*sj0);
IkReal x2651=((1.0)*sj1);
IkReal x2652=(cj4*r12);
IkReal x2653=((1.0)*cj1);
IkReal x2654=(sj4*sj5);
IkReal x2655=(cj1*x2654);
IkReal x2656=(cj5*r10*sj4);
IkReal x2657=(cj4*r22*sj0);
IkReal x2658=(cj5*r20*sj0*sj4);
CheckValue<IkReal> x2659 = IKatan2WithCheck(IkReal(((((-1.0)*x2651*x2658))+((r11*x2655))+((cj1*x2652))+((sj1*x2650*x2654))+(((-1.0)*x2653*x2656))+((sj1*x2657)))),IkReal(((((-1.0)*r11*x2651*x2654))+(((-1.0)*x2651*x2652))+((cj1*x2657))+((x2650*x2655))+(((-1.0)*x2653*x2658))+((sj1*x2656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2659.valid){
continue;
}
CheckValue<IkReal> x2660=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2660.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2659.value)+(((1.5707963267949)*(x2660.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2661=IKcos(j2);
IkReal x2662=IKsin(j2);
IkReal x2663=((1.0)*sj4);
IkReal x2664=((0.0003501)*cj5);
IkReal x2665=(cj5*sj4);
IkReal x2666=((0.31436)*cj1);
IkReal x2667=(cj5*sj3);
IkReal x2668=((0.0003501)*sj5);
IkReal x2669=(sj3*sj5);
IkReal x2670=((1.0)*cj4);
IkReal x2671=(cj0*sj1);
IkReal x2672=(cj1*x2661);
IkReal x2673=(cj3*cj4*sj5);
IkReal x2674=(sj0*x2662);
IkReal x2675=(sj1*x2662);
IkReal x2676=(cj0*x2662);
IkReal x2677=(sj1*x2661);
IkReal x2678=(cj3*cj5*x2670);
IkReal x2679=((1.0)*x2677);
evalcond[0]=((((-1.0)*r21*sj5*x2663))+(((-1.0)*r22*x2670))+((r20*x2665))+x2672+x2675);
evalcond[1]=((((-0.31436)*x2675))+(((-1.0)*pz))+(((-1.0)*r20*x2668))+(((-0.41)*cj1))+(((-1.0)*r21*x2664))+(((-1.0)*x2661*x2666)));
evalcond[2]=(((cj1*x2676))+(((-1.0)*r02*x2670))+((r00*x2665))+(((-1.0)*r01*sj5*x2663))+(((-1.0)*x2661*x2671)));
evalcond[3]=((((-1.0)*r12*x2670))+(((-1.0)*sj0*x2679))+((cj1*x2674))+((r10*x2665))+(((-1.0)*r11*sj5*x2663)));
evalcond[4]=((((-1.0)*r00*x2668))+(((-1.0)*r01*x2664))+(((0.001)*sj0))+(((-1.0)*px))+(((0.31436)*x2661*x2671))+(((-1.0)*x2666*x2676))+(((0.41)*x2671)));
evalcond[5]=((((0.41)*sj0*sj1))+(((-1.0)*r11*x2664))+(((-0.001)*cj0))+(((0.31436)*sj0*x2677))+(((-1.0)*py))+(((-1.0)*x2666*x2674))+(((-1.0)*r10*x2668)));
evalcond[6]=((((-1.0)*cj3*r22*x2663))+((r21*x2667))+((r21*x2673))+(((-1.0)*cj1*x2662))+(((-1.0)*r20*x2678))+((r20*x2669))+x2677);
evalcond[7]=((((-1.0)*cj3*r02*x2663))+((x2662*x2671))+(((-1.0)*r00*x2678))+((cj0*x2672))+((r00*x2669))+((r01*x2673))+((r01*x2667)));
evalcond[8]=(((sj1*x2674))+((sj0*x2672))+((r10*x2669))+((r11*x2673))+(((-1.0)*r10*x2678))+((r11*x2667))+(((-1.0)*cj3*r12*x2663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2680=(cj1*sj4);
IkReal x2681=(cj5*r00);
IkReal x2682=(r01*sj5);
IkReal x2683=(sj1*sj4);
IkReal x2684=(cj4*r02);
IkReal x2685=(cj0*r21*sj5);
IkReal x2686=(cj0*cj4*r22);
IkReal x2687=((1.0)*cj0*cj5*r20);
CheckValue<IkReal> x2688=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2688.valid){
continue;
}
CheckValue<IkReal> x2689 = IKatan2WithCheck(IkReal(((((-1.0)*x2683*x2687))+((sj1*x2686))+((x2683*x2685))+(((-1.0)*x2680*x2681))+((cj1*x2684))+((x2680*x2682)))),IkReal(((((-1.0)*x2682*x2683))+(((-1.0)*sj1*x2684))+(((-1.0)*x2680*x2687))+((cj1*x2686))+((x2681*x2683))+((x2680*x2685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2689.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2688.value)))+(x2689.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2690=IKcos(j2);
IkReal x2691=IKsin(j2);
IkReal x2692=((1.0)*sj4);
IkReal x2693=((0.0003501)*cj5);
IkReal x2694=(cj5*sj4);
IkReal x2695=((0.31436)*cj1);
IkReal x2696=(cj5*sj3);
IkReal x2697=((0.0003501)*sj5);
IkReal x2698=(sj3*sj5);
IkReal x2699=((1.0)*cj4);
IkReal x2700=(cj0*sj1);
IkReal x2701=(cj1*x2690);
IkReal x2702=(cj3*cj4*sj5);
IkReal x2703=(sj0*x2691);
IkReal x2704=(sj1*x2691);
IkReal x2705=(cj0*x2691);
IkReal x2706=(sj1*x2690);
IkReal x2707=(cj3*cj5*x2699);
IkReal x2708=((1.0)*x2706);
evalcond[0]=(x2704+x2701+(((-1.0)*r21*sj5*x2692))+(((-1.0)*r22*x2699))+((r20*x2694)));
evalcond[1]=((((-1.0)*pz))+(((-0.41)*cj1))+(((-1.0)*x2690*x2695))+(((-1.0)*r20*x2697))+(((-0.31436)*x2704))+(((-1.0)*r21*x2693)));
evalcond[2]=((((-1.0)*x2690*x2700))+(((-1.0)*r02*x2699))+((r00*x2694))+(((-1.0)*r01*sj5*x2692))+((cj1*x2705)));
evalcond[3]=((((-1.0)*sj0*x2708))+(((-1.0)*r11*sj5*x2692))+((r10*x2694))+(((-1.0)*r12*x2699))+((cj1*x2703)));
evalcond[4]=((((0.41)*x2700))+(((0.001)*sj0))+(((0.31436)*x2690*x2700))+(((-1.0)*px))+(((-1.0)*r00*x2697))+(((-1.0)*r01*x2693))+(((-1.0)*x2695*x2705)));
evalcond[5]=((((0.41)*sj0*sj1))+(((-1.0)*r10*x2697))+(((-0.001)*cj0))+(((-1.0)*py))+(((0.31436)*sj0*x2706))+(((-1.0)*x2695*x2703))+(((-1.0)*r11*x2693)));
evalcond[6]=(x2706+(((-1.0)*r20*x2707))+((r21*x2702))+((r21*x2696))+(((-1.0)*cj1*x2691))+((r20*x2698))+(((-1.0)*cj3*r22*x2692)));
evalcond[7]=((((-1.0)*cj3*r02*x2692))+(((-1.0)*r00*x2707))+((r01*x2702))+((cj0*x2701))+((r00*x2698))+((r01*x2696))+((x2691*x2700)));
evalcond[8]=(((sj0*x2701))+(((-1.0)*r10*x2707))+((r11*x2702))+((r10*x2698))+(((-1.0)*cj3*r12*x2692))+((r11*x2696))+((sj1*x2703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "6ccb489f9bf89da4646579029389e25f"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
