version: '3'

services:
  roscore:
    image: osrf/ros:noetic-desktop-full
    # networks:
    #   - tbot_net
    network_mode: host
    # ports:
    #   - 11311:11311
    command: stdbuf -o L roscore

  foxy_noetic_bridge:
    image: osrf/ros:foxy-ros1-bridge
    network_mode: host
    depends_on:
      - roscore
      - main
    command: ros2 run ros1_bridge static_bridge /chatter

  main:
    build:
      context: .
      dockerfile: dockerfile
    image: tbot/main:latest
    environment:
      - DISPLAY=${DISPLAY}
      - "QT_X11_NO_MITSHM=1"
      # - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - "/tmp/.X11-unix:/tmp/.X11-unix:rw"
      - ros_kortex:/ros_kortex
      # - ros_kortex_vision:/ros_kortex_vision
    # networks:
    #   - tbot_net
    network_mode: host
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    depends_on:
      - roscore
    command: roslaunch kortex_gazebo start_senario_1.launch --wait
    # command: tail -F anything

  # path_planner_service:
  #   build:
  #     context: .
  #     dockerfile: dockerfile
  #   image: tbot/path_planning_service:latest
  #   volumes:
  #     - "/tmp/.X11-unix:/tmp/.X11-unix:rw"
  #     - ros_kortex:/ros_kortex
  #   # networks:
  #   #   - tbot_net
  #   network_mode: host
  #   depends_on:
  #     - roscore
  #     - main
  #   command: bash -c "sleep 10; roslaunch tbot_path_planning path_planning_service.launch"

# networks:
#   tbot_net:
#     driver: bridge

volumes:
  ros_kortex:
   driver: local
   driver_opts:
    o: bind
    type: none
    device: ../ros_kortex
  # tbot_path_planning:
  #   driver: local
  #   driver_opts:
  #     o: bind
  #     type: none
  #     device: ./tbot_path_planning
  # ros_kortex_vision:
  #  driver: local
  #  driver_opts:
  #   o: bind
  #   type: none
  #   device: ../ros_kortex_vision